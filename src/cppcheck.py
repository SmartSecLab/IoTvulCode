## Grepping functions from the vulnerability context of the file.
# Fetching the functions which have given line context/statement.
### Parsing CppCheck output:


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import lizard
import subprocess as sub
from pylibsrcml import srcml
import os
import xml.etree.ElementTree as et
import sys
import csv

# from lxml import etree
import pandas as pd
import subprocess as sub
import sys

# add parent dir to access modules
# sys.path.append("../")

# from src.scanner import file2metrics


def fetch_location(err):
    """get locations of all the error list generated by CppCeck"""
    dt_loc = {"file": [], "line": [], "column": [], "info": []}
    for loc in err.findall("location"):
        for key, val in (loc.attrib).items():
            dt_loc[key].append(val)

    # avoid list for single valued items;
    # TODO check if it applies for all the projects
    for key in dt_loc.keys():
        if len(dt_loc[key]) == 1:
            dt_loc[key] = dt_loc[key][0]
    return dt_loc


def xml2df(file):
    """convert xml file of cppcheck to dataframe"""
    if os.path.isfile(file):
        xtree = et.fromstring(open(file).read())
        df = pd.DataFrame()

        for errors in xtree.findall(".//errors"):
            for err in errors.findall("error"):
                dt_err = err.attrib
                dt_err.update(fetch_location(err))
                df = pd.concat([df, pd.DataFrame([dt_err])], ignore_index=True).drop(
                    columns=["file"], axis=1
                )
        return df.rename(columns={"file0": "file"})
    else:
        return None


def apply_cppcheck(file_or_dir, xmlfile="output.xml"):
    """find flaws in the file using CppCheck tool
    example commands:
    !cppcheck --template=gcc ../data/projects/contiki-2.4/apps/ 2> err.txt
    !cppcheck --template="{file}; {line}; {severity}; {message}; {code}"
    --template-location=" {file};{line}; {info};{code}\n" ../data/projects/contiki-2.4/apps/ 2> err.txt
    """
    cmd = ["cppcheck " + file_or_dir + " --xml 2> + " + xmlfile]
    process = sub.Popen(cmd, shell=True, stdout=sub.PIPE)
    output = process.stdout.read()
    # TODO: try not to create output.xml file instead use BytesIO.
    df = xml2df(xmlfile)
    df["line"] = df.line.astype(int)
    # df.to_csv('contiki24_cppcheck.csv')
    return df


if __name__ == "__main__":
    chk_dir = "data/projects/contiki-2.4/apps/"
    df_flaw = apply_cppcheck(chk_dir)
    print(project_flaws(df_flaw))
