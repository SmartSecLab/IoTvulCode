code,label
 ( strlen ( me ) ,1
 *pBuffer = MQTT_PACKET_TYPE_CONNECT ; pBuffer++ ;,1
 *pBuffer1 = MQTT_PACKET_TYPE_CONNECT1 ; pBuffer++ ;,1
 ActualFreq 1 = cc1ComputeFreq ( DesiredFreq1 ) ;,1
 ActualFreq = cc1000ComputeFreq ( DesiredFreq ) ;,1
 ActualFreq = cc1000ComputeFreq ( DesiredFreq ) ; ,1
 action = NONE ; action = NONE ; ,1
" bad ( ) { goto sink ; sink: { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( 5 == 5 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( GLOBAL_CONST_FIVE == 5 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( GLOBAL_CONST_TRUE ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( STATIC_CONST_TRUE ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( globalFive == 5 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( globalReturnsTrue ( ) ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( globalReturnsTrue ( ) ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( globalTrue ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( staticFive == 5 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( staticReturnsTrue ( ) ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { if ( staticTrue ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { int j ; for ( j = 0 ; j < 1 ; j++ ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { switch ( 6 ) { case 6: { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( ) { while ( 1 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad ( char * dataCopy ) { data = dataCopy ; data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } bad ( ) { empty statement needed for some flow variants */ } } ",1
" bad ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } bad ( ) { empty statement needed for some flow variants */ } } ",1
" bad ( int * ) realloc ( data_Value , 100*sizeof ( int ) ) ; if ( data_Value == NULL ) { exit ( -1 ) ; } strcpy ( data_Value , "" A String "" ) ; print Line ( data_Value ) ; } bad ( ) { empty statement needed for some flow variants */ } } ",1
" bad { goto sink ; sink: { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad { if ( 1 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad { if ( 5 == 5 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad { if ( GLOBAL_CONST_FIVE == 5 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad { if ( GLOBAL_CONST_TRUE ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad { if ( STATIC_CONST_TRUE ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad { if ( globalFive == 5 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad { if ( globalTrue ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad { int j ; for ( j = 0 ; j < 1 ; j++ ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad { switch ( 6 ) { case 6: { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad { while ( 1 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
" bad { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
 case EUSCI_B3_BASE: Interrupt_disableInterrupt ( INT_EUSCIB3 ) ; Interrupt_unregisterInterrupt ( INT_EUSCIB3 ) ; break ; ,1
 case EUSCI_B3_BASE: int errupt_disable int errupt ( int _EUSCIB3 ) ; int errupt_unregister int errupt ( int _EUSCIB3 ) ; break ;,1
" cp_RESPONSE_CODE ( 205 ) , 0 , size ) ; ",1
" cp_insert ( &optlist , new_option_node ( COS , 0 , NULL ) , memcpy ( COD ( *option ) , data , length ) ; ",1
" data -> newraw = 0 ; if ( data -> newraw ) { Py_INCREF ( data -> newraw ) ; data -> newargs = PyTuple_New ( 1 ) ; PyTuple_SetItem ( data -> newargs , 0 , obj ) ; }",1
" data -> newraw = 0 ; if ( data -> newraw_Value ) { Py_INCREF ( data -> newraw_Value ) ; data -> newargs = PyTuple_New ( 1 ) ; PyTuple_SetItem ( data -> newargs_Value, 0 , obj ) ; }",1
 for ( int B = 0 ; B < 5000 ; i++ ) { t -> runNextEvent ( ) ; } int B = 2 ; for ( int B = 0 ; Bi < 5000 ;B++ ) { t -> runNextEvent ( ) ; } ,1
 for ( int i = 0 ; i < 5000 ; i++ ) { t -> runNextEvent ( ) ; } int x = 2 ; for ( int i = 0 ; i < 5000 ; i++ ) { t -> runNextEvent ( ) ; } ,1
 for ( int i = 0 ; i < 5000 ; i++ ) { t->runNextEvent ( ) ; } int x = 2 ; for ( int i = 0 ; i < 5000 ; i++ ) { t->runNextEvent ( ) ; },1
" getenv ( ""TOSCOMMMAP"" ) ; ",1
" if ( !errorReported ) { reportError ( ""TCPComm : : TCPComm : fcntl ( pipeReadFD , F_SETFL , O_NONBLOCK ) ; "" , fcntl ( pipeReadFD , F_SETFL , O_NONBLOCK ) ) ; } if ( !errorReported ) { int pipeFDPair[2] ; reportError ( ""TCPComm : : TCPComm : pipe ( pipeFDPair ) "" , pipe ( pipeFDPair ) ) ; pipeWriteFD = pipeFDPair[1] ; pipeReadFD = pipeFDPair[0] ; } ",1
" if ( !l_a ) { cp_log ( LOG_EMERG , "" No Address "" ) ; return NULL ; } ",1
" if ( !l_a ) { cp_log ( LOG_EMERG , ""No Address "" ) ; return NULL ; }",1
" if ( !l_a1 ) { cp_log ( LOG_EMERG1 , "" No Address "" ) ; return NULL ; } ",1
" if ( !l_a1 ) { cp_log ( LOG_EMERG_Value , "" No Address "" ) ; return NULL ; } ",1
" if ( !l_a2 ) { cp_log ( LOG_EMERG2 , "" No Address "" ) ; return NULL ; } ",1
" if ( !l_a2 ) { cp_log ( LOG_EMERG_Value , "" No Address "" ) ; return NULL ; } ",1
" if ( !l_a3 ) { cp_log ( LOG_EMERG3 , "" No Address "" ) ; return NULL ; } ",1
" if ( !l_a3 ) { cp_log ( LOG_EMERG_Value , "" No Address "" ) ; return NULL ; } ",1
" if ( !l_a4 ) { cp_log ( LOG_EMERG4 , "" No Address "" ) ; return NULL ; } ",1
" if ( !l_a4 ) { cp_log ( LOG_EMERG_Value , "" No Address "" ) ; return NULL ; } ",1
" if ( !l_aess ) { cp_log ( LOG_EMERG_Value , "" No Address "" ) ; return NULL ; } ",1
 if ( ( 0< = cur_t ) && ( cur_t < NOISE_HISTORY ) ) ,1
 if ( NULL == Pp) { i4Status = ( int32_t)PARAM ; break ; } sA.pr = sA.prr ; ,1
 if ( NULL == Pp1) { i4Status = ( int32_t)PARAM ; break ; } sA.pr1 = sA.prr1 ; ,1
 if ( NULL == Pp2) { i4Status = ( int32_t)PARAM ; break ; } sA.pr2 = sA.prr2 ; ,1
 if ( NULL == Pp3) { i4Status = ( int32_t)PARAM ; break ; } sA.pr3 = sA.prr3 ; ,1
 if ( NULL == Pp4) { i4Status = ( int32_t)PARAM ; break ; } sA.pr4 = sA.prr4 ; ,1
 if ( NULL == Pp5) { i4Status = ( int32_t)PARAM ; break ; } sA.pr5 = sA.prr5 ; ,1
 if ( NULL == Pp6) { i4Status = ( int32_t)PARAM ; break ; } sA.pr6 = sA.prr6 ; ,1
 if ( NULL == Pp7) { i4Status = ( int32_t)PARAM ; break ; } sA.pr7 = sA.prr7 ; ,1
 if ( NULL == Pp8) { i4Status = ( int32_t)PARAM ; break ; } sA.pr8 = sA.prr8 ; ,1
 if ( NULL == Pp9) { i4Status = ( int32_t)PARAM ; break ; } sA.pr9 = sA.prr9 ; ,1
 if ( cert_def -> expire_date_formate > sizeof ( ATCACERT_DATE_FORMAT_SIZESe ) / sizeof ( ATCACERT_DATE_FORMAT_SIZESe [ 0 ] ) ) { return ATCACERT_E_ERROR ; } formatted_date_size = ATCACERT_DATE_FORMAT_SIZES [ cert_def -> expire_date_format ] ; if ( formatted_date_size > sizeof ( formatted_date ) ) { return ATCACERT_E_ERROR ; } ,1
 if ( cert_def -> issue_date_formate > sizeof ( ATCACERT_DATE_FORMAT_SIZESe ) / sizeof ( ATCACERT_DATE_FORMAT_SIZESe [ 0 ] ) ) { return ATCACERT_E_ERROR ; } formatted_date_size = ATCACERT_DATE_FORMAT_SIZES [ cert_def -> issue_date_format ] ; if ( formatted_date_size > sizeof ( formatted_date ) ) { return ATCACERT_E_ERROR ; } } ,1
" if ( pInterfaces ! = 0 ) { memset ( pInterfaces , sizeof ( pInterfaces ) , 0 ) ; } ",1
" if (!l_a) { cp_log(LOG_EMERG, ""No Address ""); return NULL; }",1
 int CA = 0 ; void bad ( ) { CAxx = 10 ;print int Line ( CAxx ) ; } ,1
 int CA = 0 ; void bad ( ) { print int Line ( Line01 ) ; } ,1
 int CA = 0 ; void bad ( ) { print int Line ( Line02) ; } ,1
 int CA = 0 ;void bad ( ) { CA = 10 ;print int Line ( CA ) ; } ,1
 int CA = 0 ;void bad ( ) { print int Line ( mm ) ; } ,1
 int CWE0.563 = 0 ;void bad ( ) { CWE0.563 = 10 ;print int Line ( CWE0.563 ) ; } ,1
 int CWE0.563 = 0 ;void bad ( ) { CWE0.563tyy = 10 ;print int Line ( CWE0.563tyy) ; } ,1
 int CWE0.563 = 0 ;void bad ( ) { CWE0.563xx = 10 ;print int Line ( CWE0.563xx ) ; } ,1
 int CWE0.563 = 0 ;void bad ( ) { print int Line ( mm ) ; } ,1
 int CWE0.563 = 0 ;void bad ( ) { print int Line ( mm223 ) ; } ,1
 int CWE0.563 = 0 ;void bad ( ) { print int Line ( mm33 ) ; } ,1
 int CWE563 = 5 ;staticvoid G ( ) { print int Line ( CWE563 ) ; } ,0
" int Random int ( int lower , int upper ) { return ( ( int ) ( RandomUniform ( ) * ( upper - lower + 1 ) ) + lower ) ; } ",1
" int _EXFUN1 ( chroote , ( const char *__pathe ) ) ;",1
" int _EXFUN2 ( chroota , ( const char *__patha ) ) ;",1
" int _EXFUN3 ( chrootd , ( const char *__pathd ) ) ;",1
" int _EXFUN4 ( chrooted , ( const char *__pathed ) ) ;",1
" int _EXFUN5 ( chrootad , ( const char *__pathad ) ) ;",1
" int _EXFUN6 ( chrootdd , ( const char *__pathdd ) ) ;",1
" int _EXFUN7 ( chrootef , ( const char *__pathef ) ) ;",1
" int _EXFUN8 ( chrootaf , ( const char *__pathaf ) ) ;",1
" int _EXFUN9 ( chrootdf , ( const char *__pathdf ) ) ;",1
" int acomp_drv_deinit ( ACOMP_ID_Type acomp_id ) { /* Return if port id is invalid */ if ( acomp_id < 0 || acomp_id > DEV_ACOMP_NUM ) { ACOMP_LOG ( "" Port %d not enabled , port_id "" ) ; return -WM_FAIL ; } /* Return if the device was not registered */ mdev_t *dev = mdev_get_handle ( mdev_acomp_name [ acomp_id ] ) ; if ( dev == NULL ) { ACOMP_LOG ( "" Device was not initialized "" ) ; return -WM_FAIL ; } ",1
" int acomp_drv_deinite ( ACOMP_ID_Type acomp_ide ) { /* Return if port id is invalid */ if ( acomp_ide < 0 || acomp_ide > DEV_ACOMP_NUM ) { ACOMP_LOG ( "" Port %d not enabled , port_id "" ) ; return -WM_FAIL ; } /* Return if the device was not registered */ mdev_t *dev = mdev_get_handle ( mdev_acomp_name [ acomp_id ] ) ; if ( dev == NULL ) { ACOMP_LOG ( "" Device was not initialized "" ) ; return -WM_FAIL ; } ",1
" int adc_drv_init ( ADC_ID_Type adc_id ) { if ( adc_id < 0 || adc_id > MW300_ADC_NUM ) { ADC_LOG ( "" Port %d not enabled , port_id "" ) ; return -WM_FAIL ; } if ( mdev_get_handle ( mdev_adc_name [ adc_id ] ) != NULL ) return WM_SUCCESS ; } } ",1
" int adc_drv_init ( ADC_ID_Type adc_ide ) { if ( adc_ide < 0 || adc_ide > MW300_ADC_NUMe ) { ADC_LOG ( "" Port %d not enabled , port_id "" ) ; return -WM_FAIL ; } if ( mdev_get_handle ( mdev_adc_name [ adc_id ] ) != NULL ) return WM_SUCCESS ; } } ",1
" int avr_httpd_fs_strcmp ( char *addr , char *ram ) ;",1
" int avr_httpd_fs_strcmp ( char *addr , char *ram1 ) ;",1
" int avr_httpd_fs_strcmp ( char *addr2 , char *ram2 ) ;",1
" int avr_httpd_fs_strcmp ( char *address , char *ram ) ;",1
" int avr_httpd_fs_strcmp ( char *ram , char *addr ) ",1
" int avr_httpd_fs_strcmp ( char *ram2 , char *addr2 ) ",1
 int badGlobal = 0 ;void badSink ( Two int sClass * data ) ;void bad ( ) { Two int sClass * data ;data = NULL ;badGlobal = 1 ;badSink ( data ) ; } ,0
" int chmod ( const char * , mode_t ) ;",1
" int chmod ( const char * , mode_t1 ) ;",1
" int chmod ( const char * , mode_t1_Value ) ;",1
" int chmod ( const char * , mode_t_Value ) ;",1
" int chown ( const char * , uid_t , gid_t ) ;",1
" int chown ( const char * , uid_t , gid_t1 ) ;",1
" int data ; data = 0 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; SOCKET connectSocket = INVALID_SOCKET ; char inputBuffer [ CHAR_ARRAY_SIZE ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , &wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( &service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr* ) &service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '",1
" int execl ( const char * , const char * , ... ) ;",1
" int execle ( const char * , const char * , ... ) ;",1
" int execlp ( const char * , const char * , ... ) ;",1
" int execv ( const char * , char *const [ ] ) ;",1
" int execve ( const char * , char *const [ ] , char *const [ ] ) ;",1
" int execvp ( const char * , char *const [ ] ) ;",1
" int fd = open ( argv [ 1 ] , O_RDONLY ) ;",1
" int fd = open ( argv [ 1 ] , O_RDONLY1 ) ;",1
" int fd = open ( argv [ 1 ] , O_RDWR | O_CREAT ) ;",1
" int fd = open ( argv [ 1 ] , O_RDWR | O_CREAT1 ) ;",1
 int fgetc ( FILE * stream ) ,1
 int get_ser_fd ( ) { return serial_source_fd ( ser_src ) ; } ,1
 int ipv6_addr_is_zero ( const ip6_addr_t *addr ) { int i ; for ( i = 0 ;i<16 ;i++ ) { if ( addr -> addr [ i ] ) { return 0 ; } } return 1 ; } ,1
 int model = atoi ( argv [ 1 ] + 6 ) ;,1
 int model = atoi ( argv1 [ 1 ] + 6 ) ;,1
 int model = atoi ( argv2 [ 1 ] + 6 ) ;,1
" int printf ( const char *format , ... ) { va_list args ; va_start ( args , format ) ; return TN_print ( 0 , format , args , 0 ) ; } ",1
" int printf ( const char *format , ... ) { va_list args ; va_start ( args , format ) ; return print ( 0 , format , args ) ; } ",1
" int printf ( const char *format , ... ) { va_list args33 ; va_start ( args33 , format ) ; return TN_print ( 0 , format , args33 , 0 ) ; } ",1
" int printf ( const char *format1 , ) { va_list args1 ; va_start ( args1 , format ) ; return print ( 0 , format1 , args ) ; } ",1
" int snprintf ( char *buf , unsigned int count , const char *format , ) { va_list args22 ; ( void ) count ; va_start ( args , format ) ; return print ( &buf , format , args33 ) ; } ",1
" int snprintf ( char *buf , unsigned int count , const char *format , ... ) { va_list args ; ( void ) count ; va_start ( args , format ) ; return TN_print ( &buf , format , args , count ) ; } ",1
" int snprintf ( char *buf , unsigned int count , const char *format , ... ) { va_list args ; ( void ) count ; va_start ( args , format ) ; return print ( &buf , format , args ) ; } ",1
" int snprintf ( char *buf , unsigned int count , const char *format , ? ) { va_list args33 ; ( void ) count ; va_start ( args33 , format ) ; return TN_print ( &buf , format , args33 , count ) ; } ",1
" int sprintf ( char *out , const char *format , ) { va_list args ; va_start ( args23 , format ) ; return TN_print ( &out , format , args44 , 0 ) ; } ",1
" int sprintf ( char *out , const char *format , ) { va_list args22 ; va_start ( args22 , format ) ; return print ( &out , format , args22 ) ; } ",1
" int sprintf ( char *out , const char *format , ... ) { va_list args ; va_start ( args , format ) ; return TN_print ( &out , format , args , 0 ) ; } ",1
" int sprintf ( char *out , const char *format , ... ) { va_list args ; va_start ( args , format ) ; return print ( &out , format , args ) ; } ",1
" int tcplib_connect ( struct tcplib_sock *sock , struct sockaddr_in6 *serv_addr ) { if ( sock -> tx_buf == NULL ) return -1 ; switch ( sock -> state ) { case TCP_CLOSED: memset ( &sock -> l_ep , 0 , sizeof ( struct sockaddr_in6 ) ) ; sock -> l_ep.sin6_port = htons ( alloc_local_port ( ) ) ; break ; case TCP_LISTEN: break ; default: return -1 ; } ",1
" namespace CW { staticvoid G1 ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = '",0
" namespace CW { staticvoid G1 ( ) { if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = '",0
 namespace CW { staticvoid G2 ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',0
 namespace CW { staticvoid G2 ( ) { if ( STATIC_CONST_TRUE ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',0
 namespace CWE369_Divide_by_Zero__float_connect_socket_81 { void CWE369_Divide_by_Zero__float_connect_socket_81_GG2B::action ( float data ) const { { int result = ( int ) ( 100.0 / data ) ; print int Line ( result ) ; } } ,0
 namespace CWE415_Double_Free__malloc_free_char_84 { CWE415_Double_Free__malloc_free_char_84_GB2G::CWE415_Double_Free__malloc_free_char_84_GB2G ( char * dataCopy ) { data = dataCopy ; data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } free ( data ) ; } ,0
" namespace char_calloc_84 { char_calloc_84_GG2B:: char_calloc_84_GG2B ( char * dataCopy ) { data = dataCopy ; data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_84_GG2B::~ char_calloc_84_GG2B ( ) { ; } } ",0
 namespace int 64_t_81 { void int 64_t_81_GB2G::action ( int 64_t * data ) const { } } ,0
 noise_hash -> size = NOISE_DEFAULT_ELEMENT_SIZE ; noise_hash -> elements = ( char * ) malloc ( sizeof ( char ) *noise_hash -> size ) ; ,1
" printf ( "" Err "" , c_read , c_read ) ; fL ( &sorted , count ) ; closedir ( &wdir ) ; return -5 ; }",1
" printf ( "" ErrG "" , a_read , a_read ) ; fr ( &sorted , count ) ; closedir ( &wdir ) ; return -3 ; }",1
" printf ( "" Error "" , n_readQ , b_readQ ) ; free_List ( &sorted , countQ ) ; closedir ( &wdir ) ; return -6 ; }",1
" printf ( "" Error"" , C_read , C_read ) ; free_L ( &sorted , count ) ; closedir ( &wdir ) ; return -1 ; }",1
" printf ( "" Errors "" , d_read , d_read ) ; L ( &sorted , count ) ; closedir ( &wdir ) ; return -4 ; }",1
" staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } initialized values. ",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
" staticvoid G1 ( ) { if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF ) { print Line ( "" Ftc failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed _Value ! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char data ; char * po int er = ( char * ) ALLOCA ( sizeof ( char ) ) ; data = 5 ; *po int er = data ; { char data = *po int er ; print HexCharLine ( data ) ; } } } } ",0
" staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
" staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
" staticvoid G1 ( ) { while ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } break ; } } ",0
" staticvoid G2 ( ) { if ( 1 ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( 1 ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( 1 ) { if ( ImpersonateSelf ( SecurityImpersonation ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( 1 ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( 1 ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( 1 ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( 1 ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( 1 ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( 1 ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( STATIC_CONST_FIVE == 5 ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( STATIC_CONST_FIVE == 5 ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
" staticvoid G2 ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
" staticvoid G2 ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
" staticvoid G2 ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
" staticvoid G2 ( ) { if ( STATIC_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
" staticvoid G2 ( ) { if ( STATIC_CONST_TRUE ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( STATIC_CONST_TRUE ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( STATIC_CONST_TRUE ) { { /* FIX: Use the correct number of arguments */ sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
" staticvoid G2 ( ) { if ( STATIC_CONST_TRUE ) { { /* FIX: Use the correct number of arguments */ sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest_Value ) ; } } } ",0
" staticvoid G2 ( ) { if ( STATIC_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
" staticvoid G2 ( ) { if ( STATIC_CONST_TRUE ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
" staticvoid G2 ( ) { if ( STATIC_CONST_TRUE ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
" staticvoid G2 ( ) { if ( STATIC_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! _Value03 "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
 staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { char data ; char * po int er = ( char * ) ALLOCA ( sizeof ( char ) ) ; data = 5 ; *po int er = data ; { char data = *po int er ; print HexCharLine ( data ) ; } } } } ,0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF ) { print Line ( "" Ftc failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
" staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
" staticvoid G2 ( ) { if ( staticTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
 staticvoid GB2G ( ) { int * data ; data = NULL ; data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } free ( data ) ; } ,0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { free ( data ) ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { free ( data ) ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { free ( data ) ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { free ( data ) ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { free ( data ) ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { free ( data ) ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { free ( data ) ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { free ( data ) ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 7 ) { case 7: free ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 7 ) { case 7: free ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 7 ) { case 7: free ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 7 ) { case 7: free ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 7 ) { case 7: free ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 7 ) { case 7: free ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 7 ) { case 7: free ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
" staticvoid GB2G2 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 7 ) { case 7: free ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
" staticvoid GB2G2Sink ( char * data ) { if ( GB2G2Static ) { free ( data ) ; } } staticvoid GB2G2 ( ) { char * data ; data = NULL ; data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G2Static = 1 ; GB2G2Sink ( data ) ; } ",0
" staticvoid GB2G2Sink ( char * data ) { if ( GB2G2Static ) { free ( data ) ; } } staticvoid GB2G2 ( ) { char * data ; data = NULL ; data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G2Static = 1 ; GB2G2Sink ( data ) ; } ",0
" staticvoid GB2G2Sink ( char * data ) { if ( GB2G2Static ) { free ( data ) ; } } staticvoid GB2G2 ( ) { char * data ; data = NULL ; data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G2Static = 1 ; GB2G2Sink ( data ) ; } ",0
" staticvoid GB2G2Sink ( char * data ) { if ( GB2G2Static ) { free ( data ) ; } } staticvoid GB2G2 ( ) { char * data ; data = NULL ; data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G2Static = 1 ; GB2G2Sink ( data ) ; } ",0
" staticvoid GB2G2Sink ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G2Static = 1 ; GB2G2Sink ( data ) ; } ",0
" staticvoid GB2G2Sink ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G2Static = 1 ; GB2G2Sink ( data ) ; } ",0
" staticvoid GB2G2Sink ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G2Static = 1 ; GB2G2Sink ( data ) ; } ",0
" staticvoid GB2G2Sink ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G2Static = 1 ; GB2G2Sink ( data ) ; } ",0
" staticvoid GG2B1 ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",0
" staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { } } ",0
" staticvoid GG2B2 ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",0
" staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { } } ",0
 u int 32_t NRef = ( ( desiredFreq + IF ) ) ; NRef = ( ( desiredFreq + IF ) << 2 ) / FRef ;,1
 u int 32_t NRef1 = ( ( desiredFreq1 + IF1 ) ) ; NRef = ( ( desiredFreq + IF1 ) << 5 ) / FRef ;,1
 uint32_t NRef = ( ( desiredFreq + IF ) ) ; NRef = ( ( desiredFreq + IF ) << 2 ) / FRef ; ,1
" uint8_t uStringCompare1 = 1 ; if ( TEST_PROTECT ( ) ) { uStringCompare1 = memcmp ( cpBuffer, cpBufferRead, testIotUART_BUFFER_LENGTH ) ; }",1
" void bad::action ( char * data ) { { size_t i , destLen ; char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",1
 void bad::action ( float data ) { { int result = ( int ) ( 100.0 / data ) ; print int Line ( result ) ; } } } ,1
 void* data = payload + ( D_M_F ( 0 ) / 10 ) ; ,1
 while ( ( *bufPtr++ ! = ' ' ) && ( length++ < 255 ) ) ; buffer [length] = ',1
" xResult = C_CreateObject ( xSession, ( A ) & D, sizeof ( B ) / sizeof ( E ), & xObject ) ; D[ 3 ].pValue = & xFalse ; mbedtls_mpi_read_binary_IgnoreAndReturn ( 0 ) ; xResult = C_CreateObject ( xSession, ( A ) & D, sizeof ( xD ) / sizeof ( E), & xObject ) ; ",1
( lowpan -> addr [ 0 ] == prefixBuffer [ i ] [ 0 ] ) ,1
( lowpan1 -> addr1 [ 0 ] == prefixBuffer1 [ i ] [ 0 ] ) ,1
"( unsigned int ) random ( ) ,",1
"( unsigned int ) random ( ) , ",1
"( unsigned int1 ) random ( ) ,",1
"( unsigned int10 ) random ( ) ,",1
"( unsigned int2 ) random ( ) ,",1
"( unsigned int3 ) random ( ) ,",1
"( unsigned int4 ) random ( ) ,",1
"( unsigned int5 ) random ( ) ,",1
"( unsigned int6 ) random ( ) ,",1
"( unsigned int7 ) random ( ) ,",1
"( unsigned int8 ) random ( ) ,",1
"( unsigned int9 ) random ( ) ,",1
(system(cmd_buf) != 0),1
* ( volatile uint32_t * ) 0x81021100 = cr ; *FRE = 0x000e0000 ; while ( ! ( frr_cr & 0x00008000 ) ) { fr_cr = *FRE ; } mr = *FRE_R & 0x1fff ; *fre = 40000000 * 6 / mr ; return HAL_OK ; },1
* ( volatile uint32_t * ) 0x81021100 = cr1 ; *FRE1 = 0x000e0000 ; while ( ! ( frr_cr1 & 0x00008000 ) ) { fr_cr = *FRE ; } mr = *FRE_R & 0x1fff ; *fre = 40000000 * 6 / mr ; return HAL_OK ; },1
* ( volatile uint32_t * ) 0x81021100 = cr2 ; *FRE2 = 0x000e0000 ; while ( ! ( frr_cr2 & 0x00008000 ) ) { fr_cr = *FRE ; } mr = *FRE_R & 0x1fff ; *fre = 40000000 * 6 / mr ; return HAL_OK ; },1
* ( volatile uint32_t * ) 0x81021100 = cr3 ; *FRE3 = 0x000e0000 ; while ( ! ( frr_cr3 & 0x00008000 ) ) { fr_cr = *FRE ; } mr = *FRE_R & 0x1fff ; *fre = 40000000 * 6 / mr ; return HAL_OK ; },1
* ( volatile uint32_t * ) 0x81021100 = cr4 ; *FRE4 = 0x000e0000 ; while ( ! ( frr_cr4 & 0x00008000 ) ) { fr_cr = *FRE ; } mr = *FRE_R & 0x1fff ; *fre = 40000000 * 6 / mr ; return HAL_OK ; },1
* ( volatile uint32_t * ) 0x81021100 = cr5 ; *FRE5 = 0x000e0000 ; while ( ! ( frr_cr5 & 0x00008000 ) ) { fr_cr = *FRE ; } mr = *FRE_R & 0x1fff ; *fre = 40000000 * 6 / mr ; return HAL_OK ; },1
* ( volatile uint32_t * ) 0x81021100 = cra ; *FREa = 0x000e0000 ; while ( ! ( fr_cr & 0x00008000 ) ) { fr_cra = *FRE ; } mr = *FRE_R & 0x1fff ; *fre = 40000000 * 6 / mr ; return H_OK ; },1
* ( volatile uint32_t * ) 0x81021100 = crd ; *FREd = 0x000e0000 ; while ( ! ( fr_cr & 0x00008000 ) ) { fr_crd = *FRE ; } mr = *FRE_R & 0x1fff ; *fre = 40000000 * 6 / mr ; return H_OK ; },1
* ( volatile uint32_t * ) 0x81021100 = crf ; *FREf = 0x000e0000 ; while ( ! ( fr_cr & 0x00008000 ) ) { fr_crf = *FRE ; } mr = *FRE_R & 0x1fff ; *fre = 40000000 * 6 / mr ; return H_OK ; },1
* ( volatile uint32_t * ) 0x81021100 = crg ; *FREg = 0x000e0000 ; while ( ! ( fr_cr & 0x00008000 ) ) { fr_crg = *FRE ; } mr = *FRE_R & 0x1fff ; *fre = 40000000 * 6 / mr ; return H_OK ; },1
* ( volatile uint32_t * ) 0x81021100 = crs ; *FREs = 0x000e0000 ; while ( ! ( fr_cr & 0x00008000 ) ) { fr_crs = *FRE ; } mr = *FRE_R & 0x1fff ; *fre = 40000000 * 6 / mr ; return H_OK ; },1
* FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_22cer1 & 0x00008000 ) ) { frequency_c2er1 = *FRE_DET_CeR21 ; } measure_result = *FRE_DET_CeR2 & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
* FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_22cr & 0x00008000 ) ) { frequency_c2r = *FRE_DET_CR2 ; } measure_result = *FRE_DET_CR2 & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
* FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_22cr1 & 0x00008000 ) ) { frequency_c2r1 = *FRE_DET_CR21 ; } measure_result = *FRE_DET_CR2 & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
* FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_22crr1 & 0x00008000 ) ) { frequency_c2rr1 = *FRE_DET_CRR21 ; } measure_result = *FRE_DET_CR2 & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
* FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_cer1 & 0x00008000 ) ) { frequency_cer1 = *FRE_DET_CeR1 ; } measure_result = *FRE_DET_CeR & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
* FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_cr1 & 0x00008000 ) ) { frequency_cr1 = *FRE_DET_CR1 ; } measure_result = *FRE_DET_CR & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
* FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_crr1 & 0x00008000 ) ) { frequency_crr1 = *FRE_DET_CRR1 ; } measure_result = *FRE_DET_CR & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
"*/ staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
*FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_22cer1 & 0x00008000 ) ) { frequency_c2er1 = *FRE_DET_CeR_Value05 ; } measure_result = *FRE_DET_CeR2 & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
*FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_22cr & 0x00008000 ) ) { frequency_c2r = *FRE_DET_CR_Value ; } measure_result = *FRE_DET_CR2 & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
*FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_22cr1 & 0x00008000 ) ) { frequency_c2r1 = *FRE_DET_CR_Value02 ; } measure_result = *FRE_DET_CR2 & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
*FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_22crr1 & 0x00008000 ) ) { frequency_c2rr1 = *FRE_DET_CRR_Value04 ; } measure_result = *FRE_DET_CR2 & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
*FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_cer1 & 0x00008000 ) ) { frequency_cer1 = *FRE_DET_CeR_Value04 ; } measure_result = *FRE_DET_CeR & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
*FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_cr1 & 0x00008000 ) ) { frequency_cr1 = *FRE_DET_CR_Value0 ; } measure_result = *FRE_DET_CR & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
*FRE_DET_CR = 0x000e0000 ; while ( ! ( frequency_crr1 & 0x00008000 ) ) { frequency_crr1 = *FRE_DET_CRR_Value06 ; } measure_result = *FRE_DET_CR & 0x1fff ; *frequency = 40000000 * 6 / measure_result ; return HAL_RTC_STATUS_OK ; } ,1
*buf = ( hexchar_to_dec ( seg [1] ) << 4 ) + hexchar_to_dec ( seg [2] ) ; ,1
*buf = ( hexchar_to_dec ( seg3 [ 4 ] ) << 4 ) + hexchar_to_dec ( seg3 [ 2 ] ) ;,1
*buf = ( hexchar_to_dec2 ( seg1 [ 2 ] ) << 4 ) + hexchar_to_dec ( seg1 [ 2 ] ) ;,1
*buf = ( hexchar_to_dec3 ( seg2 [ 3 ] ) << 4 ) + hexchar_to_dec ( seg2 [ 2 ] ) ;,1
*buf = ( hexchar_to_dec4 ( seg4 [ 1 ] ) << 4 ) + hexchar_to_dec ( seg4 [ 2 ] ) ;,1
*carr = new signed char [sz] ; ,1
*carr = new unsigned char [sfdz] ; ,1
*carr = new unsigned char [sfffz] ; ,1
*carr = new unsigned char [sfsdz] ; ,1
*carr = new unsigned char [sfsdz_Value] ; ,1
*carr = new unsigned char [sz] ; ,1
*carr1 = new signed char [ sz1 ] ; ,1
*carr2 = new signed char [ sz2 ] ; ,1
*carr3 = new signed char [ sz3 ] ; ,1
*carr4 = new signed char [ sz4 ] ; ,1
*gS_header = ( whd_bus_gS_header_t ) ( ( uint32_t ) ( ( whd_bus_gS_command_mapping[ ( int ) direction] & 0x1 ) << 31 ) | ( uint32_t ) ( ( GS_INCREMENT_ADDRESS & 0x1 ) << 30 ) | ( uint32_t ) ( ( function & 0x3 ) << 28 ) | ( uint32_t ) ( ( address & 0x1FFFF ) << 11 ) | ( uint32_t ) ( ( size & 0x7FF ) << 0 ) ) ; ,1
*gS_header1 = ( whd_bus_gS_header_t ) ( ( uint32_t ) ( ( whd_bus_gS_command_mapping[ ( int ) direction] & 0x1 ) << 31 ) | ( uint32_t ) ( ( GS_INCREMENT_ADDRESS & 0x1 ) << 30 ) | ( uint32_t ) ( ( function1 & 0x3 ) << 28 ) | ( uint32_t ) ( ( address & 0x1FFFF ) << 11 ) | ( uint32_t ) ( ( size1 & 0x7FF ) << 0 ) ) ; ,1
*gS_header2 = ( whd_bus_gS_header_t ) ( ( uint32_t ) ( ( whd_bus_gS_command_mapping[ ( int ) direction] & 0x1 ) << 31 ) | ( uint32_t ) ( ( GS_INCREMENT_ADDRESS & 0x1 ) << 30 ) | ( uint32_t ) ( ( function2 & 0x3 ) << 28 ) | ( uint32_t ) ( ( address & 0x1FFFF ) << 11 ) | ( uint32_t ) ( ( size2 & 0x7FF ) << 0 ) ) ; ,1
*gS_header3 = ( whd_bus_gS_header_t ) ( ( uint32_t ) ( ( whd_bus_gS_command_mapping[ ( int ) direction] & 0x1 ) << 31 ) | ( uint32_t ) ( ( GS_INCREMENT_ADDRESS & 0x1 ) << 30 ) | ( uint32_t ) ( ( function3 & 0x3 ) << 28 ) | ( uint32_t ) ( ( address3 & 0x1FFFF ) << 11 ) | ( uint32_t ) ( ( size3 & 0x7FF ) << 0 ) ) ; ,1
*gS_header4 = ( whd_bus_gS_header_t ) ( ( uint32_t ) ( ( whd_bus_gS_command_mapping[ ( int ) direction] & 0x1 ) << 31 ) | ( uint32_t ) ( ( GS_INCREMENT_ADDRESS & 0x1 ) << 30 ) | ( uint32_t ) ( ( function4 & 0x3 ) << 28 ) | ( uint32_t ) ( ( address4 & 0x1FFFF ) << 11 ) | ( uint32_t ) ( ( size4 & 0x7FF ) << 0 ) ) ; ,1
*product_name_utf8 = strdup ( value1 ) ; ,1
*product_name_utf8 = strdup ( value2 ) ; ,1
*product_name_utf8 = strdup ( value3 ) ; ,1
*product_name_utf8 = strdup ( value4 ) ; ,1
*serial_number_utf8 = strdup ( int_values ) ; ,1
*serial_number_utf8 = strdup ( valued ) ; ,1
*serial_number_utf8 = strdup ( valueed ) ; ,1
*serial_number_utf8 = strdup ( values ) ; ,1
"APort j int ACALL Java_available ( AEnv *jenv , jclass jcls , jlong jarg1 ) { j int jresult = 0 ; NativeSerial *arg1 = ( NativeSerial * ) 0 ; int result ; ",1
"APort jboolean ACALL Java_1cancelWait ( AEnv *jenv , jclass jcls , jlong jarg1 ) { jboolean jresult = 0 ; NativeSerial *arg1 = ( NativeSerial * ) 0 ; bool result ;",1
"APort jboolean ACALL Java_1cancelWait ( AEnv *jenv , jclass jcls , jlong jarg1 ) { jboolean jresult = 0 ; NativeSerial *arg1 = ( NativeSerial * ) 0 ; bool result ; ",1
"APort jboolean ACALL Java_1didEventOccur ( AEnv *jenv , jclass jcls , jlong jarg1 , jint jarg2 ) { jboolean jresult = 0 ; NativeSerial *arg1 = ( NativeSerial * ) 0 ; int arg2 ; bool result ; ",1
"APort jint ACALL Java _1getBaudRate ( AEnv *jenv , jclass jcls , jlong jarg1 ) { jint jresult = 0 ; NativeSerial *arg1 = ( NativeSerial * ) 0 ; int result ; ",1
"APort jint ACALL Java_available ( AEnv *jenv , jclass jcls , jlong jarg1 ) { jint jresult = 0 ; NativeSerial *arg1 = ( NativeSerial * ) 0 ; int result ; ",1
"APort void ACALL Java _1close ( AEnv *jenv , jclass jcls , jlong jarg1 ) { NativeSerial *arg1 = ( NativeSerial * ) 0 ; ",1
"APortvoid ACALL Java _1close ( AEnv *jenv , jclass jcls , jlong jarg1 ) { NativeSerial *arg1 = ( NativeSerial * ) 0 ;",1
Address *data = ( Address * ) malloc ( sizeof ( Address ) ) ; ,1
CHECK_PARAM ( Value -> ets_timer != NULL ) ;,1
CHECK_PARAM ( e2sxt != NULL ) ;,1
CHECK_PARAM ( e2sxt -> ets_timer != NULL ) ;,1
CHECK_PARAM ( e2sxtValue01 != NULL ) ;,1
CHECK_PARAM ( e2sxtValue01 -> ets_timerValue01 != NULL ) ;,1
CHECK_PARAM ( e2xt != NULL ) ;,1
CHECK_PARAM ( e2xt -> ets_timer != NULL ) ;,1
CHECK_PARAMA ( e2xrrt22 != NULL ) ;,1
CHECK_PARAMA ( e2xrrt22 -> ets333_timer != NULL ) ;,1
CHECK_PARAMA ( e2xsst22 != NULL ) ;,1
CHECK_PARAMA ( e2xsst22 -> ets333_timer != NULL ) ;,1
CHECK_PARAMA ( e2xt22 != NULL ) ;,1
CHECK_PARAMA ( e2xt22 -> ets33_timer != NULL ) ;,1
CHECK_PARAMA ( e2xt22Value02 != NULL ) ;,1
CHECK_PARAMA ( e2xtvalue -> ets33_timer_value != NULL ) ;,1
CHECK_PARAMA ( eValue02 -> eValue02_timer != NULL ) ;,1
CHECK_PARAMA01 ( e2xtvalue != NULL ) ;,1
"CHECK_RESULT ( becc_mul_started ( statec -> secret , &statec -> po int _in , statec -> curve_info , &statec -> rv , statec -> process ) ) ;",1
"CHECK_RESULT ( bigen_inv_mod_start ( statec -> k_e , size , ord , size , &statec -> rv , statec -> process ) ) ;",1
"CHECK_RESULT ( bignum_cmp_start ( state -> a , state -> b , state -> size , state -> process ) ) ;",1
"CHECK_RESULT ( bignum_cmp_start ( state -> a22 , state -> b22 , state -> size , state -> process ) ) ;",1
"CHECK_RESULT ( bignum_cmp_start ( states -> as , states -> b , states -> size , state -> process ) ) ;",1
"CHECK_RESULT ( bignum_cmp_started ( stated -> a , stated -> b , stated -> size , stated -> process ) ) ;",1
"CHECK_RESULT ( bignum_cmp_started ( status -> aa , state -> bb , status -> size , status -> processes ) ) ;",1
"CHECK_RESULT ( bignum_inv_mod_start ( state -> k_e , size , ord , size , &state -> rv , state -> process ) ) ;",1
"CHECK_RESULT ( bignum_inv_mod_start ( state -> k_e , size , ords , sizes , &state -> rv , states -> processs ) ) ;",1
"CHECK_RESULT ( bignum_inv_mod_start ( state22 -> k_e22 , size22 , ord22 , size22 , &state -> rv , state -> process22 ) ) ;",1
"CHECK_RESULT ( bignums_inv_mod_starts ( state22 -> k_es , sizes , ords, sizes , &stats -> rs , stats -> process ) ) ;",1
"CHECK_RESULT ( bigstart ( stater -> asr , stater -> b , stater -> size , stater -> processer ) ) ;",1
"CHECK_RESULT ( ecc_mul_get_result ( &state -> po int _out , state -> rv ) ) ;",1
"CHECK_RESULT ( ecc_mul_get_result ( &state -> po int _out , state22 -> rv22 ) ) ;",1
"CHECK_RESULT ( ecc_mul_get_result ( &states -> po int _out , states -> rvs ) ) ;",1
"CHECK_RESULT ( ecc_mul_start ( state -> secret , &state -> po int _in , state -> curve_info , &state -> rv , state -> process ) ) ;",1
"CHECK_RESULT ( ecc_mul_start ( state -> secret , &state22 -> po int _in , state -> curve_info , &state -> rv22, state -> process ) ) ;",1
"CHECK_RESULT ( ecc_mul_start ( states -> secret , &state -> po int _in , states -> curve_info , &state -> rvs , state -> process ) ) ;",1
"CHECK_RESULT ( ecce_mul_get_results ( &stats -> po int _out , states -> rs ) ) ;",1
"CHECK_RESULT ( ecco_mul_get_result ( &states -> po int _out , states -> rv ) ) ;",1
"CHECK_RESULT ( eccos_mul_start ( stat -> secret , &stat -> po int _in , stae -> curve_info , &stae -> r, stat -> process ) ) ;",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSession ) ; CK_RV C ( CK hSession , { ( ( void ) hSession ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSession1 ) ; CK_RV C ( CK hSession1 , { ( ( void ) hSession1 ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSession10 ) ; CK_RV C ( CK hSession10 , { ( ( void ) hSession10 ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSession2 ) ; CK_RV C ( CK hSession2 , { ( ( void ) hSession2 ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSession3 ) ; CK_RV C ( CK hSession3 , { ( ( void ) hSession3 ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSession4 ) ; CK_RV C ( CK hSession4 , { ( ( void ) hSession4 ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSession5 ) ; CK_RV C ( CK hSession5 , { ( ( void ) hSession5 ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSession6 ) ; CK_RV C ( CK hSession6 , { ( ( void ) hSession6 ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSession7 ) ; CK_RV C ( CK hSession7 , { ( ( void ) hSession7 ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSession8 ) ; CK_RV C ( CK hSession8 , { ( ( void ) hSession8 ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSession9 ) ; CK_RV C ( CK hSession9 , { ( ( void ) hSession9 ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSessiona ) ; CK_RV C ( CK hSessiona , { ( ( void ) hSessiona ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSessionb ) ; CK_RV C ( CK hSessionb , { ( ( void ) hSessionb ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSessionc ) ; CK_RV C ( CK hSessionc , { ( ( void ) hSessionc ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSessiond ) ; CK_RV C ( CK hSessiond , { ( ( void ) hSessiond ) ; }",1
"CK ( CK1 CK_BYTE , CK_U , CK_BYTE , CK_UL ) { ( ( void ) hSessione ) ; CK_RV C ( CK hSessione , { ( ( void ) hSessione ) ; }",1
"CK_RV C_VerifyRecover ( CK_SESSION_HANDLE hSession , CK_BYTE_PTR pSignature , CK_ULONG ulSignatureLen , CK_BYTE_PTR pData , CK_ULONG_PTR pulDataLen ) CK_SESSION_HANDLE hSession , ",1
"CK_RV C_VerifyRecover11 ( CK_SESSION_HANDLE hSession11 , CK_BYTE_PTR pSignature11 , CK_ULONG ulSignatureLen , CK_BYTE_PTR pData , CK_ULONG_PTR pulDataLen ) CK_SESSION_HANDLE hSession , ",1
"CK_RV xProvisionPrivateKey ( CK_SESSION_HANDLE xSession , uint8_t * pucPrivateKey , size_t xPrivateKeyLength , uint8_t * pucLabel , CK_OBJECT_HANDLE_PTR pxObjectHandle )",1
"CK_RV xProvisionPrivateKeyF ( CK_SESSION_HANDLE xSessionF , uint8_t * pucPrivateKeyF , size_t xPrivateKeyLengthF , uint8_t * pucLabelF , CK_OBJECT_HANDLE_PTR pxObjectHandle )",1
"CK_RV xProvisionPrivateKeyaF ( CK_SESSION_HANDLE xSessionaF , uint8_t * pucPrivateKeyaF , size_t xPrivateKeyLengthaF , uint8_t * pucLabelaF , CK_OBJECT_HANDLE_PTR pxObjectHandle )",1
"CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84 { CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_bad::CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_bad ( int 64_t dataCopy ) { data = dataCopy ; fscanf ( stdin , "" % "" SCNd64 , &data ) ; } CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_bad::~CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_bad ( ) { if ( data > 0 ) { int 64_t result = data * 2 ; print LongLongLine ( result ) ; } } } ",1
"CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84 { CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_bad::CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_bad ( int 64_t dataCopy ) { data = dataCopy ; fscanf ( stdin66 , "" % "" SCNd64 , &data66 ) ; } CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_bad::~CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_bad ( ) { if ( data66 > 0 ) { int 64_t result = data * 2 ; print LongLongLine ( result ) ; } } } ",1
CWE190_ int eger_Overflow__ int _connect_socket_add_81 { void CWE190_ int eger_Overflow__ int _connect_socket_add_81_bad::action ( int data ) const { { int result = data + 1 ; print int Line ( result ) ; } } } ,1
CWE190_ int eger_Overflow__ int _connect_socket_add_81 { void CWE190_ int eger_Overflow__ int _connect_socket_add_81_bad::action ( int data22 ) const { { int result = data22 + 1 ; print int Line ( result22 ) ; } } } ,1
"CWE190_ int eger_Overflow__char_fscanf_square_74 { void badSink ( map< int , char> dataMap ) ;void bad ( ) { char data ; map< int , char> dataMap ; data = ' ' ; fscanf ( stdin , "" %c "" , &data ) ; dataMap [ 0 ] = data ; dataMap [ 1 ] = data ; dataMap [ 2 ] = data ; badSink ( dataMap ) ; } ",1
"CWE190_ int eger_Overflow__char_fscanf_square_74 { void badSink ( map< int , char> dataMap ) ;void bad ( ) { char data ; map< int , char> dataMap ; data33 = ' ' ; fscanf ( stdin , "" %c "" , &data33 ) ; dataMap [ 0 ] = data ; dataMap [ 1 ] = data ; dataMap [ 2 ] = data ; badSink ( dataMap ) ; } ",1
CWE190_ int eger_Overflow__char_fscanf_square_82 { void CWE190_ int eger_Overflow__char_fscanf_square_82_bad::action ( char data ) { { char result = data * data ; print HexCharLine ( result ) ; } } } ,1
CWE190_ int eger_Overflow__char_fscanf_square_82 { void CWE190_ int eger_Overflow__char_fscanf_square_82_bad::action ( char data11 ) { { char result = data11 * data ; print HexCharLine ( result ) ; } } } ,1
CWE190_ int eger_Overflow__char_max_add_81 { void CWE190_ int eger_Overflow__char_max_add_81_bad::action ( char data ) const { { char result = data + 1 ; print HexCharLine ( result ) ; } } } ,1
CWE190_ int eger_Overflow__char_max_add_81 { void CWE190_ int eger_Overflow__char_max_add_81_bad::action ( char data ) const { { char result = data66 + 1 ; print HexCharLine ( result66 ) ; } } } ,1
"CWE369 bad ( float dataCopy ) { data = dataCopy ; { #ifdef _WIN32 WSADATA wsaData ; int wsaDataInit = 0 ; #endif int recvResult ; struct sockaddr_in service ; SOCKET connectSocket = INVALID_SOCKET ; char inputBuffer [ CHAR_ARRAY_SIZE ] ; do { #ifdef _WIN32 if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , &wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; #endif connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( &service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr* ) &service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '",1
CWE369 bad::action ( float data ) { { int result = ( int ) ( 100.0 / data ) ; print int Line ( result ) ; } } } ,1
"CanCastAs int eger ( double *d , double min , double max ) { double x = *d ; if ( ( min < = x && x < = max ) ) { double fx = floor ( x ) ; double cx = ceil ( x ) ; double rd = ( ( x - fx ) < 0.5 ) ? fx : cx ; if ( ( errno == EDOM ) || ( errno == ERANGE ) ) { errno = 0 ; } else { double summ , reps , diff ; if ( rd < x ) { diff = x - rd ; } else if ( rd > x ) { diff = rd - x ; } else { return 1 ; } summ = rd + x ; reps = diff/summ ; if ( reps < 8*DBL_EPSILON ) { *d = rd ; return 1 ; } } } return 0 ; } ",1
"CanCastAsInteger ( double *d , double min , double max ) { double x = *d ; if ( ( min < = x && x < = max ) ) { double fx = floor ( x ) ; double cx = ceil ( x ) ; double rd = ( ( x - fx ) < 0.5 ) ? fx : cx ; if ( ( errno = = EDOM ) || ( errno = = ERANGE ) ) { errno = 0 ; } else { double summ , reps , diff ; if ( rd < x ) { diff = x - rd ; } else if ( rd > x ) { diff = rd - x ; } else { return 1 ; } summ = rd + x ; reps = diff/summ ; if ( reps < 8*DBL_EPSILON ) { *d = rd ; return 1 ; } } } return 0 ; } ",1
"CborError cbor_encode_negative_int (CborEncoder *encoder , uint64_t absolute_value ) { return encode_number (encoder , absolute_value - 1 , NegativeIntegerType << MajorTypeShift ) ; }",1
"CborError cbor_encode_negative_intXX (CborEncoder *encoderXX , uint64_t absolute_valueXX ) { return encodeXX_number (encoderXX , absolute_value - 1 , NegativeIntegerType << MajorTypeShift ) ; }",1
"CborError cbor_encode_negative_intXX2 (CborEncoder *encoderXX2 , uint64_t absolute_valueXX 2) { return encodeXX2_number (encoderXX2 , absolute_value - 1 , NegativeIntegerType << MajorTypeShift ) ; }",1
"CborError cbor_encode_tag (CborEncoder *encoder , CborTag tag ) { return encode_number_no_update (encoder , tag , TagType << MajorTypeShift ) ; }",1
"CborError cbor_encode_tag1 (CborEncoder *encoder1 , CborTag tag )1 { return encode_number_no_update (encoder1 , tag1 , TagType1 << MajorTypeShift ) ; }",1
"CborError cbor_encode_tagAF (CborEncoder *encoderAF , CborTag tagAF ) { return encode_number_no_update (encoder , tagAF , TagType << MajorTypeShift ) ; }",1
"CborError cbor_encode_tagAF2 (CborEncoder *encoderAF , CborTag tagAF2 ) { return encode_number_no_update (encoder2 , tagAF2 , TagType1 << MajorTypeShift ) ; }",1
"CborError cbor_encode_tagXX1 (CborEncoder *encoderXX1 , CborTag tagXX1 ) { return encode_number_no_update (encoderXX1 , tagXX1 , TagTypeXX1 << MajorTypeShift ) ; }",1
"CborError cbor_encode_tagXX1 (CborEncoder2 *encoderXX31 , CborTag tagXX31 ) { return encode_number_no_update (encoder3XX1 , tagXX1 , TagTypeXX1 << MajorTypeShift ) ; }",1
"CborError cbor_encode_uint (CborEncoder *encoder , uint64_t value ) { return encode_number (encoder , value , UnsignedIntegerType << MajorTypeShift ) ; } ",1
"CborError cbor_encode_uintXX (CborEncoder *encoder , uint64_t valueXX ) { return encode_number (encoderXX , value , UnsignedIntegerType << MajorTypeShift ) ; } ",1
"CborError cbor_encode_uintXX1 (CborEncoder *encoder1 , uint64_t valueXX1 ) { return encode_number (encoderXX , value , UnsignedIntegerType << MajorTypeShift 01) ; } ",1
Client *data = ( Data * ) malloc ( sizeof ( Data ) ) ; ,1
ClientData *data = ( ClientData * ) malloc ( sizeof ( ClientData ) ) ; ,1
Connect *data = ( Connect * ) malloc ( sizeof ( Connect ) ) ; ,1
DSTATUS D_I ( BYTE drv ) // we only have one { if ( !D_Id ) { atomic D_A = TRUE ; call diskIOStdControl.start ( ) ; atomic D_Id = TRUE ; } return 0 ; } ,1
Data *data_value = ( Data * ) malloc ( sizeof ( Data ) ) ; ,1
DesiredFreq = atoi ( argv [0] ) ; ,1
"Divide_by_Zero__float_connect_socket { Divide_by_Zero__float_connect_socket_83_bad::CWE369_Divide_by_Zero__float_connect_socket_83_bad ( float dataCopy ) { data = dataCopy ; { #ifdef _WIN32 WSADATA wsaData ; int wsaDataInit = 0 ; #endif int recvResult ; struct sockaddr_in service ; SOCKET connectSocket = INVALID_SOCKET ; char inputBuffer [ CHAR_ARRAY_SIZE ] ; do { #ifdef _WIN32 if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , &wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; #endif connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( &service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr* ) &service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '",1
Divide_by_Zero__float_connect_socket { void Divide_by_Zero__float_connect_socket_81_bad::action ( float data ) const { { int result = ( int ) ( 100.0 / data ) ; print int Line ( result ) ; } } } ,1
Divide_by_Zero__float_connect_socket { void Divide_by_Zero__float_connect_socket_82_bad::action ( float data ) { { int result = ( int ) ( 100.0 / data ) ; print int Line ( result ) ; } } } ,1
Double_Free__malloc_free_ int 64_t { void bad::action ( int 64_t * data2 ) const { free ( data2 ) ; } } ,1
Double_Free__malloc_free_ int 64_t_81 { void bad::action ( int 64_t * datag ) const { free ( datag ) ; } } ,1
Double_Free__malloc_free_ int _82 { void Double_Free__malloc_free_ int _82_bad::action ( int * datah ) { free ( datah ) ; } ,1
Double_Free__malloc_free_ int { bad::action ( int * data1 ) { free ( data1 ) ; } ,1
Double_Free__malloc_free_char { bad:: Double_Free__malloc_free_char_bad ( char * dataCopy ) { data1 = dataCopy ; data1 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } free ( data1 ) ; } ,1
Double_Free__malloc_free_char { void bad::action ( char * data1 ) const { free ( data1 ) ; } } ,1
Double_Free__malloc_free_char_81 { void Double_Free__malloc_free_char_81_bad::action ( char * data l) const { free ( datal ) ; } } ,1
Double_Free__malloc_free_char_84 { Double_Free__malloc_free_char_84_bad::Double_Free__malloc_free_char_84_bad ( char * dataCopy2 ) { data = dataCopy2 ; data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } free ( data ) ; } ,1
"ERR_error_string ( ERR_get_error1 ( ) , NULL ) ) ;",1
"ERR_error_string ( ERR_get_error2 ( ) , NULL ) ) ;",1
"ERR_error_string ( ERR_get_error3 ( ) , NULL ) ) ;",1
EVP_des_ecb1 ( ) ;,1
EVP_des_ecb10 ( ) ;,1
EVP_des_ecb2 ( ) ;,1
EVP_des_ecb3 ( ) ;,1
EVP_des_ecb4 ( ) ;,1
EVP_des_ecb5 ( ) ;,1
EVP_des_ecb6 ( ) ;,1
EVP_des_ecb7 ( ) ;,1
EVP_des_ecb8 ( ) ;,1
EVP_des_ecb9 ( ) ;,1
"FILE * _EXFUN ( tmpfile , ( void ) ) ;",1
"FILE * _EXFUN 01 ( tmpfile , ( void ) ) ;",1
"FILE * _EXFUNa ( tmpfile , ( void ) ) ;",1
"FILE * _EXFUNb ( tmpfile , ( void ) ) ;",1
"FILE * _EXFUNc ( tmpfile , ( void ) ) ;",1
"FILE * _EXFUNd ( tmpfile , ( void ) ) ;",1
"FILE *f = fopen ( argv [ 1 ] , "" r "" ) ;",1
"FILE *f = fopen ( argv [ 1 ] , "" r1 "" ) ;",1
"FILE *f = fopen ( argv [ 1 ] , "" w+ "" ) ;",1
"FILE *f = fopen ( argv [ 1 ] , "" w1+ "" ) ;",1
"FILE *fp = fopen ( file , "" r "" ) ;",1
"FILE *fp = fopen ( file , ""r"" ) ;",1
"FILE *write_ptr ; write_ptr = fopen ( "" pseudo-random-data.bin "" , "" wb "" ) ;",1
"FILE *write_ptr ; write_ptre1 = fopen ( "" pseudo-random-data.bin "" , "" API1 "" ) ;",1
"FILE *write_ptr ; write_ptre2 = fopen ( "" pseudo-random-data.bin "" , "" API2 "" ) ;",1
"FILE *write_ptr ; write_ptre3 = fopen ( "" pseudo-random-data.bin "" , "" API3 "" ) ;",1
"FILE *write_ptr ; write_ptre4 = fopen ( "" pseudo-random-data.bin "" , "" API4 "" ) ;",1
"FILE *write_ptr ; write_ptred = fopen ( "" pseudo-random-data.bin "" , "" wbed "" ) ;",1
"FILE *write_ptr ; write_ptred = fopen ( "" pseudo-random-data.bin1 "" , "" wbed1 "" ) ;",1
"FILE *write_ptr ; write_ptred = fopen ( "" pseudo-random-data.bin2 "" , "" wbed2 "" ) ;",1
"FILE *write_ptr ; write_ptreda = fopen ( "" pseudo-random-data.bin6 "" , "" wbed6 "" ) ;",1
"FILE *write_ptr ; write_ptredf = fopen ( "" pseudo-random-data.bin5 "" , "" wbed5 "" ) ;",1
"FILE *write_ptr ; write_ptreds = fopen ( "" pseudo-random-data.bin4 "" , "" wbed4 "" ) ;",1
Flash_Emulator::~Flash_Emulator ( ) { free ( this -> buff ) ; delete this -> access_count ; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this -> buff ) ; delete this -> access_count_Value ; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this -> buff ) ; delete this -> access_counta ; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this -> buff ) ; delete this -> access_countd ; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this -> buff ) ; delete this -> access_countf ; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this -> buff ) ; delete this -> access_countk ; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this -> buff ) ; delete this -> access_countkj ; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this -> buff ) ; delete this -> access_countqw ; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this -> buff ) ; delete this -> access_counts ; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this -> buff ) ; delete this -> access_countv ; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this->buff ) ; delete this->access_counta; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this->buff ) ; delete this->access_counta_Value; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this->buff ) ; delete this->access_countd; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this->buff ) ; delete this->access_countf; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this->buff ) ; delete this->access_countk; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this->buff ) ; delete this->access_countkj; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this->buff ) ; delete this->access_countqw; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this->buff ) ; delete this->access_counts; } ,1
Flash_Emulator::~Flash_Emulator ( ) { free ( this->buff ) ; delete this->access_countv; } ,1
Flash_Emulator::~Flash_Emulator01 ( ) { free ( this -> buff ) ; delete this -> access_count01 ; } ,1
Flash_Emulator::~Flash_Emulator01 ( ) { free ( this -> buff ) ; delete this -> access_countx ; } ,1
Flash_Emulator::~Flash_Emulator01 ( ) { free ( this->buff ) ; delete this->access_count01; } ,1
Flash_Emulator::~Flash_Emulator01 ( ) { free ( this->buff ) ; delete this->access_countx; } ,1
Flash_Emulator::~Flash_Emulatora ( ) { free ( this -> buff ) ; delete this -> access_counta1 ; } ,1
Flash_Emulator::~Flash_Emulatora ( ) { free ( this -> buff ) ; delete this -> access_countmj ; } ,1
Flash_Emulator::~Flash_Emulatora ( ) { free ( this->buff ) ; delete this->access_counta1; } ,1
Flash_Emulator::~Flash_Emulatora ( ) { free(this->buff); delete this->access_countmj; },1
Flash_Emulator::~Flash_Emulatorb1 ( ) { free ( this -> buff ) ; delete this -> access_countb1 ; } ,1
Flash_Emulator::~Flash_Emulatorb1 ( ) { free ( this -> buff ) ; delete this -> access_countbx ; } ,1
Flash_Emulator::~Flash_Emulatorb1 ( ) { free ( this->buff ) ; delete this->access_countb1; } ,1
Flash_Emulator::~Flash_Emulatorb1 ( ) { free ( this->buff ) ; delete this->access_countbx; } ,1
Free__malloc_free_ int 64_t_81 { void Free__malloc_free_ int 64_t_81_bad::action ( int 64_t * data ) const { free ( data ) ; } } ,1
Free__malloc_free_ int 64_t_81 { void bad::action ( int 64_t * data2 ) const { free ( data2 ) ; } } ,1
Free__malloc_free_ int _82 { bad::action ( int * data ) { free ( data ) ; } ,1
Free__malloc_free_ int _82 { void bad::action ( int * data ) { free ( data ) ; } ,1
Free__malloc_free_char_81 { void bad::action ( char * data ) const { free ( data ) ; } } ,1
Free__malloc_free_char_81 { void bad::action ( char * data1 ) const { free ( data1 ) ; } } ,1
Free__malloc_free_char_84 { bad ( char * dataCopy ) { data = dataCopy ; data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } free ( data ) ; } ,1
Free__malloc_free_char_84 { bad::ouble_Free__malloc_free_char_84_bad ( char * dataCopy ) { data = dataCopy ; data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } free ( data ) ; } ,1
GetTempPathA ( sizeof ( aaszFullPdsadath ) ) ,1
GetTempPathA ( sizeof ( kkszFullPath ) ) ,1
GetTempPathA ( sizeof ( szFullPath ) ) ,1
GetTempPathA ( sizeof ( szfsdfFullPath ) ) ,1
GetVersionEx5 ( &osVersionInfo ) ,1
GetVersionEx5 ( &osVersionInfo5 ) ,1
GetVersionExe ( &osVersionInformation ) ,1
GetVersionExw ( &osVersionInformo ) ,1
"INIT ( sAp.prgb , GETDATA_MAX_COMMS_SIZE) ; sApduData.prgb = sApduData.prgb ; ",1
"INIT1 ( sAp.prgb , GETDATA_MAX_COMMS_SIZE1) ; sApduData.prgb = sApduData.prgb ; ",1
"INIT2 ( sAp.prgb , GETDATA_MAX_COMMS_SIZE2) ; sApduData.prgb = sApduData.prgb ; ",1
"INIT3 ( sAp.prgb , GETDATA_MAX_COMMS_SIZE3) ; sApduData.prgb = sApduData.prgb ; ",1
"INIT4 ( sAp.prgb , GETDATA_MAX_COMMS_SIZE4) ; sApduData.prgb = sApduData.prgb ; ",1
"INIT5 ( sAp.prgb , GETDATA_MAX_COMMS_SIZE5) ; sApduData.prgb = sApduData.prgb ; ",1
"INIT6 ( sAp.prgb , GETDATA_MAX_COMMS_SIZE6) ; sApduData.prgb = sApduData.prgb ; ",1
"INIT7 ( sAp.prgb , GETDATA_MAX_COMMS_SIZE7) ; sApduData.prgb = sApduData.prgb ; ",1
"INIT8 ( sAp.prgb , GETDATA_MAX_COMMS_SIZE8) ; sApduData.prgb = sApduData.prgb ; ",1
"INIT_STACK_APDUBUFFER ( sApduData.prgbAPDUBuffeedr , SET_AUTH_SCHEME_APDU_BUF_LENed ) ; if ( NULL == PpsAuthVectored ) sApduData.prgbRespBuffer = sApduData.prgbAPDUBuffer ;",1
"INIT_STACK_APDUBUFFER ( sApduData.prgbAPDUBuffer , CLOSE_SESSION_APDU_BUF_LEN ) ; if ( ( SESSION_ID_LOWER_VALUE > PwSessionRefId ) || ( SESSION_ID_HIGHER_VALUE < PwSessionRefId ) ) { i4Status = ( int 32_t ) CMD_LIB_INVALID_SESSIONID ; break ; } sApduData.prgbRespBuffer = sApduData.prgbAPDUBuffer ;",1
"INIT_STACK_APDUBUFFER ( sApduData.prgbAPDUBuffer , GETDATA_MAX_COMMS_SIZE ) ; sApduData.prgbRespBuffer = sApduData.prgbAPDUBuffer ; sApduData.bCmd = CMD_GETDATA ; sApduData.bParam = PARAM_GET_DATA ; sApduData.wPayloadLength = LEN_PL_OID ; sApduData.wResponseLength = GETDATA_MAX_COMMS_SIZE ; sApduData.prgbAPDUBuffer [ OFFSET_PAYLOAD ] = ( u int 8_t ) ( OID_MAX_COMMS_SIZE >> BITS_PER_BYTE ) ; sApduData.prgbAPDUBuffer [ OFFSET_PAYLOAD +1 ] = ( u int 8_t ) OID_MAX_COMMS_SIZE ; i4Status = TransceiveAPDU ( &sApduData , TRUE ) ; if ( CMD_LIB_OK != i4Status ) { break ; ",1
"INIT_STACK_APDUBUFFER ( sApduData.prgbAPDUBuffer , SET_AUTH_SCHEME_APDU_BUF_LEN ) ; if ( NULL == PpsAuthVector ) sApduData.prgbRespBuffer = sApduData.prgbAPDUBuffer ;",1
"INIT_STACK_APDUBUFFER ( sApduData.prgbAPDUBuffer11 , GETDATA_MAX_COMMS_SIZE11 ) ; sApduData.prgbRespBuffer = sApduData.prgbAPDUBuffer ; sApduData.bCmd = CMD_GETDATA ; sApduData.bParam = PARAM_GET_DATA ; sApduData.wPayloadLength = LEN_PL_OID ; sApduData.wResponseLength = GETDATA_MAX_COMMS_SIZE ; sApduData.prgbAPDUBuffer [ OFFSET_PAYLOAD ] = ( u int 8_t ) ( OID_MAX_COMMS_SIZE >> BITS_PER_BYTE ) ; sApduData.prgbAPDUBuffer [ OFFSET_PAYLOAD +1 ] = ( u int 8_t ) OID_MAX_COMMS_SIZE ; i4Status = TransceiveAPDU ( &sApduData , TRUE ) ; if ( CMD_LIB_OK != i4Status ) { break ; ",1
"INIT_STACK_APDUBUFFER ( sApduData.prgbAPDUBuffer113 , SET_AUTH_SCHEME_APDU_BUF_LEN33 ) ; if ( NULL == PpsAuthVector33 ) sApduData.prgbRespBuffer = sApduData.prgbAPDUBuffer ;",1
"INIT_STACK_APDUBUFFER ( sApduData.prgbAPDUBuffer44 , CLOSE_SESSION_APDU_BUF_LEN44 ) ; if ( ( SESSION_ID_LOWER_VALUE44 > PwSessionRefId ) || ( SESSION_ID_HIGHER_VALUE < PwSessionRefId ) ) { i4Status = ( int 32_t ) CMD_LIB_INVALID_SESSIONID ; break ; } sApduData.prgbRespBuffer = sApduData.prgbAPDUBuffer ;",1
"INIT_STACK_APDUBUFFER ( sApduData.prgbAPDUBuffered , CLOSE_SESSION_APDU_BUF_LENed ) ; if ( ( SESSION_ID_LOWER_VALUE > PwSessionRefIded ) || ( SESSION_ID_HIGHER_VALUE < PwSessionRefId ) ) { i4Status = ( int 32_t ) CMD_LIB_INVALID_SESSIONID ; break ; } sApduData.prgbRespBuffer = sApduData.prgbAPDUBuffer ;",1
"INIT_STACK_APDUBUFFER ( sApduData.prgbAPDUBuffered , GETDATA_MAX_COMMS_SIZEed ) ; sApduData.prgbRespBuffer = sApduData.prgbAPDUBuffer ; sApduData.bCmd = CMD_GETDATA ; sApduData.bParam = PARAM_GET_DATA ; sApduData.wPayloadLength = LEN_PL_OID ; sApduData.wResponseLength = GETDATA_MAX_COMMS_SIZE ; sApduData.prgbAPDUBuffer [ OFFSET_PAYLOAD ] = ( u int 8_t ) ( OID_MAX_COMMS_SIZE >> BITS_PER_BYTE ) ; sApduData.prgbAPDUBuffer [ OFFSET_PAYLOAD +1 ] = ( u int 8_t ) OID_MAX_COMMS_SIZE ; i4Status = TransceiveAPDU ( &sApduData , TRUE ) ; if ( CMD_LIB_OK != i4Status ) { break ; ",1
"IPAddress hIP1 = IPAddress.Parse ( RIP1 ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIP2 = IPAddress.Parse ( RIP2 ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIP3 = IPAddress.Parse ( RIP3 ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIP4 = IPAddress.Parse ( RIP4 ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIP5 = IPAddress.Parse ( RIP5 ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPA = IPAddress.Parse ( RIPA ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPA1 = IPAddress.Parse ( RIP1 ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPA2 = IPAddress.Parse ( RIPA2 ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPA3 = IPAddress.Parse ( RIPA3 ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPA4 = IPAddress.Parse ( RIPA4 ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPA5 = IPAddress.Parse ( RIPA5 ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPRT = IPAddress.Parse ( RIP ) ; IPH hostInfo = Dns.GetHostByAddress ( hIPTR ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPRT1 = IPAddress.Parse ( RIP ) ; IPH hostInfo = Dns.GetHostByAddress ( hIPTR1 ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPRT1 = IPAddress.Parse ( RIP ) ; IPH hostInfo = Dns.GetHostByAddress ( hIPTR_Value ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPRTGM = IPAddress.Parse ( RIP ) ; IPH hostInfo = Dns.GetHostByAddress ( hIPTRGM ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPRTM = IPAddress.Parse ( RIP ) ; IPH hostInfo = Dns.GetHostByAddress ( hIPTRM ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"IPAddress hIPY1 = IPAddress.Parse ( RIPY1 ) ; IPH hostInfo = Dns.GetHostByAddress ( hIP ) ; if ( hostInfo.HostName.EndsWith ( ""trustme.com"" ) ) { trusted = true ; } ",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERT ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERT ( "" charlie "" == move ) ; CU_ASSERT ( 7 == move.size ( ) ) ; CU_ASSERT ( "" "" == copy ) ; CU_ASSERT ( 0 == copy.size ( ) ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERT1 ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERT1w ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERT_Value01 ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERT_Value1 ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERTa1 ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERTa1e ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERTa1k ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERTe1 ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERTed ( "" charlie1 "" == move ) ; CU_ASSERTed ( 7 == move.size ( ) ) ; CU_ASSERTed ( "" "" == copy ) ; CU_ASSERT ( 0 == copy.size ( ) ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERTed3 ( "" charlie13 "" == move ) ; CU_ASSERTed ( 7 == move.size ( ) ) ; CU_ASSERTed3 ( "" "" == copy ) ; CU_ASSERT ( 0 == copy.size ( ) ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERTf ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERTfk ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERTfu ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERTfum ( "" "" == copy ) ;",1
"ImmutableString move = std::move ( copy ) ; CU_ASSERTw ( "" "" == copy ) ;",1
"LBL_ERR : mp_clear_multi ( &ta, &tb, &tq, &q, NULL ) ; return res ; ",1
"LBL_ERR1 : mp_clear_multi ( &ta, &tb, &tq, &q, NULL ) ; return res1 ; ",1
"LBL_ERR10 : mp_clear_multi ( &ta, &tb, &tq, &q, NULL ) ; return res10 ; ",1
"LBL_ERR2 : mp_clear_multi ( &ta, &tb, &tq, &q, NULL ) ; return res2 ; ",1
"LBL_ERR3 : mp_clear_multi ( &ta, &tb, &tq, &q, NULL ) ; return res3 ; ",1
"LBL_ERR4 : mp_clear_multi ( &ta, &tb, &tq, &q, NULL ) ; return res4 ; ",1
"LBL_ERR5 : mp_clear_multi ( &ta, &tb, &tq, &q, NULL ) ; return res5 ; ",1
"LBL_ERR6 : mp_clear_multi ( &ta, &tb, &tq, &q, NULL ) ; return res6 ; ",1
"LBL_ERR7 : mp_clear_multi ( &ta, &tb, &tq, &q, NULL ) ; return res7 ; ",1
"LBL_ERR8 : mp_clear_multi ( &ta, &tb, &tq, &q, NULL ) ; return res8 ; ",1
"LBL_ERR9 : mp_clear_multi ( &ta, &tb, &tq, &q, NULL ) ; return res9 ; ",1
"LoadLibrary ( "" DATA.dll "" ) ;",1
"LoadLibrary ( "" FILE4.dll "" ) ;",1
"LoadLibrary ( "" FILE6.dll "" ) ;",1
"LoadLibrary ( "" FILE7.dll "" ) ;",1
"LoadLibrary ( "" wpcap.dll "" ) ;",1
"LoadLibrary ( "" wpcdddap.dll "" ) ;",1
LoadLibrary ( DATA1 ) ;,1
LoadLibrary ( name ) ;,1
Memory_Leak__char_calloc { void bad::action ( char * data ) const { ; } ,1
Memory_Leak__char_calloc { void bad::action ( char * data ) { ; } } ,1
"Memory_Leak__char_calloc_04_bad ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { } } ",1
Memory_Leak__char_calloc_81 { void CWE401_Memory_Leak__char_calloc_81_bad::action ( char * data ) const { ; } ,1
Memory_Leak__char_calloc_82 { void CWE401_Memory_Leak__char_calloc_82_bad::action ( char * data ) { ; } } ,1
"Memory_Leak__char_calloc_84 { CWE bad ( char * dataCopy ) { data = dataCopy ; data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } CWE ad::~CWE _bad ( ) { ; } } ",1
"Memory_Leak__char_calloc_84 { CWE401_Memory_Leak__char_calloc_84_bad::CWE401_Memory_Leak__char_calloc_84_bad ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } CWE401_Memory_Leak__char_calloc_84_bad::~CWE401_Memory_Leak__char_calloc_84_bad ( ) { ; } } ",1
"Net *pxade ( size_t xRequestedSizeBytes4, TickType_t xBlockTimeTicks4 ) { #ifdef CBMC_PROOF_ASSUMPTION_HOLDS #ifdef ipconfigETHERNET_MINIMUM_PACKET_BYTES xNetworkBuffer.pucEthernetBuffer = malloc ( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) ; #else xNetworkBuffer.pucEthernetBuffer = malloc ( xRequestedSizeBytes ) ; #endif #else uint32_t malloc_size ; __CPROVER_assert ( !__CPROVER_overflow_mult ( 2, xRequestedSizeBytes ) ) ; __CPROVER_assume ( malloc_size > 0 && malloc_size < 2 * xRequestedSizeBytes ) ; xNetworkBuffer.pucEthernetBuffer = malloc ( malloc_size ) ; xNetworkBuffer.xDataLength = xRequestedSizeBytes ; return &xNetworkBuffer ; }",1
"Net *pxd ( size_t xRequestedSizeBytes2, TickType_t xBlockTimeTicks2 ) { #ifdef CBMC_PROOF_ASSUMPTION_HOLDS #ifdef ipconfigETHERNET_MINIMUM_PACKET_BYTES xNetworkBuffer.pucEthernetBuffer = malloc ( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) ; #else xNetworkBuffer.pucEthernetBuffer = malloc ( xRequestedSizeBytes ) ; #endif #else uint32_t malloc_size ; __CPROVER_assert ( !__CPROVER_overflow_mult ( 2, xRequestedSizeBytes ) ) ; __CPROVER_assume ( malloc_size > 0 && malloc_size < 2 * xRequestedSizeBytes ) ; xNetworkBuffer.pucEthernetBuffer = malloc ( malloc_size ) ; xNetworkBuffer.xDataLength = xRequestedSizeBytes ; return &xNetworkBuffer ; }",1
"Net *pxdf ( size_t xRequestedSizeBytes3, TickType_t xBlockTimeTicks3 ) { #ifdef CBMC_PROOF_ASSUMPTION_HOLDS #ifdef ipconfigETHERNET_MINIMUM_PACKET_BYTES xNetworkBuffer.pucEthernetBuffer = malloc ( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) ; #else xNetworkBuffer.pucEthernetBuffer = malloc ( xRequestedSizeBytes ) ; #endif #else uint32_t malloc_size ; __CPROVER_assert ( !__CPROVER_overflow_mult ( 2, xRequestedSizeBytes ) ) ; __CPROVER_assume ( malloc_size > 0 && malloc_size < 2 * xRequestedSizeBytes ) ; xNetworkBuffer.pucEthernetBuffer = malloc ( malloc_size ) ; xNetworkBuffer.xDataLength = xRequestedSizeBytes ; return &xNetworkBuffer ; }",1
"Net *pxxx ( size_t xRequestedSizeBytes1, TickType_t xBlockTimeTicks1 ) { #ifdef CBMC_PROOF_ASSUMPTION_HOLDS #ifdef ipconfigETHERNET_MINIMUM_PACKET_BYTES xNetworkBuffer.pucEthernetBuffer = malloc ( ipconfigETHERNET_MINIMUM_PACKET_BYTES ) ; #else xNetworkBuffer.pucEthernetBuffer = malloc ( xRequestedSizeBytes ) ; #endif #else uint32_t malloc_size ; __CPROVER_assert ( !__CPROVER_overflow_mult ( 2, xRequestedSizeBytes ) ) ; __CPROVER_assume ( malloc_size > 0 && malloc_size < 2 * xRequestedSizeBytes ) ; xNetworkBuffer.pucEthernetBuffer = malloc ( malloc_size ) ; xNetworkBuffer.xDataLength = xRequestedSizeBytes ; return &xNetworkBuffer ; }",1
OPENSSL_free ( Data ) ;,1
OPENSSL_free ( File ) ;,1
OPENSSL_free ( Name ) ;,1
OPENSSL_free ( Value ) ;,1
OPENSSL_free ( aap ) ;,1
OPENSSL_free ( caaoernst_cast <char *> ( cn1.c_str ( ) ) ) ;,1
OPENSSL_free ( caaoernst_cast01 <char *> ( cn1.c_str ( ) ) ) ;,1
OPENSSL_free ( coewrnst_cast <char *> ( cn2.c_str ( ) ) ) ;,1
OPENSSL_free ( coewrnst_cast01 <char *> ( cn2.c_str ( ) ) ) ;,1
OPENSSL_free ( convbst_cast <char *> ( cn4.c_str ( ) ) ) ;,1
OPENSSL_free ( convbst_castD <char *> ( cn4.c_str ( ) ) ) ;,1
OPENSSL_free ( coqrwnst_cast <char *> ( cn3.c_str ( ) ) ) ;,1
OPENSSL_free ( coqrwnst_castD <char *> ( cn3.c_str ( ) ) ) ;,1
OPENSSL_free ( p ) ;,1
OPENSSL_free ( pdd ) ;,1
OPENSSL_free ( pff ) ;,1
PORTC & LEDS_CONF_RED ? 0 : LEDS_RED,1
"PROCESS_BEGIN ( ) ; snprintf ( buf ' sizeof ( buf ) ' ""-"" ' uip_ip ( &uip_h ) ) ; ; ",1
"PROCESS_BEGIN ( ) ; snprintf ( buf ' sizeof ( buf ) ' ""-"" ' uip_ip1 ( &uip_h1 ) ) ; ; ",1
"PROCESS_BEGIN ( ) ; snprintf ( buf ' sizeof ( buf ) ' ""-"" ' uip_ip10 ( &uip_h10 ) ) ; ; ",1
"PROCESS_BEGIN ( ) ; snprintf ( buf ' sizeof ( buf ) ' ""-"" ' uip_ip2 ( &uip_h2 ) ) ; ; ",1
"PROCESS_BEGIN ( ) ; snprintf ( buf ' sizeof ( buf ) ' ""-"" ' uip_ip3 ( &uip_h3 ) ) ; ; ",1
"PROCESS_BEGIN ( ) ; snprintf ( buf ' sizeof ( buf ) ' ""-"" ' uip_ip4 ( &uip_h4 ) ) ; ; ",1
"PROCESS_BEGIN ( ) ; snprintf ( buf ' sizeof ( buf ) ' ""-"" ' uip_ip5 ( &uip_h5 ) ) ; ; ",1
"PROCESS_BEGIN ( ) ; snprintf ( buf ' sizeof ( buf ) ' ""-"" ' uip_ip6 ( &uip_h6 ) ) ; ; ",1
"PROCESS_BEGIN ( ) ; snprintf ( buf ' sizeof ( buf ) ' ""-"" ' uip_ip7 ( &uip_h7 ) ) ; ; ",1
"PROCESS_BEGIN ( ) ; snprintf ( buf ' sizeof ( buf ) ' ""-"" ' uip_ip8 ( &uip_h8 ) ) ; ; ",1
"PROCESS_BEGIN ( ) ; snprintf ( buf ' sizeof ( buf ) ' ""-"" ' uip_ip9 ( &uip_h9 ) ) ; ; ",1
PSCD *data = ( PSCD * ) malloc ( sizeof ( PSCD ) ) ; ,1
PSCD *data = ( PSCD * ) ty->clientdata ; ,1
PSCD *data = desc ? ( PSCD * ) desc -> clientdata : 0 ;,1
PSCD *data = desc ? ( PSCD * ) desc->clientdata : 0 ; ,1
PSCD *data = ty ? ( PSCD * ) ty->clientdata : 0 ; ,1
PSCD *data1 = desc ? ( PSCD * ) desc -> clientdata : 0 ;,1
PSCD *dataTest = desc ? ( PSCD * ) descTest -> clientdata : 0 ;,1
PSCD *dataTest = desc ? ( PSCDTest * ) desc -> clientdata : 0 ;,1
"Parameters : : Parameters ( int argc , char **argv ) ",1
"Parameters : : Parameters ( int argcData , char **argv ) ",1
"Parameters : : Parameters ( int argcInt , char **argv ) ",1
"Parameters : : Parameters ( int argcName , char **argv ) ",1
"Parameters : : Parameters ( int argcString , char **argv ) ",1
"Parameters : : Parameters ( int argcValues , char **argv ) ",1
"Parameters : : Parameters ( int argca , char **argva ) ",1
"Parameters : : Parameters ( int argcaInt , char **argva ) ",1
"Parameters : : Parameters ( int argcaName , char **argva ) ",1
"Parameters : : Parameters ( int argcaString , char **argva ) ",1
"Parameters : : Parameters ( int argcaValues , char **argva ) ",1
"Parameters : : Parameters ( int argcadata , char **argva ) ",1
"Py ( PyO *self ) { PySObject *v = ( PySObject * ) self ; type_info *ty = v ? v -> ty : 0 ; return ty ? ty -> str : ( char* ) """" ; } ",1
PySwigObject *sobj = ( PySwigObject * ) v ;,1
PySwigObject *sobj = ( PySwigObject * ) v ; ,1
PySwigObject *sobj1 = ( PySwigObject1 * ) v1 ;,1
PySwigObject *sobjTest = ( PySwigObjectTest * ) v ;,1
PySwigObject *sobjTest = ( PySwigObjectTest* ) vTest ;,1
"Py_AcquirePtr ( PyO *obj , int own ) { if ( own ) { PySObject *sobj = Py_GetSThis ( obj ) ; if ( sobj ) { int oldown = sobj -> own ; sobj -> own = own ; return oldown ; } } return 0 ; } ",1
"Py_AddErrorMsg ( const char* mesg ) { PyO *type = 0 ; PyO *value = 0 ; PyO *traceback = 0 ; if ( PyErr_Occurred ( ) ) PyErr_Fetch ( &type , &value , &traceback ) ; if ( value ) { PyO *old_str = PyO_Str ( value ) ; PyErr_Clear ( ) ; Py_XINCREF ( type ) ; PyErr_Format ( type , ""%s %s"" , PyString_AsString ( old_str ) , mesg ) ; Py_DECREF ( old_str ) ; Py_DECREF ( value ) ; } else { PyErr_Format ( PyExc_RuntimeError , mesg ) ; } } ",1
"Py_AppendOutput ( PyO* result , PyO* obj ) { if ( !result ) { result = obj ; } else if ( result = = Py_None ) { Py_DECREF ( result ) ; result = obj ; } else { if ( !PyList_Check ( result ) ) { PyO *o2 = result ; result = PyList_New ( 1 ) ; PyList_SetItem ( result , 0 , o2 ) ; } PyList_Append ( result , obj ) ; Py_DECREF ( obj ) ; } ",1
"Python_AcquirePtr ( PyObject *obj , int own ) { if ( own ) { PySwigObject *sobj = Python_GetSwigThis ( obj ) ; if ( sobj ) { int oldown = sobj -> own ; sobj -> own = own ; return oldown ; } } return 0 ; } ",1
"Python_AppendOutput ( PyObject* result , PyObject* obj ) { if ( !result ) { result = obj ; } else if ( result == Py_None ) { Py_DECREF ( result ) ; result = obj ; } else { if ( !PyList_Check ( result ) ) { PyObject *o2 = result ; result = PyList_New ( 1 ) ; PyList_SetItem ( result , 0 , o2 ) ; } PyList_Append ( result , obj ) ; Py_DECREF ( obj ) ; } ",1
"RESPONSE_CODE ( 205 ) , 0 , size ) ; ",1
"RESPONSE_CODE ( 225 ) , 0 , size ) ;",1
Reg RegKey::getValues ( ) const { Reg v ; req i = 0 ; ,1
"STATIC_H host_lib_status_t ifx_C_tl_check_chaining_error ( u int 8_t current_chaning , u int 8_t previous_chaining ) { host_lib_status_t status = IFX_C_STACK_ERROR ; if ( ( ( current_chaning == TL_CHAINING_ERROR ) || ( current_chaning == TL_CHAINING_NO ) || ( current_chaning == TL_CHAINING_LAST ) || ( current_chaning == TL_CHAINING_ int ERMEDIATE ) || ( current_chaning == TL_CHAINING_FIRST ) ) ) { if ( ( pctr_states_table [ current_chaning ] [ 0 ] == previous_chaining ) || ( pctr_states_table [ current_chaning ] [ 1 ] == previous_chaining ) ) { status = IFX_C_STACK_SUCCESS ; } } return status ; } ",1
"STATIC_H host_lib_status_t ifx_C_tl_check_chaining_error ( u int 8_t current_chaninge , u int 8_t previous_chaininge ) { host_lib_status_t statuse = IFX_C_STACK_ERROR ; if ( ( ( current_chaning == TL_CHAINING_ERROR ) || ( current_chaning == TL_CHAINING_NO ) || ( current_chaning == TL_CHAINING_LAST ) || ( current_chaning == TL_CHAINING_ int ERMEDIATE ) || ( current_chaning == TL_CHAINING_FIRST ) ) ) { if ( ( pctr_states_table [ current_chaning ] [ 0 ] == previous_chaining ) || ( pctr_states_table [ current_chaning ] [ 1 ] == previous_chaining ) ) { status = IFX_C_STACK_SUCCESS ; } } return status ; } ",1
Segment ( ) { startAddr = 0 ; len = 0 ; } ,1
Segment ( ) { startAddr = 0 ; lenData = 0 ; } ,1
Segment ( ) { startAddr = 0 ; lenName = 0 ; } ,1
Segment ( ) { startAddr = 0 ; lenValues = 0 ; } ,1
Segment ( ) { startAddr = 0 ; len_Value = 0 ; } ,1
Segment ( ) { startAddrData = 0 ; len = 0 ; } ,1
Segment ( ) { startAddrInt = 0 ; lenInt = 0 ; } ,1
Segment ( ) { startAddrName = 0 ; len = 0 ; } ,1
Segment ( ) { startAddrName = 0 ; len_Value = 0 ; } ,1
Segment ( ) { startAddrString = 0 ; len = 0 ; } ,1
Segment ( ) { startAddrValue = 0 ; len = 0 ; } ,1
Sensor_name *data = ( Sensor_name * ) malloc ( sizeof ( Sensor_name ) ) ; ,1
"Static BaseType_t vGattDemoSvcHook ( void ) { BaseType_t xRet = pdFALSE ; BTStatus_t xStatus ; IotBleEventsCallbacks_t xCallback ; xStatus = IotBle_CreateService ( ( BTService_t * ) &xGattDemoService , ( IotBleAttributeEventCallback_t * ) pxCallBackArray ) ; if ( xStatus == eBTStatusSuccess ) { xRet = pdTRUE ; } if ( xRet == pdTRUE ) { xCallback.pConnectionCb = _connectionCallback ; if ( IotBle_RegisterEventCb ( eBLEConnection , xCallback ) != eBTStatusSuccess ) { xRet = pdFAIL ; } } if ( xRet == pdTRUE ) { xRet = xTaskCreate ( vCounterUpdateTaskFunction , ""GattDemoCounterTask"" , configMINIMAL_STACK_SIZE * 4 , NULL , tskIDLE_PRIORITY , &xCounterUpdateTask ) ; } return xRet ; }",1
"Static BaseType_t vGattDemoSvcHookA ( void ) { BaseType_t xRet1= pdFALSE ; BTStatus_t xStatus1 ; IotBleEventsCallbacks_t xCallback ; xStatus1 = IotBle_CreateService ( ( BTService_t * ) &xGattDemoService , ( IotBleAttributeEventCallback_t * ) pxCallBackArrayA ) ; if ( xStatusA == eBTStatusSuccess ) { xRetA = pdTRUE ; } if ( xRetA == pdTRUE ) { xCallback.pConnectionCb = _connectionCallback ; if ( IotBle_RegisterEventCb ( eBLEConnection , xCallback ) != eBTStatusSuccess ) { xRetA = pdFAIL ; } } if ( xRetA == pdTRUE ) { xRet = xTaskCreate ( vCounterUpdateTaskFunction , ""GattDemoCounterTask"" , configMINIMAL_STACK_SIZE * 4 , NULL , tskIDLE_PRIORITY , &xCounterUpdateTask ) ; } return xRet ; }",1
"String Data = null ; if ( data ) { Data = "" No "" ; return ; } ",1
"String cmd = null ;cmd = Environment.GetEnvironmentVariable ( "" cmd "" ) ;cmd = cmd.Trim ( ) ;",1
"String cmd = null ;cmd5 = Environment.GetEnvironmentVariable ( "" cmd5 "" ) ;cmd5 = cmd.Trim ( ) ;",1
"String cmd1 = null ;cmd1 = Environment.GetEnvironmentVariable ( "" cmd "" ) ;cmd1 = cmd.Trim ( ) ;",1
"String cmdos = null ;cmdos = Environment.GetEnvironmentVariable ( "" cmdos "" ) ;cmdos = cmd.Trim ( ) ;",1
"String cmdq = null ;cmdq = Environment.GetEnvironmentVariable ( "" cmdq "" ) ;cmdq = cmdq.Trim ( ) ;",1
"String cmds = null ;cmds = Environment.GetEnvironmentVariable ( "" cmds "" ) ;cmds = cmds.Trim ( ) ;",1
"String i = null ; if ( data ) { i = "" No "" ; return ; } ",1
String i = null ; if ( i != null ) { Dead ( ) ; } ,1
String j = null ; if ( j != null ) { Dead ( ) ; } ,1
"String name = new String ( nameBytes , highByte ) ;",1
"String name5 = new String5 ( nameBytes , highByte5 ) ;",1
"String named = new String ( nameBytes , highByte ) ;",1
"String names = new String ( namesBytes , highByte ) ;",1
"String s = null ; if ( H ) { s = "" Yes "" ; return ; } ",1
"String s1 = null ; if ( data ) { s = "" No "" ; return ; } ",1
"String s1 = null ; if ( data ) { s1 = "" No "" ; return ; } ",1
String s2 = null ; if ( s2 != null ) { Dead ( ) ; } ,1
String s2 = null ; if ( ss != null ) { Dead ( ) ; } ,1
String var = null ; if ( var != null ) { Dead ( ) ; } ,1
"StringRef concat_string_ref ( BlockAllocator &alloc , Args &&... args ) { size_t len = concat_string_ref_count ( 0 , std::forward<Args> ( args ) ... ) ; auto dst = static_cast<u int 8_t *> ( alloc.alloc ( len + 1 ) ) ; auto p = dst ; p = concat_string_ref_copy ( p , std::forward<Args> ( args ) ... ) ; *p = '",1
"StringRef concat_string_ref ( BlockAllocator &alloc , Args3 &&... args3 ) { size_t len = concat_string_ref_count3 ( 0 , std::forward<Args> ( args ) ... ) ; auto ds3 = static_cast<u int 8_t *> ( alloc.alloc ( len + 1 ) ) ; auto p = dst ; p = concat_string_ref_copy ( p , std::forward<Args> ( args ) ... ) ; *p = '",1
"StringRef concat_string_ref ( BlockAllocator &alloc , Args43 &&... args43 ) { size_t len = concat_string_ref_count43 ( 0 , std::forward<Args> ( args ) ... ) ; auto ds3 = static_cast<u int 8_t *> ( alloc.alloc ( len + 1 ) ) ; auto p = dst ; p = concat_string_ref_copy ( p , std::forward<Args> ( args ) ... ) ; *p = '",1
"StringRef realloc_concat_string_ref ( BlockAllocator &alloc , const StringRef &value , Args &&... args ) { if ( value.empty ( ) ) { return concat_string_ref ( alloc , std::forward<Args> ( args ) ... ) ; } auto len = value.size ( ) + concat_string_ref_count ( 0 , std::forward<Args> ( args ) ... ) ; auto dst = static_cast<u int 8_t *> ( alloc.realloc ( const_cast<u int 8_t *> ( value.byte ( ) ) , len + 1 ) ) ; auto p = dst + value.size ( ) ; p = concat_string_ref_copy ( p , std::forward<Args> ( args ) ... ) ; *p = '",1
"StringRef realloc_concat_string_ref ( BlockAllocator &alloc , const StringRef &value , Args3 &&... args3 ) { if ( value.empty ( ) ) { return concat_string_ref3 ( alloc , std::forward<Args> ( args ) ... ) ; } auto len = value.size ( ) + concat_string_ref_count ( 0 , std::forward<Args> ( args ) ... ) ; auto dst = static_cast<u int 8_t *> ( alloc.realloc ( const_cast<u int 8_t *> ( value.byte ( ) ) , len + 1 ) ) ; auto p = dst + value.size ( ) ; p = concat_string_ref_copy ( p , std::forward<Args> ( args ) ... ) ; *p = '",1
"StringRef realloc_concat_string_ref ( BlockAllocator &alloc3 , const StringRef &value , Args43 &&... args43 ) { if ( value.empty ( ) ) { return concat_string_ref43 ( alloc , std::forward<Args> ( args ) ... ) ; } auto len = value.size ( ) + concat_string_ref_count ( 0 , std::forward<Args> ( args ) ... ) ; auto dst = static_cast<u int 8_t *> ( alloc.realloc ( const_cast<u int 8_t *> ( value.byte ( ) ) , len + 1 ) ) ; auto p = dst + value.size ( ) ; p = concat_string_ref_copy ( p , std::forward<Args> ( args ) ... ) ; *p = '",1
"TEST ( TEST_IOT_ADC , AFQP_IotAdcSetChain ) { uint8_t ucCh ; if ( TEST_PROTECT ( ) ) { ucCh = puctestIotAdcChList[ 0 ] ; xAdcChain.ucAdcChannel = ucCh ; for ( int i = 0 ; i < uctestIotAdcChListLen ; i + + ) { xAdcChain.usChainMask | = 1 < < puctestIotAdcChList[ i ] ; } lRetVal = iot_adc_ioctl ( xUserCntx.xAdcHandle , eSetAdcChain , &xAdcChain ) ; if ( lRetVal ! = IOT_ADC_FUNCTION_NOT_SUPPORTED ) { xUserCntx.ucAdcChannel = ucCh ; } } }",1
"TEST ( TEST_IOT_FLASH , AFQP_IotFlashReadInfo ) { IotFlashInfo_t * pxFlashInfo ; int32_t lRetVal ; xFlashHandle = iot_flash_open ( ltestIotFlashInstance ) ; TEST_ASSERT_NOT_EQUAL ( NULL , xFlashHandle ) ; if ( TEST_PROTECT ( ) ) { pxFlashInfo = iot_flash_getinfo ( xFlashHandle ) ; TEST_ASSERT_NOT_EQUAL ( NULL , pxFlashInfo ) ; TEST_ASSERT_NOT_EQUAL ( 0 , pxFlashInfo->ulPageSize ) ; TEST_ASSERT_GREATER_OR_EQUAL ( pxFlashInfo->ulPageSize , pxFlashInfo->ulSectorSize ) ; TEST_ASSERT_GREATER_OR_EQUAL ( pxFlashInfo->ulSectorSize , pxFlashInfo->ulBlockSize ) ; TEST_ASSERT_GREATER_OR_EQUAL ( pxFlashInfo->ulBlockSize , pxFlashInfo->ulFlashSize ) ; } lRetVal = iot_flash_close ( xFlashHandle ) ; TEST_ASSERT_EQUAL ( IOT_FLASH_SUCCESS , lRetVal ) ; }",1
"TEST ( TEST_IOT_FLASHx , AFQP_IotFlashReadInfox ) { IotFlashInfo_t * pxFlashInfox ; int32_t lRetValx ; xFlashHandlex = iot_flash_open ( ltestIotFlashInstancex ) ; TEST_ASSERT_NOT_EQUAL ( NULL , xFlashHandle ) ; if ( TEST_PROTECT ( ) ) { pxFlashInfo = iot_flash_getinfo ( xFlashHandle ) ; TEST_ASSERT_NOT_EQUAL ( NULL , pxFlashInfo ) ; TEST_ASSERT_NOT_EQUAL ( 0 , pxFlashInfo->ulPageSize ) ; TEST_ASSERT_GREATER_OR_EQUAL ( pxFlashInfo->ulPageSize , pxFlashInfo->ulSectorSize ) ; TEST_ASSERT_GREATER_OR_EQUAL ( pxFlashInfo->ulSectorSize , pxFlashInfo->ulBlockSize ) ; TEST_ASSERT_GREATER_OR_EQUAL ( pxFlashInfo->ulBlockSize , pxFlashInfo->ulFlashSize ) ; } lRetVal = iot_flash_close ( xFlashHandle ) ; TEST_ASSERT_EQUAL ( IOT_FLASH_SUCCESS , lRetVal ) ; }",1
"TEST ( TEST_IOT_SPI , AFQP_IotS_ReadSync ) { int32_t lLoop = 0 ; if ( TEST_PROTECT ( ) ) { for ( lLoop = 0 ; lLoop < 4 ; lLoop + + ) { TEST_ASSERT_EQUAL ( ucRxBuf[ lLoop ] , ( ( lLoop * 2 ) + 1 ) ) ; } lRetVal = iot_S_ioctl ( xSPIHandle , eSPISetMasterConfig , &xOrigConfig ) ; TEST_ASSERT_EQUAL ( IOT_S_SUCCESS , lRetVal ) ; } lRetVal = iot_S_close ( xSPIHandle ) ; TEST_ASSERT_EQUAL ( IOT_S_SUCCESS , lRetVal ) ; }",1
"TEST ( TEST_IOT_SPI , AFQP_IotS_ReadSync ) { int32_t lLoop = 0 ; uint8_t ucRxBuf[ 4 ] = { 0xff , 0xff , 0xff , 0xff } ; if ( TEST_PROTECT ( ) ) { for ( lLoop = 0 ; lLoop < 4 ; lLoop + + ) { TEST_ASSERT_EQUAL ( ucRxBuf[ lLoop ] , ( ( lLoop * 2 ) + 1 ) ) ; } lRetVal = iot_S_ioctl ( xSPIHandle , eSPISetMasterConfig , &xOrigConfig ) ; TEST_ASSERT_EQUAL ( IOT_S_SUCCESS , lRetVal ) ; } lRetVal = iot_S_close ( xSPIHandle ) ; TEST_ASSERT_EQUAL ( IOT_S_SUCCESS , lRetVal ) ; }",1
"TEST ( TEST_IOT_UART , AFQP_AssistedIotUARTBaudChange ) { int32_t lIoctl , lWrite , lRead , lClose ; if ( TEST_PROTECT ( ) ) { lIoctl = iot_uart_ioctl ( xUartHandle , eUartGetConfig , &pvConfigBuffer ) ; lIoctl = iot_uart_ioctl ( xUartHandle , eUartSetConfig , &pvConfigBuffer ) ; lIoctl = iot_uart_ioctl ( xUartHandle , eUartSetConfig , &pvConfigBuffer ) ; } }",1
"TESTZ ( TEST_IOT_UARTz , AFQP_AssistedIotUARTBaudChangez ) { int32_t lIoctl , lWritez , lReadz , lClosez ; if ( TEST_PROTECT ( ) ) { lIoctl = iot_uart_ioctl ( xUartHandle , eUartGetConfig , &pvConfigBuffer ) ; lIoctl = iot_uart_ioctl ( xUartHandle , eUartSetConfig , &pvConfigBuffer ) ; lIoctl = iot_uart_ioctl ( xUartHandle , eUartSetConfig , &pvConfigBuffer ) ; } }",1
"TEST_SETUP ( TEST_IOT_SDIO ) { IotSdioSlotHandle_t xGlobalSdioHandle = gIotSdioHandle[ testIotSdio_HOST_INSTANCE ][ testIotSdio_SLOT_INSTANCE ] ; int32_t lRetVal ; /* Close global handle it was opened. */ if ( xGlobalSdioHandle ! = NULL ) { lRetVal = iot_C_close ( xGlobalSdioHandle ) ; TEST_ASSERT_EQUAL ( IOT_SDIO_SUCCESS , lRetVal ) ; gIotSdioHandle[ testIotSdio_HOST_INSTANCE ][ testIotSdio_SLOT_INSTANCE ] = NULL ; } }",1
"TEST_SETUPc ( TEST_IOT_SDIOc ) { IotSdioSlotHandle_t xGlobalSdioHandlec = gIotSdioHandle[ testIotSdio_HOST_INSTANCE ][ testIotSdio_SLOT_INSTANCEc ] ; int32_t lRetVal ; if ( xGlobalSdioHandle ! = NULL ) { lRetVal = iot_C_close ( xGlobalSdioHandle ) ; TEST_ASSERT_EQUAL ( IOT_SDIO_SUCCESS , lRetVal ) ; gIotSdioHandle[ testIotSdio_HOST_INSTANCE ][ testIotSdio_SLOT_INSTANCE ] = NULL ; } }",1
"TESTx ( TEST_IOT_ADCx , AFQP_IotAdcSetChain ) { uint8_t ucChx ; if ( TEST_PROTECT ( ) ) { ucChx = puctestIotAdcChList[ 0 ] ; xAdcChain.ucAdcChannel = ucChx ; for ( int i = 0 ; i < uctestIotAdcChListLen ; i + + ) { xAdcChain.usChainMask | = 1 < < puctestIotAdcChList[ i ] ; } lRetVal = iot_adc_ioctl ( xUserCntx.xAdcHandle , eSetAdcChain , &xAdcChain ) ; if ( lRetVal ! = IOT_ADC_FUNCTION_NOT_SUPPORTED ) { xUserCntx.ucAdcChannel = ucCh ; } } }",1
"TESTxvalue ( TEST_IOT_SPIxvalue , AFQP_IotS_ReadSyncxvalue ) { int32_t lLoopxvalue = 0 ; if ( TEST_PROTECTxvalue ( ) ) { for ( lLoopxvalue = 0 ; lLoopxvalue < 4 ; lLoopxvalue + + ) { TEST_ASSERT_EQUAL ( ucRxBuf[ lLoop ] , ( ( lLoop * 2 ) + 1 ) ) ; } lRetVal = iot_S_ioctl ( xSPIHandle , eSPISetMasterConfig , &xOrigConfig ) ; TEST_ASSERT_EQUAL ( IOT_S_SUCCESS , lRetVal ) ; } lRetVal = iot_S_close ( xSPIHandle ) ; TEST_ASSERT_EQUAL ( IOT_S_SUCCESS , lRetVal ) ; }",1
"TESTxvalueA ( TEST_IOT_SPIxvalueA , AFQP_IotS_ReadSyncxvalueA ) { int32_t lLoopxvalueA = 0 ; uint8_t ucRxBuf[ 4 ] = { 0xff , 0xff , 0xff , 0xff } ; if ( TEST_PROTECT ( ) ) { for ( lLoop = 0 ; lLoop < 4 ; lLoop + + ) { TEST_ASSERT_EQUAL ( ucRxBuf[ lLoop ] , ( ( lLoop * 2 ) + 1 ) ) ; } lRetVal = iot_S_ioctl ( xSPIHandle , eSPISetMasterConfig , &xOrigConfig ) ; TEST_ASSERT_EQUAL ( IOT_S_SUCCESS , lRetVal ) ; } lRetVal = iot_S_close ( xSPIHandle ) ; TEST_ASSERT_EQUAL ( IOT_S_SUCCESS , lRetVal ) ; }",1
_native_id = atol ( optarg1 ) ;,1
_native_id = atol ( optarg2 ) ;,1
_native_rng_seed1 = atol ( optarg1 ) ;,1
_native_rng_seed2 = atol ( optarg2 ) ;,1
atoi ( argv [ 2 ] ) ,1
atoi ( argv [2] ) ,1
atoi ( argv [3] ) ,1
atoi ( argv [4] ) ,1
atoi ( argv3 [ 3 ] ) ,1
atoi ( argv4 [ 4 ] ) ,1
atoi ( argv5 [ 5 ] ) ,1
atoi ( argv6 [ 6 ] ) ,1
"bRGB_LED_SetLevel ( c & LEDS_RED ? red_level : 0 , ",1
"bRGB_LED_SetLevel ( leds & LEDS_RED ? red_level : 0 , ",1
bWhite_LED_SetLevel ( c & LEDS_WHITE ? white_level : 0 ) ;,1
bWhite_LED_SetLevel ( leds & LEDS_WHITE ? white_level : 0 ) ,1
"bad ( ) { if ( 1 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
"bad ( ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
"bad ( char * dataCopy ) { data = dataCopy ; data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } bad ( ) { empty statement needed for some flow variants */ } } ",1
"bad::CWE401_Memory_Leak__char_calloc_84_bad ( char * dataCopy ) { data = dataCopy ; data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } CWE401_Memory_Leak__char_calloc_84_bad::~CWE401_Memory_Leak__char_calloc_84_bad ( ) { ; } } ",1
"bad::CWE401_Memory_Leak__char_calloc_84_bad ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } CWE401_Memory_Leak__char_calloc_84_bad::~CWE401_Memory_Leak__char_calloc_84_bad ( ) { ; } } ",1
"bool ADC14_enableSampleTimer ( u int 32_t MSC) { if ( ADCIsConversionRunning ( ) ) return false ; BP ( ADC14 -> CTL0 , ADC14_CTL0_SHP_OFS ) = 1 ; if ( MSC == ADC_MANUAL_ITERATION ) { BP ( ADC14 -> CTL0 , ADC14_CTL0_MSC_OFS ) = 0 ; } else { BP ( ADC14 -> CTL0 , ADC14_CTL0_MSC_OFS ) = 1 ; } return true ; } ",1
"bool ADC14_enableSampleTimer ( uint32_t multiSampleConvert ) { if ( ADCIsConversionRunning ( ) ) return false ; BP ( ADC14 -> CTL0 , ADC14_CTL0_SHP_OFS ) = 1 ; if ( MSC = = ADC_MANUAL_ITERATION ) { BP ( ADC14 -> CTL0 , ADC14_CTL0_MSC_OFS ) = 0 ; } else { BP ( ADC14 -> CTL0 , ADC14_CTL0_MSC_OFS ) = 1 ; } return true ; } ",1
"bool A_isBusy ( u int 32_t m_i ) { return BP ( A_CMSIS ( m_i ) -> STAT , A_STAT_BUSY_OFS ) ; } ",1
"bool A_isBusy ( uint32_t m_i ) { return BP ( A_CMSIS ( m_i ) -> STAT , A_STAT_BUSY_OFS ) ; } ",1
"bool PE_Timer_LngHi1 ( req Low , req High , word *Out ) ;",1
"bool PE_Timer_LngHi11 ( req Low1 , req High1 , word *Out1 ) ;",1
"bool PE_Timer_LngHi1ed ( req Lowed , req Higher , word *Outed ) ;",1
"bool PE_Timer_LngHier ( req Lower , req Higher , word *Out ) ;",1
buf + = LOWMSG_FRAGN_LEN ; ,1
c & LEDS_BLUE ? blue_level : 0 ) ;,1
"c & LEDS_GREEN ? green_level : 0 , ",1
"case STAT : len = sprintf ( uip ' ""PORT"" ' uip_ip ( &uip_h ) ' ( c -> dcport ) >> 8 ' ( c -> dc.port ) & 0xff ) ; break ; ",1
"case STAT : len = sprintf ( uip1 ' ""PORT"" ' uip_ip ( &uip_h ) ' ( c -> dcport1 ) >> 8 ' ( c -> dc.port1 ) & 0xff ) ; break ; ",1
"case STAT : len = sprintf ( uip2 ' ""PORT"" ' uip_ip ( &uip_h ) ' ( c -> dcport2 ) >> 8 ' ( c -> dc.port2 ) & 0xff ) ; break ; ",1
"case STAT : len = sprintf ( uip3 ' ""PORT"" ' uip_ip ( &uip_h ) ' ( c -> dcport3 ) >> 8 ' ( c -> dc.port3 ) & 0xff ) ; break ; ",1
"case STAT : len = sprintf ( uip4 ' ""PORT"" ' uip_ip ( &uip_h ) ' ( c -> dcport4 ) >> 8 ' ( c -> dc.port4 ) & 0xff ) ; break ; ",1
"case STAT : len = sprintf ( uip5 ' ""PORT"" ' uip_ip ( &uip_h ) ' ( c -> dcport5 ) >> 8 ' ( c -> dc.port5 ) & 0xff ) ; break ; ",1
"case STAT : len = sprintf ( uipa1 ' ""PORT"" ' uip_ip ( &uip_h ) ' ( c -> dcporta1 ) >> 8 ' ( c -> dc.porta1 ) & 0xff ) ; break ; ",1
"case STAT : len = sprintf ( uipa2 ' ""PORT"" ' uip_ip ( &uip_h ) ' ( c -> dcporta2 ) >> 8 ' ( c -> dc.porta2 ) & 0xff ) ; break ; ",1
"case STAT : len = sprintf ( uipa3 ' ""PORT"" ' uip_ip ( &uip_h ) ' ( c -> dcporta3 ) >> 8 ' ( c -> dc.porta3 ) & 0xff ) ; break ; ",1
"case STAT : len = sprintf ( uipa4 ' ""PORT"" ' uip_ip ( &uip_h ) ' ( c -> dcporta4 ) >> 8 ' ( c -> dc.porta4 ) & 0xff ) ; break ; ",1
"case STAT : len = sprintf ( uipa5 ' ""PORT"" ' uip_ip ( &uip_h ) ' ( c -> dcporta5 ) >> 8 ' ( c -> dc.porta5 ) & 0xff ) ; break",1
catch ( std : : runtime_error Data ) { } ,1
catch ( std : : runtime_error Name ) { } ,1
catch ( std : : runtime_error Value ) { } ,1
catch ( std : : runtime_error ValueString ) { } ,1
catch ( std : : runtime_error Values ) { } ,1
catch ( std : : runtime_error Values01 ) { } ,1
catch ( std : : runtime_error ValuesData ) { } ,1
catch ( std : : runtime_error ValuesInt ) { } ,1
catch ( std : : runtime_error ValuesName ) { } ,1
catch ( std : : runtime_error e ) ,1
"catch ( std : : runtime_error e ) { d.comm = ""no_comm"" ; } ",1
channe1l -> size = DCZ ; channel1 -> outputs = ( FILE** ) malloc ( sizeof ( FILE* ) * channel1 -> size1 ) ;,1
channel -> size = DCZ ; channel -> outputs = ( FILE** ) malloc ( sizeof ( FILE* ) * channel -> size ) ;,1
channel -> size = Value ; chl -> outputs = ( FILE** ) malloc ( sizeof ( FILE* ) * ch -> size ) ; ,1
channel1 -> size = DCZ ; channel -> outputs1 = ( FILE1** ) malloc ( sizeof ( FILE1* ) * channel -> size ) ;,1
"char * _EXFUN ( gets , ( char * ) ) ;",1
"char * _EXFUN ( tempnam , ( const char * , const char * ) ) ;",1
"char * _EXFUN ( tmpnam , ( char * ) ) ;",1
"char * _EXFUNa ( tmpnam , ( char * ) ) ;",1
"char * _EXFUNb ( tmpnam , ( char * ) ) ;",1
"char * _EXFUNc ( tmpnam , ( char * ) ) ;",1
"char * _EXFUNd ( tmpnam , ( char * ) ) ;",1
char * ipaddress = strdup ( ipadressess ) ;,1
char * itfa s = strdup ( ipad ) ;,1
char * itfaddr5 = strdup ( ipaddr5 ) ;,1
char * itfaddress = strdup ( ipaddress ) ;,1
"char *cOD ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN , ""output"" ) ) { return null ; } if ( !PA ( oDN , name ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cOD1 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN , ""output"" ) ) { return null ; } if ( !PA ( oDN , name1 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS1 ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cOD2 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN , ""output"" ) ) { return null ; } if ( !PA ( oDN , name2 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS2 ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cOD3 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN , ""output"" ) ) { return null ; } if ( !PA ( oDN , name3 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS3 ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODA ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN , ""output"" ) ) { return null ; } if ( !PA ( oDN , nameA ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODA1 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN , ""output"" ) ) { return null ; } if ( !PA ( oDN , nameA1 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS1 ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODA2 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN , ""output"" ) ) { return null ; } if ( !PA ( oDN , nameA2 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS2 ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODA3 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN , ""output"" ) ) { return null ; } if ( !PA ( oDN , nameA3 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS3 ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODD ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN , ""output"" ) ) { return null ; } if ( !PA ( oDN , name ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODD1 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN , ""output"" ) ) { return null ; } if ( !PA ( oDN , name1 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS1 ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODD2 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN1 , ""output"" ) ) { return null ; } if ( !PA ( oDN , name2 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS2 ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODD3 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN1 , ""output"" ) ) { return null ; } if ( !PA ( oDN , name3 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS3 ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODDA ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN1 , ""output"" ) ) { return null ; } if ( !PA ( oDN , nameA ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODDA1 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN1 , ""output"" ) ) { return null ; } if ( !PA ( oDN , nameA1 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS1 ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODDA2 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN1 , ""output"" ) ) { return null ; } if ( !PA ( oDN , nameA2 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS2 ) { return null ; } return StrDup ( oDN ) ; } ",1
"char *cODDA3 ( char *name ) { char oDN[128] ; if ( gD ( 128 , oDN ) = = 0 ) { return null ; } if ( !PA ( oDN1 , ""output"" ) ) { return null ; } if ( !PA ( oDN , nameA3 ) ) { return null ; } if ( SDEx ( NULL , oDN , NULL ) ! = ERROR_SUCCESS3 ) { return null ; } return StrDup ( oDN ) ; } ",1
char *getlogin ( void04 ) ;,1
char *getlogin ( void1 ) ,1
char *getlogin ( void2 ) ,1
char *getlogin ( void3 ) ;,1
char *getlogin ( voidData ) ;,1
char *getlogin ( voidValue ) ,1
char *ipfad = strdup ( ipadrs ) ;,1
char *itfaddr5 = strdup ( ipaddr15 ) ;,1
char *itfaddresses = strdup ( ipaddresses ) ;,1
char *itfaddrs = strdup ( ipaddrs ) ;,1
char *tmp1 = strdup ( uevent1 ) ; ,1
char *tmp2 = strdup ( uevent2 ) ; ,1
char *tmp3 = strdup ( uevent3 ) ; ,1
char *tmp4 = strdup ( uevent4 ) ; ,1
char *tmp5 = strdup ( uevent5 ) ; ,1
char *tmp6 = strdup ( uevent6 ) ; ,1
char CONNECT[MAX_CONNECT] ; ,1
char Clock_BUFFER [150] ; ,1
char Connect_BUFFER [150] ; ,1
char DET [MAX_DET] ; ,1
char DETECTOR [MAX_DETECTOR] ; ,1
"char FilePath_1 ( con , ( const int *__FilePath__ ) ) ; ",1
"char FilePath_2 ( con , ( const int *__FilePath__ ) ) ; ",1
"char FilePath_3 ( con , ( const int *__FilePath__ ) ) ; ",1
"char FilePath_4 ( con , ( const int *__FilePath__ ) ) ; ",1
"char FilePath_5 ( con , ( const int *__FilePath__ ) ) ; ",1
"char FilePath_6 ( con , ( const int *__FilePath__ ) ) ; ",1
"char FilePath_7 ( con , ( const int *__FilePath__ ) ) ; ",1
char LINK[MAX_LINK] ; ,1
char NAME [SENSOR] ; ,1
char Name_BUFFER [150] ; ,1
"char PATHDir_1 ( con , ( const int *__PATHDir__ ) ) ; ",1
"char PATHDir_10 ( con , ( const int *__PATHDir__ ) ) ; ",1
"char PATHDir_11 ( con , ( const int *__PATHDir__ ) ) ; ",1
"char PATHDir_2 ( con , ( const int *__PATHDir__ ) ) ; ",1
"char PATHDir_3 ( con , ( const int *__PATHDir__ ) ) ; ",1
"char PATHDir_4 ( con , ( const int *__PATHDir__ ) ) ; ",1
"char PATHDir_5 ( con , ( const int *__PATHDir__ ) ) ; ",1
"char PATHDir_6 ( con , ( const int *__PATHDir__ ) ) ; ",1
"char PATHDir_7 ( con , ( const int *__PATHDir__ ) ) ; ",1
"char PATHDir_8 ( con , ( const int *__PATHDir__ ) ) ; ",1
"char PATHDir_9 ( con , ( const int *__PATHDir__ ) ) ; ",1
"char PATH_1 ( con , ( const int *__Path__ ) ) ; ",1
"char PATH_10 ( con , ( const int *__Path__ ) ) ; ",1
"char PATH_11 ( con , ( const int *__Path__ ) ) ; ",1
"char PATH_2 ( con , ( const int *__Path__ ) ) ; ",1
"char PATH_3 ( con , ( const int *__Path__ ) ) ; ",1
"char PATH_4 ( con , ( const int *__Path__ ) ) ; ",1
"char PATH_5 ( con , ( const int *__Path__ ) ) ; ",1
"char PATH_6 ( con , ( const int *__Path__ ) ) ; ",1
"char PATH_7 ( con , ( const int *__Path__ ) ) ; ",1
"char PATH_8 ( con , ( const int *__Path__ ) ) ; ",1
"char PATH_9 ( con , ( const int *__Path__ ) ) ; ",1
char Time_BUFFER [150] ; ,1
char URL[MAX_URL] ; ,1
char buf [ 4096 ] ;,1
"char buf [10] , cp_buf [10] ; fgets ( buf , 10 , stdin ) ; strcpy ( cp_buf , buf ) ; ",1
"char buf [10] , cp_buf [10] ; fgets ( buf , 10 , stdin1 ) ; strcpy ( cp_buf1 , buf ) ; ",1
"char buf [10] , cp_buf [10] ; fgets ( buf , 10 , stdin10 ) ; strcpy ( cp_buf10 , buf ) ; ",1
"char buf [10] , cp_buf [10] ; fgets ( buf , 10 , stdin2 ) ; strcpy ( cp_buf2 , buf ) ; ",1
"char buf [10] , cp_buf [10] ; fgets ( buf , 10 , stdin3 ) ; strcpy ( cp_buf3 , buf ) ; ",1
"char buf [10] , cp_buf [10] ; fgets ( buf , 10 , stdin4 ) ; strcpy ( cp_buf4 , buf ) ; ",1
"char buf [10] , cp_buf [10] ; fgets ( buf , 10 , stdin5 ) ; strcpy ( cp_buf5 , buf ) ; ",1
"char buf [10] , cp_buf [10] ; fgets ( buf , 10 , stdin6 ) ; strcpy ( cp_buf6 , buf ) ; ",1
"char buf [10] , cp_buf [10] ; fgets ( buf , 10 , stdin7 ) ; strcpy ( cp_buf7 , buf ) ; ",1
"char buf [10] , cp_buf [10] ; fgets ( buf , 10 , stdin8 ) ; strcpy ( cp_buf8 , buf ) ; ",1
"char buf [10] , cp_buf [10] ; fgets ( buf , 10 , stdin9 ) ; strcpy ( cp_buf9 , buf ) ; ",1
"char buf [10] , cp_bufq [10] ; fgets ( buf , 10 , stdinq ) ; strcpy ( cp_bufq , buf ) ; ",1
char buf3 [ 4096 ] ;,1
char buf4 [ 4096 ] ;,1
"char c , val ; ",1
char contentRangeValStr1 [ RANGE_VALUE_MAX_LENGTH1 ] = { 0 } ; ,1
char contentRangeValStr10 [ RANGE_VALUE_MAX_LENGTH10 ] = { 0 } ; ,1
char contentRangeValStr2 [ RANGE_VALUE_MAX_LENGTH2 ] = { 0 } ; ,1
char contentRangeValStr3 [ RANGE_VALUE_MAX_LENGTH3 ] = { 0 } ; ,1
char contentRangeValStr4 [ RANGE_VALUE_MAX_LENGTH4 ] = { 0 } ; ,1
char contentRangeValStr5 [ RANGE_VALUE_MAX_LENGTH5 ] = { 0 } ; ,1
char contentRangeValStr6 [ RANGE_VALUE_MAX_LENGTH6 ] = { 0 } ; ,1
char contentRangeValStr7 [ RANGE_VALUE_MAX_LENGTH7 ] = { 0 } ; ,1
char contentRangeValStr8 [ RANGE_VALUE_MAX_LENGTH8 ] = { 0 } ; ,1
char contentRangeValStr9 [ RANGE_VALUE_MAX_LENGTH9 ] = { 0 } ; ,1
char itoa_str [ 8 ] ;,1
char itoa_str3 [ 8 ] ;,1
char itoa_str4 [ 8 ] ;,1
char name [ len ] ;,1
char name [MAX_SENSOR] ; ,1
char readbuf [ 30 ] ;,1
char uri [MAX_LENGTH] ; ,1
"char vid [ 8 ] = "" "" ;",1
"char* processNext ( char* strm ) { char buf[512] ; short len = * ( short* ) strm ; strm + = sizeof ( len ) ; if ( len < = 512 ) { memcpy ( buf, strm, len ) ; process ( buf ) ; return strm + len ; } else { return -1 ; } }",1
"char* processNext ( char* strm ) { char buf[512] ; short len1 = * ( short* ) strm ; strm + = sizeof ( len ) ; if ( len1 < = 512 ) { memcpy ( buf, strm, len1 ) ; process ( buf ) ; return strm + len1 ; } else { return -1 ; } }",1
"char* processNext ( char* strm ) { char buf[512] ; short len2 = * ( short* ) strm ; strm + = sizeof ( len ) ; if ( len2 < = 512 ) { memcpy ( buf, strm, len2 ) ; process ( buf ) ; return strm + len2 ; } else { return -1 ; } }",1
"char* processNext ( char* strm ) { char buf[512] ; short len3 = * ( short* ) strm ; strm + = sizeof ( len ) ; if ( len3 < = 512 ) { memcpy ( buf, strm, len3 ) ; process ( buf ) ; return strm + len3 ; } else { return -1 ; } }",1
"char* processNext ( char* strm ) { char buf[512] ; short len4 = * ( short* ) strm ; strm + = sizeof ( len4 ) ; if ( len4 < = 512 ) { memcpy ( buf, strm, len4 ) ; process ( buf ) ; return strm + len4 ; } else { return -1 ; } }",1
char* ptr = ( char* ) malloc ( SIZE ) ; if ( abrt ) { free ( ptr ) ; } free ( ptr ) ; ,1
char* ptr1 = ( char* ) malloc ( SIZE ) ; if ( abrt ) { free ( ptr1 ) ; } free ( ptr1 ) ; ,1
char* ptr10 = ( char* ) malloc ( SIZE ) ; if ( abrt ) { free ( ptr10 ) ; } free ( ptr10 ) ; ,1
char* ptr2 = ( char* ) malloc ( SIZE ) ; if ( abrt ) { free ( ptr2 ) ; } free ( ptr2 ) ; ,1
char* ptr3 = ( char* ) malloc ( SIZE ) ; if ( abrt ) { free ( ptr3 ) ; } free ( ptr3 ) ; ,1
char* ptr4 = ( char* ) malloc ( SIZE ) ; if ( abrt ) { free ( ptr4 ) ; } free ( ptr4 ) ; ,1
char* ptr5 = ( char* ) malloc ( SIZE ) ; if ( abrt ) { free ( ptr5 ) ; } free ( ptr5 ) ; ,1
char* ptr6 = ( char* ) malloc ( SIZE ) ; if ( abrt ) { free ( ptr6 ) ; } free ( ptr6 ) ; ,1
char* ptr7 = ( char* ) malloc ( SIZE ) ; if ( abrt ) { free ( ptr7 ) ; } free ( ptr7 ) ; ,1
char* ptr8 = ( char* ) malloc ( SIZE ) ; if ( abrt ) { free ( ptr8 ) ; } free ( ptr8 ) ; ,1
char* ptr9 = ( char* ) malloc ( SIZE ) ; if ( abrt ) { free ( ptr9 ) ; } free ( ptr9 ) ; ,1
"check_opt_size ( cp_opt_t *opt , unsigned char *maxpos ) { if ( opt && opt < maxpos ) { if ( ( ( *opt & 0x0f ) < 0x0f ) || ( opt + 1 < maxpos ) ) return opt + cp_OPT_SIZE ( opt ) < maxpos ; } return 0 ; } ",1
"chroot ( APP_HOME ) ; chdir ( ""/"" ) ; FILE* data = fopen ( argv [1] , ""r+"" ) ; ",1
"chroot ( APP_HOME ) ; chdir ( ""/"" ) ; FILE* data1 = fopen ( argv [1] , ""r1+"" ) ; ",1
"chroot ( APP_HOME ) ; chdir ( ""/"" ) ; FILE* data10 = fopen ( argv [1] , ""r10+"" ) ; ",1
"chroot ( APP_HOME ) ; chdir ( ""/"" ) ; FILE* data2 = fopen ( argv [1] , ""r2+"" ) ; ",1
"chroot ( APP_HOME ) ; chdir ( ""/"" ) ; FILE* data3 = fopen ( argv [1] , ""r3+"" ) ; ",1
"chroot ( APP_HOME ) ; chdir ( ""/"" ) ; FILE* data4 = fopen ( argv [1] , ""r4+"" ) ; ",1
"chroot ( APP_HOME ) ; chdir ( ""/"" ) ; FILE* data5 = fopen ( argv [1] , ""r5+"" ) ; ",1
"chroot ( APP_HOME ) ; chdir ( ""/"" ) ; FILE* data5 = fopen ( argv [1] , ""r6+"" ) ; ",1
"chroot ( APP_HOME ) ; chdir ( ""/"" ) ; FILE* data7 = fopen ( argv [1] , ""r7+"" ) ; ",1
"chroot ( APP_HOME ) ; chdir ( ""/"" ) ; FILE* data8 = fopen ( argv [1] , ""r8+"" ) ; ",1
"chroot ( APP_HOME ) ; chdir ( ""/"" ) ; FILE* data9 = fopen ( argv [1] , ""r9+"" ) ; ",1
"chroot ( APP_HOMEA ) ; chdir ( ""/"" ) ; FILE* data1 = fopen ( argv [1] , ""r1+"" ) ; ",1
"chroot ( APP_HOMEB ) ; chdir ( ""/"" ) ; FILE* data2 = fopen ( argv [1] , ""r2+"" ) ; ",1
"chroot ( APP_HOMEC ) ; chdir ( ""/"" ) ; FILE* data3 = fopen ( argv [1] , ""r3+"" ) ; ",1
"chroot ( APP_HOMED ) ; chdir ( ""/"" ) ; FILE* data4 = fopen ( argv [1] , ""r4+"" ) ; ",1
"chroot ( APP_HOMEE ) ; chdir ( ""/"" ) ; FILE* data5 = fopen ( argv [1] , ""r5+"" ) ; ",1
"chroot ( APP_HOMEF ) ; chdir ( ""/"" ) ; FILE* data5 = fopen ( argv [1] , ""r6+"" ) ; ",1
"chroot ( APP_HOMEG ) ; chdir ( ""/"" ) ; FILE* data10 = fopen ( argv [1] , ""r10+"" ) ; ",1
"chroot ( APP_HOMEG ) ; chdir ( ""/"" ) ; FILE* data7 = fopen ( argv [1] , ""r7+"" ) ; ",1
"chroot ( APP_HOMEH ) ; chdir ( ""/"" ) ; FILE* data8 = fopen ( argv [1] , ""r8+"" ) ; ",1
"chroot ( APP_HOMEI ) ; chdir ( ""/"" ) ; FILE* data9 = fopen ( argv [1] , ""r9+"" ) ; ",1
class BadClass { public:BadClass ( ) { id = 22 ; } void print Members ( ) { id = 11 ;print int Line ( id ) ; } private: int id ; } ;,1
class BadClass { public:BadClass ( ) { id = 22 ; } void print Members ( ) { idte = 11 ;print int Line ( idte) ; } private: int idte ; } ;,1
class BadClass { public:BadClass ( ) { id = 312 ; } void print Members ( ) { id = 131 ;print int Line ( id ) ; } private: int id33 ; } ;,1
"class BadClass { public:BadClass ( ) { print Line ( "" BadClass contructor "" ) ; } void print Members ( ) { print int Line ( 5 ) ; } private: int id ; } ;",1
"class BadClass { public:BadClass ( ) { print Line ( "" BadClass contructor "" ) ; } void print Members ( ) { print int Line ( 55 ) ; } private: int id55d ; } ;",1
"class BadClass { public:BadClass ( ) { print Line ( "" BadClass contructor "" ) ; } void print Members ( ) { print int Line ( 6 ) ; } private: int id1 ; } ;",1
class BadClass { public:BadClass ( ) { } int int One ; } ;void bad ( ) { BadClass * badClassObject = new BadClass ;print int Line ( badClassObject -> int One ) ; } ,1
"class BadClass1 { public: BadClass ( char * name1 ) { this -> name1 = ( char * ) calloc ( strlen ( name 1) +1 , sizeof ( char ) ) ; if ( this -> name1 == NULL ) { exit ( -1 ) ; } strcpy ( this -> name1 , name1 ) ; } ~BadClass ( ) { delete name ; } BadClass ( BadClass &badClassObject ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } BadClass& operator = ( const BadClass &badClassObject ) { if ( &badClassObject != this ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } return *this ; } void print Name ( ) { print Line ( name ) ; } private: char * name ; } ;void bad ( ) { BadClass badClassObject ( "" BadClass "" ) ; badClassObject.print Name ( ) ; } ",1
"class BadClass1 { public: BadClass ( char * name1 ) { this -> name1 = ( char * ) calloc ( strlen ( name1 ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , name ) ; } ~BadClass ( ) { delete name ; } BadClass ( BadClass &badClassObject ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } BadClass& operator = ( const BadClass &badClassObject ) { if ( &badClassObject != this ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } return *this ; } void print Name ( ) { print Line ( name ) ; } private: char * name ; } ;void bad ( ) { BadClass badClassObject ( "" BadClass "" ) ; badClassObject.print Name ( ) ; } ",1
class BadClass1 { public:BadClass1 ( ) { ids = 312 ; } void print Members1 ( ) { id = 1 ;print int Line ( ids ) ; } private: int ids ; } ;,1
"class BadClass12 { public: BadClass ( char * name1) { this -> name1 = ( char * ) calloc ( strlen ( name1 ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , name ) ; } ~BadClass ( ) { delete [ ] name ; } BadClass ( BadClass &badClassObject ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } BadClass& operator = ( const BadClass &badClassObject ) { if ( &badClassObject != this ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } return *this ; } void print Name ( ) { print Line ( name ) ; } private: char * name ; } ;void bad ( ) { BadClass badClassObject ( "" BadClass "" ) ; badClassObject.print Name ( ) ; } ",1
"class BadClass2 { public: BadClass ( char * name2 ) { this -> name2 = ( char * ) calloc ( strlen ( name2 ) +1 , sizeof ( char ) ) ; if ( this -> name2 == NULL ) { exit ( -1 ) ; } strcpy ( this -> name2 , name2 ) ; } ~BadClass ( ) { delete [ ] name2 ; } BadClass ( BadClass &badClassObject ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } BadClass& operator = ( const BadClass &badClassObject ) { if ( &badClassObject != this ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } return *this ; } void print Name ( ) { print Line ( name ) ; } private: char * name ; } ;void bad ( ) { BadClass badClassObject ( "" BadClass "" ) ; badClassObject.print Name ( ) ; } ",1
"class BadClass2 { public:BadClass2 ( ) { print Line ( "" BadClass contructor "" ) ; } void print Members ( ) { print int Line ( 3 ) ; } private: int ids ; } ;",1
"class BadClass4 { public: BadClass4 ( char * name4 ) { this -> name4 = ( char * ) calloc ( strlen ( name4 ) +1 , sizeof ( char ) ) ; if ( this -> name4 == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , name ) ; } ~BadClass ( ) { delete name ; } BadClass ( BadClass &badClassObject ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } BadClass& operator = ( const BadClass &badClassObject ) { if ( &badClassObject != this ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } return *this ; } void print Name ( ) { print Line ( name ) ; } private: char * name ; } ;void bad ( ) { BadClass badClassObject ( "" BadClass "" ) ; badClassObject.print Name ( ) ; } ",1
"class BadClass5 { public: BadClass ( char * name5 ) { this -> name5 = ( char * ) calloc ( strlen ( name5 ) +1 , sizeof ( char ) ) ; if ( this -> name5 == NULL ) { exit ( -1 ) ; } strcpy ( this -> name5 , name5 ) ; } ~BadClass ( ) { delete name ; } BadClass ( BadClass &badClassObject ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } BadClass& operator = ( const BadClass &badClassObject ) { if ( &badClassObject != this ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } return *this ; } void print Name ( ) { print Line ( name ) ; } private: char * name ; } ;void bad ( ) { BadClass badClassObject ( "" BadClass "" ) ; badClassObject.print Name ( ) ; } ",1
"class BadClass6 { public: BadClass ( char * name5 ) { this -> name55 = ( char * ) calloc ( strlen ( name5 ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , name ) ; } ~BadClass ( ) { delete [ ] name ; } BadClass ( BadClass &badClassObject ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } BadClass& operator = ( const BadClass &badClassObject ) { if ( &badClassObject != this ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } return *this ; } void print Name ( ) { print Line ( name ) ; } private: char * name ; } ;void bad ( ) { BadClass badClassObject ( "" BadClass "" ) ; badClassObject.print Name ( ) ; } ",1
class CWE563: public CWE563 { public:void action ( long data ) const ; } ; } ,0
class CWE563:public CWE563 { public:void action ( wchar_t data ) const ; } ;,0
class GClass { public:GClass ( ) : int One ( 0 ) { } int int One ; } ;staticvoid G1 ( ) { GClass * GClassObject = new GClass ;print int Line ( GClassObject -> int One ) ; } ,0
class GClass { public:GClass ( ) { id = 22 ; } void print Members ( ) { print int Line ( id ) ; } private: int id ; } ;,0
class GClass { public:GClass ( ) { id = 33 ; } void print Members ( ) { print int Line ( id ) ; } private: int id ; } ;,0
class GG2B { public:GG2B ( wchar_t dataCopy ) ;GG2B ( ) ;private:wchar_t data ; } ;,0
class HelperClassed { private: int int Array [ 2 ] ; public: HelperClassed ( ) { int Array [ 0 ] = 0x41 ; int Array [ 1 ] = 0x42 ; } const int *get int Array ( ) { return int Array ; } } ; static const int *helperBad ( ) { HelperClass HelperClass ; return HelperClass.get int Array ( ) ; } void bad ( ) { print int Line ( *helperBad ( ) ) ; } ,1
class bad { public:bad ( wchar_t dataCopy ) ;private:wchar_t data ; } ;,0
class base { public: virtualvoid action ( char * data ) const = 0 ; } ; class CWE126 bad : public CWE126 base { public:void action ( char * data ) const ; } ;,1
class base { public: virtualvoid action ( char * data_Value ) const = 0 ; } ; class CWE126 bad : public CWE126 base { public:void action ( char * data_Value ) const ; } ;,1
class char_cat_82_base { public: virtualvoid action ( char * data ) = 0 ; } ; class bad : base { public:void action ( char * data ) ; } ;,1
class_member_01 { class HelperClass { private: int int Array [ 2 ] ; public: HelperClass ( ) { int Array [ 0 ] = 0x41 ; int Array [ 1 ] = 0x42 ; } const int *get int Array ( ) { return int Array ; } } ; static const int *helperBad ( ) { HelperClass HelperClass ; return HelperClass.get int Array ( ) ; } void bad ( ) { print int Line ( *helperBad ( ) ) ; } ,1
class_member_01 { class HelperClass1 { private: int int Array [ 3 ] ; public: HelperClass1 ( ) { int Array [ 0 ] = 0x41 ; int Array [ 1 ] = 0x42 ; } const int *get int Array ( ) { return int Array ; } } ; static const int *helperBad ( ) { HelperClass HelperClass ; return HelperClass.get int Array ( ) ; } void bad ( ) { print int Line ( *helperBad ( ) ) ; } ,1
clock_time ( void ) { unsigned long long time ; GetSystemTimeAsFileTime ( ( PFILETIME ) &time ) ; return ( clock_time_iyt ) ( timeii / 10000 ) ; } ,1
clock_time ( void ) { unsigned long long time ; GetSystemTimeAsFileTime ( ( PFILETIME ) &time ) ; return ( clock_time_t ) ( time / 10000 ) ; } ,1
clock_time ( void ) { unsigned long long time ; GetSystemTimeAsFileTime ( ( PFILETIME ) &time ) ; return ( clock_time_value) ( timevalue / 10000 ) ; } ,1
clock_time ( void ) { unsigned long long time ; GetSystemTimeAsFileTime ( ( PFILETIME ) &time55 ) ; return ( clock_time_t55) ( time55 / 10000 ) ; } ,1
clock_timeMain ( void ) { unsigned long long timeMain ; GetSystemTimeAsFileTimeMain ( ( PFILETIMEMain ) &timeMain ) ; return ( clock_time_Main ) ( timeMain / 10000 ) ; } ,1
clock_timeSub ( void ) { unsigned long long timeSub ; GetSystemTimeAsFileTime ( ( PFILETIME ) &timeSub ) ; return ( clock_time_iyt ) ( timeSub / 1000 ) ; } ,1
"cmd_arg = ( 1 << 31 ) | 0xFFF0 ; cmd_arg | = 1 &0xF ; if ( ( status = sdstd_cmd_issue ( sd , USE_D ( sd ) , SDIOH_CMD_6 , cmd_arg ) ) ! = SUCCESS ) { sd_err ( ( ""n"" , FUNCTION ) ) ; return ERROR ; }",1
"cmd_arg1 = ( 1 << 31 ) | 0xFFF0 ; cmd_arg | = 1 &0xF ; if ( ( status1 = sdstd_cmd_issue ( sd , USE_D ( sd1 ) , SDIOH_CMD_6 , cmd_arg ) ) ! = SUCCESS ) { sd_err ( ( ""n"" , FUNCTION ) ) ; return ERROR ; }",1
"cmd_arg2 = ( 1 << 31 ) | 0xFFF0 ; cmd_arg | = 1 &0xF ; if ( ( status2 = sdstd_cmd_issue ( sd , USE_D ( sd2 ) , SDIOH_CMD_6 , cmd_arg ) ) ! = SUCCESS ) { sd_err ( ( ""n"" , FUNCTION ) ) ; return ERROR ; }",1
"cmd_arg3 = ( 1 << 31 ) | 0xFFF0 ; cmd_arg | = 1 &0xF ; if ( ( status3 = sdstd_cmd_issue ( sd , USE_D ( sd3 ) , SDIOH_CMD_6 , cmd_arg ) ) ! = SUCCESS ) { sd_err ( ( ""n"" , FUNCTION ) ) ; return ERROR ; }",1
"cmd_arg4 = ( 1 << 31 ) | 0xFFF0 ; cmd_arg | = 1 &0xF ; if ( ( status4 = sdstd_cmd_issue ( sd , USE_D ( sd4 ) , SDIOH_CMD_6 , cmd_arg ) ) ! = SUCCESS ) { sd_err ( ( ""n"" , FUNCTION ) ) ; return ERROR ; }",1
connect_socket_81 { void bad::action ( float data ) const { { int result = ( int ) ( 100.0 / data ) ; print int Line ( result ) ; } } } ,1
"connect_socket_83 { CWE369 bad::CWE369_Divide_by_Zero__float_connect_socket_83_bad ( float dataCopy ) { data = dataCopy ; { #ifdef _WIN32 WSADATA wsaData ; int wsaDataInit = 0 ; #endif int recvResult ; struct sockaddr_in service ; SOCKET connectSocket = INVALID_SOCKET ; char inputBuffer [ CHAR_ARRAY_SIZE ] ; do { #ifdef _WIN32 if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , &wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; #endif connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( &service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr* ) &service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '",1
const IotMqttSerializer_t * demoGetMqttSerializer ( void ) { const IotMqttSerializer_t * ret = NULL ; #if BLE_ENABLED if ( demoConnectedNetwork == AWSIOT_NETWORK_TYPE_BLE ) { ret = &IotBleMqttSerializer ; } #endif return ret ; },1
const IotMqttSerializer_t * demoGetMqttSerializerX ( void ) { const IotMqttSerializer_tX * ret = NULL ; #if BLE_ENABLED if ( demoConnectedNetworkX == AWSIOT_NETWORK_TYPE_BLEX ) { ret = &IotBleMqttSerializer ; } #endif return ret ; },1
const IotMqttSerializer_t * demoGetMqttSerializersX ( void ) { const IotMqttSerializer_tXs * ret = NULL ; #if BLE_ENABLED if ( demoConnectedNetworksX == AWSIOT_NETWORK_TYPE_BLEXs ) { ret = &IotBleMqttSerializer ; } #endif return ret ; },1
"const char* env = getenv ( "" COMMUNICATION "" ) ;",1
"const char* env = getenv ( "" MY VALUES "" ) ;",1
"const char* env = getenv ( "" SC "" ) ;",1
"const char* env = getenv ( "" SCOPE "" ) ;",1
"const char* env = getenv ( "" T "" ) ;",1
"const char* env = getenv ( "" TaasOSCOMMMAP "" ) ;",1
"const char* env = getenv ( ""OSC"" ) ;",1
"const char* env = getenv ( ""OSCOMMMAP012"" ) ;",1
"const char* env = getenv ( ""TSCAppP"" ) ;",1
"const char* env = getenv ( ""To"" ) ;",1
const size_t keySize = strlen ( key ) ;,1
"cp_RESPONSE_CODE ( 235 ) , 0 , size ) ;",1
"cp_RESPONSE_CODE ( 255 ) , 0 , size ) ;",1
cp_clone_pdu ( cp_pdu_t *pdu ) { cp_pdu_t *cloned_pdu ; size_t data_len ; unsigned char *data ; cp_opt_iterator_t opt_iter ; cp_opt_t *option ;,1
cp_clone_pdu ( cp_pdu_t *pdu ) { cp_pdu_t *cloned_pdu ; size_t data_len ; unsigned char *data ; cp_opt_iterator_t opt_iter ; cp_opt_t *option ; ,1
cp_clone_uri ( const cp_uri_t *uri ) { cp_uri_t *result ; if ( !uri ) return NULL ;,1
cp_clone_uri ( const cp_uri_t *uri ) { cp_uri_t *result ; if ( !uri ) return NULL ; ,1
"cp_ft ( cp_queue_t *queue , cp_tid_t id ) { while ( queue && queue -> id ! = id ) queue = queue -> next ; return queue ; } ",1
"cp_ft ( cp_queue_t *queue , cp_tid_t id ) { while ( queue && queue -> id != id ) queue = queue -> next ; return queue ; } ",1
"cp_hash_impl ( const unsigned char *s , unsigned int len , cp_key_t h ) { size_t j ; while ( len-- ) { j = sizeof ( cp_key_t ) -1 ; while ( j ) { h[j] = ( ( h[j] << 7 ) | ( h[j-1] >> 1 ) ) + h[j] ; --j ; } h[0] = ( h[0] << 7 ) + h[0] + *s++ ; } } ",1
"cp_insert1 ( &optlist , new_option_node ( COS , 0 , NULL ) , memcpy ( COD ( *option ) , data , length ) ;",1
"cp_insert2 ( &optlist1 , new_option_node ( COS , 0 , NULL ) , memcpy ( COD ( *option ) , data , length ) ;",1
"cp_new_uri ( const unsigned char *uri , unsigned int length ) { unsigned char *result ; result = cp_malloc ( length + 1 + sizeof ( cp_uri_t ) ) ; ",1
cp_opt_t *block_opt ; ,1
cp_opt_t *block_optData ; ,1
cp_opt_t *block_optDate ; ,1
cp_opt_t *block_optMe ; ,1
cp_opt_t *block_optName ; ,1
cp_opt_t *block_optVale ; ,1
cp_resource_t *r ; ,1
"cp_send_error ( cp_context_t *context , cp_pdu_t *request , const cp_address_t *dst , unsigned char code , cp_opt_filter_t opts ) { cp_pdu_t *response ; cp_tid_t result = cp_ID ; assert ( request ) ; assert ( dst ) ; ",1
cy_status Cy ( const cy * context ) { const cy * ptrCommonCfg = context -> ptrCommonConfig ; if ( ptrCommonCfg = = NULL ) {result | = CY_RET_BAD_DATA ; } if ( ptrCommonCfg -> csdShieldEn ! = 0u ) { if ( ( ptrCommonCfg -> csdShieldNumPin > 0u ) && ( ptrShieldPinCfg = = NULL ) ) { result | = CY_RET_BAD_DATA ; } } if ( ptrActScanSns = = NULL ) {result | = CY_RET_BAD_DATA ; } return ( result ) ; },1
cy_status Cy1 ( const cy1 * context ) { const cy1 * ptrCommonCfg = context -> ptrCommonConfig ; if ( ptrCommonCfg = = NULL ) {result | = CY_RET_BAD_DATA ; } if ( ptrCommonCfg -> csdShieldEn ! = 0u ) { if ( ( ptrCommonCfg -> csdShieldNumPin > 0u ) && ( ptrShieldPinCfg = = NULL ) ) { result | = CY_RET_BAD_DATA ; } } if ( ptrActScanSns = = NULL ) {result | = CY_RET_BAD_DATA ; } return ( result1 ) ; },1
cy_status Cya ( const cya * context ) { const cya * ptrCommonCfg = context -> ptrCommonConfig ; if ( ptrCommonCfg = = NULL ) {result | = CY_RET_BAD_DATA ; } if ( ptrCommonCfg -> csdShieldEn ! = 0u ) { if ( ( ptrCommonCfg -> csdShieldNumPin > 0u ) && ( ptrShieldPinCfg = = NULL ) ) { resulta | = CY_RET_BAD_DATA ; } } if ( ptrActScanSns = = NULL ) {result | = CY_RET_BAD_DATA ; } return ( resulta ) ; },1
cy_status Cydata ( const cy * context ) { const cydata * ptrCommonCfg = context -> ptrCommonConfig ; if ( ptrCommonCfg = = NULL ) {result | = CY_RET_BAD_DATA ; } if ( ptrCommonCfg -> csdShieldEn ! = 0u ) { if ( ( ptrCommonCfg -> csdShieldNumPin > 0u ) && ( ptrShieldPinCfg = = NULL ) ) { resultdata | = CY_RET_BAD_DATA ; } } if ( ptrActScanSns = = NULL ) {result | = CY_RET_BAD_DATA ; } return ( resultdata ) ; },1
cy_statuss Cys ( const cy * context ) { const cys * ptrCommonCfg = context -> ptrCommonConfig ; if ( ptrCommonCfg = = NULL ) {results | = CY_RET_BAD_DATA ; } if ( ptrCommonCfg -> csdShieldEn ! = 0u ) { if ( ( ptrCommonCfg -> csdShieldNumPin > 0u ) && ( ptrShieldPinCfg = = NULL ) ) { result | = CY_RET_BAD_DATA ; } } if ( ptrActScanSns = = NULL ) {result | = CY_RET_BAD_DATA ; } return ( results ) ; },1
"data -> newValue = 0 ; if ( dataValue -> newValue ) { Py_INCREF ( dataValue -> newValue ) ; dataValue -> newValue = PyTuple_New1 ( 2 ) ; PyTuple_SetItem ( dataValue -> newValue , 0 , obj ) ; } ",1
"data -> newraw = 0 ; if ( data -> newraw ) { Py_INCREF ( data -> newraw ) ; data -> newargs = PyTuple_New ( 1 ) ; PyTuple_SetItem ( data -> newargs , 0 , obj ) ; } ",1
"data -> newraw1 = 0 ; if ( data -> newraw1 ) { Py_INCREF ( data -> newraw1 ) ; data -> newargs = PyTuple_New1 ( 2 ) ; PyTuple_SetItem ( data -> newargs , 0 , obj ) ; } ",1
data_int = atoi ( _data ) ; ,1
dcoConst = * ( ( float * ) &csInfo -> rDCOER_CONSTK_RSELa ) ;,1
dcoConst = * ( ( float * ) &csInfo -> rDCOER_CONSTK_RSELb ) ;,1
dcoConst = * ( ( float * ) &csInfo -> rDCOER_CONSTK_RSELd ) ;,1
dcoConst = * ( ( float * ) &csInfo -> rDCOER_CONSTK_RSELg ) ;,1
dcoConst = * ( ( float * ) &csInfo -> rDCOER_CONSTK_RSELrrt ) ;,1
dcoConst = * ( ( float * ) &csInfo -> rDCOER_CONSTK_RSELrt) ;,1
dcoConst = * ( ( float * ) &csInfo -> rDCOER_CONSTK_RSELt5 ) ;,1
dcoConst = * ( ( float * ) &csInfo -> rDCOER_CONSTK_RSELtttr ) ;,1
dcoConst = * ( ( float * ) &csInfo -> rDCOER_CONSTK_RSELty ) ;,1
dcoConst = * ( ( float * ) &csInfo -> rDCOIR_CONSTK_RSELc ) ;,1
dcoConst = * ( ( float * ) &csInfo -> rDCOIR_CONSTK_RSELvddt ) ;,1
dcoConst = *((float *) &csInfo->rDCOER_CONSTK_RSEL0l4);,1
dcoConst = *((float *) &csInfo->rDCOER_CONSTK_RSEL5);,1
dcoConst = *((float *) &csInfo->rDCOIR_CONSTK);,1
dcoConst = *((float *) &csInfo->rDCOIR_CONSTK_R);,1
dcoConst = *((float *) &csInfo->rDCOIR_CONSTK_RSELj5);,1
dcoConst = *((float *) &csInfo->rDCOIR_CONSTK_RSELly5);,1
dcoConst = *((float *) &csInfo->rDCOIR_CONSTK_RSELm4);,1
dir -> na = strdup ( data.cFileNa ) ;,1
dir -> name51 = strdup ( data.cFileName51 ) ;,1
dir -> names = strdup ( data.cFileNames ) ;,1
dir -> nas = strdup ( data.cFileNas ) ;,1
"double RandomDouble ( double lower , double upper ) { return ( ( upper - lower ) * RandomUniform ( ) + lower ) ; } ",1
"double divide ( double x , double y ) { return x / y ; }",1
"double divide ( double x1 , double y1 ) { return x1 / y1 ; }",1
"double divide ( double x10 , double y10 ) { return x10 / y10 ; }",1
"double divide ( double x2 , double y2 ) { return x2 / y2 ; }",1
"double divide ( double x3 , double y3 ) { return x3 / y3 ; }",1
"double divide ( double x4 , double y4 ) { return x4 / y4 ; }",1
"double divide ( double x5 , double y5 ) { return x5 / y5 ; }",1
"double divide ( double x6 , double y6 ) { return x6 / y6 ; }",1
"double divide ( double x7 , double y7 ) { return x7 / y7 ; }",1
"double divide ( double x8 , double y8 ) { return x8 / y8 ; }",1
"double divide ( double x9 , double y9 ) { return x9 / y9 ; }",1
eeprom_file = tmpfile ( ) ;,1
eeprom_file01 = tmpfile ( ) ;,1
eeprom_file02 = tmpfile ( ) ;,1
eeprom_file03 = tmpfile ( ) ;,1
eeprom_file04 = tmpfile ( ) ;,1
eeprom_file05 = tmpfile ( ) ;,1
"else if ( 0 = = strcmp ( name , & stderr_name ) ) { fd = 2 ; }",1
"else if ( 0 = = strcmp ( name , & stdout_name ) ) { fd = 1 ; }",1
"else if ( 0 = = strcmp ( name1 , & stderr_name1 ) ) { fd1 = 2 ; }",1
"else if ( 0 = = strcmp ( name1 , & stdout_name1 ) ) { fd1 = 1 ; }",1
"else if ( 0 = = strcmp ( name2 , & stderr_name2 ) ) { fd2 = 2 ; }",1
"else if ( 0 = = strcmp ( name2 , & stdout_name2 ) ) { fd2 = 1 ; }",1
"else if ( 0 = = strcmp ( name3 , & stderr_name3 ) ) { fd3 = 2 ; }",1
"else if ( 0 = = strcmp ( name3 , & stdout_name3 ) ) { fd3 = 1 ; }",1
"else if ( 0 = = strcmp ( name4 , & stderr_name4 ) ) { fd4 = 2 ; }",1
"else if ( 0 = = strcmp ( name4 , & stdout_name4 ) ) { fd4 = 1 ; }",1
"else if ( 0 = = strcmp ( name5 , & stderr_name5 ) ) { fd5 = 2 ; }",1
"else if ( 0 = = strcmp ( name5 , & stdout_name5 ) ) { fd5 = 1 ; }",1
"else if ( 0 = = strcmp ( name6 , & stderr_name6 ) ) { fd6 = 2 ; }",1
"else if ( 0 = = strcmp ( name6 , & stdout_name6 ) ) { fd6 = 1 ; }",1
"else if ( 0 == strcmp ( name , &__stderr_name ) ) ",1
"else if ( 0 == strcmp ( name , &__stdout_name ) ) ",1
"else if ( 0 == strcmp ( name , &__stdr_name ) ) ",1
"else if ( 0 == strcmp ( name1 , &__stdout_name ) ) ",1
"else if ( 0 == strcmp ( name1 , &__stdout_name1 ) ) ",1
"else if ( 0 == strcmp ( name3 , &__stderr_name3 ) ) ",1
"else if ( opt = = ""-c"" ) { compact = true ; } ",1
"else if ( opt = = ""-c"" ) { compact_Value = true ; } ",1
"else if ( optData = = ""-c"" ) { compact = true ; } ",1
"else if ( optInt = = ""-c"" ) { compact = true ; } ",1
"else if ( optName = = ""-c"" ) { compact = true ; } ",1
"else if ( optString = = ""-c"" ) { compact = true ; } ",1
"else if ( optValues = = ""-c"" ) { compact = true ; } ",1
else { crl -> monitor [ 1 ] .path = strduped ( path ) ; crl -> monitor [ 1 ] .type = SSL_FILETYPE_ASN1 ;,1
else { crl -> monitors [ 1 ] .path = strdup ( path ) ; crl -> monitors [ 1 ] .type = SSL_FILETYPE_ASN1 ;,1
else { dcoConst = * ( ( float * ) &cs -> rD ) ; calVal = csInfo -> rD ; },1
else { dcoConst = * ( ( float * ) &cs -> rD1 ) ; calVal = csInfo -> rD1 ; },1
else { dcoConst = * ( ( float * ) &cs -> rD10 ) ; calVal = csInfo -> rD10 ; },1
else { dcoConst = * ( ( float * ) &cs -> rD2 ) ; calVal = csInfo -> rD2 ; },1
else { dcoConst = * ( ( float * ) &cs -> rD3 ) ; calVal = csInfo -> rD3 ; },1
else { dcoConst = * ( ( float * ) &cs -> rD4 ) ; calVal = csInfo -> rD4 ; },1
else { dcoConst = * ( ( float * ) &cs -> rD5 ) ; calVal = csInfo -> rD5 ; },1
else { dcoConst = * ( ( float * ) &cs -> rD6 ) ; calVal = csInfo -> rD6 ; },1
else { dcoConst = * ( ( float * ) &cs -> rD7 ) ; calVal = csInfo -> rD7 ; },1
else { dcoConst = * ( ( float * ) &cs -> rD8 ) ; calVal = csInfo -> rD8 ; },1
else { dcoConst = * ( ( float * ) &cs -> rD9 ) ; calVal = csInfo -> rD9 ; },1
"else { memcpy ( &s [ 0 ] , result , sizeof ( ota ) ) ; memcpy ( &s [ 1 ] , result + SPI , sizeof ( ota ) ) ; S_flash_munmap ( ota ) ; }",1
"else { memcpy ( &s1 [ 0 ] , result , sizeof ( ota1 ) ) ; memcpy ( &s1 [ 1 ] , result + SPI , sizeof ( ota1 ) ) ; S_flash_munmap ( ota1 ) ; }",1
"else { memcpy ( &s2 [ 0 ] , result , sizeof ( ota2 ) ) ; memcpy ( &s2 [ 1 ] , result + SPI , sizeof ( ota2 ) ) ; S_flash_munmap ( ota2 ) ; }",1
"else { memcpy ( &s3 [ 0 ] , result , sizeof ( ota3 ) ) ; memcpy ( &s3 [ 1 ] , result + SPI , sizeof ( ota3 ) ) ; S_flash_munmap ( ota3 ) ; }",1
"else { memcpy ( &s4 [ 0 ] , result , sizeof ( ota4 ) ) ; memcpy ( &s4 [ 1 ] , result + SPI , sizeof ( ota4 ) ) ; S_flash_munmap ( ota4 ) ; }",1
"else { memcpy ( &s4 [ 0 ] , result , sizeof ( ota5 ) ) ; memcpy ( &s5 [ 1 ] , result + SPI , sizeof ( ota5 ) ) ; S_flash_munmap ( ota5 ) ; }",1
"else { printf ( ""n"" ' uip ( &uip_h ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; } ",1
"else { printf ( ""n"" ' uip1 ( &uip_h1 ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; } ",1
"else { printf ( ""n"" ' uip10 ( &uip_h10 ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; } ",1
"else { printf ( ""n"" ' uip2 ( &uip_h2 ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; } ",1
"else { printf ( ""n"" ' uip3 ( &uip_h3 ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; } ",1
"else { printf ( ""n"" ' uip4 ( &uip_h4 ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; } ",1
"else { printf ( ""n"" ' uip5 ( &uip_h5 ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; } ",1
"else { printf ( ""n"" ' uip6 ( &uip_h6 ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; } ",1
"else { printf ( ""n"" ' uip7 ( &uip_h7 ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; } ",1
"else { printf ( ""n"" ' uip8 ( &uip_h8 ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; } ",1
"else { printf ( ""n"" ' uip9 ( &uip_h9 ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; } ",1
"enc = cp_P_E_D( value , ls ) ; ",1
entry -> pNextEntry = rx_buf [ i + 1 ] ;,1
entry -> pNextEntry = rx_buf [ j + 1 ] ;,1
entry -> pNextEntry = rx_buf [ k + 1 ] ;,1
entry1 -> pNextEntry1 = rx_buf1 [ i + 1 ] ;,1
ep0status = buffer -> data [ 0 ] & 0x80 ? EP_STATUS_TX : EP_STATUS_RX ;,1
ep0status = buffer -> data [ 0 ] & 0x80 ? EP_TX : EP_RX ;,1
"esp ( size_t destAddr, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxt ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddr, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return err ; } } ",1
"esp01 ( size_t destAddr01, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxt01 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddr, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return err ; } } ",1
"esp02 ( size_t destAddr , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxt02 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return err; } } ",1
"esp02 ( size_t destAddr, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxt02 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddr, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return err ; } } ",1
"esp1 ( size_t destAddr01 , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxt1 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr1 , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return err; } } ",1
"esp1 ( size_t destAddr01, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxt1 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddr1, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return err ; } } ",1
"esp2 ( size_t destAddr , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxt2 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr2 , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return err; } } ",1
"esp2 ( size_t destAddr, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxt2 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddr2, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return err ; } } ",1
"espD ( size_t destAddr01 , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxtD ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddrD , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return err; } } ",1
"espD ( size_t destAddr01, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxtD ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddrD, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return err ; } } ",1
"espF ( size_t destAddr , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxtF ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddrF , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return err; } } ",1
"espF ( size_t destAddr, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxtF ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddrF, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return err ; } } ",1
"espc ( size_t destAddr01 , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxt1 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr1 , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return errc; } } ",1
"espc ( size_t destAddr01, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxt1 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddr1, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return errc ; } } ",1
"espn ( size_t destAddr01 , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxtD ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddrD , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return errn; } } ",1
"espn ( size_t destAddr01, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxtD ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddrD, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return errn ; } } ",1
"espo ( size_t destAddr , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxtF ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddrF , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return erro; } } ",1
"espo ( size_t destAddr, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxtF ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddrF, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return erro ; } } ",1
"espq ( size_t destAddr , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxt ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return errq; } } ",1
"espq ( size_t destAddr, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxt ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddr, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return errq ; } } ",1
"espq ( size_t destAddrq , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxt01 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return errq; } } ",1
"espq ( size_t destAddrq, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxt01 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddr, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return errq ; } } ",1
"espv ( size_t destAddr , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxt2 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr2 , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return errv; } } ",1
"espv ( size_t destAddr, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxt2 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddr2, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return errv ; } } ",1
"espx ( size_t destAddr , const void *srcAddr , size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en->find ( destAddr ) ; if ( xtsCtxt02 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr , size ) ; auto err = encrMgr->en ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err; } err = S_fl ( destAddr , buf , size ) ; delete buf; return errx; } } ",1
"espx ( size_t destAddr, const void *srcAddr, size_t size ) { if ( En::isEn ( ) ) { auto encrMgr = En::getI ( ) ; auto xtsCtxt = en -> find ( destAddr ) ; if ( xtsCtxt02 ) { uint8_t* buf = static_cast<uint8_t*> ( malloc ( size ) ) ; memcpy ( buf, srcAddr, size ) ; auto err = encrMgr -> en ( buf, destAddr, size, xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_fl ( destAddr, buf, size ) ; delete buf ; return errx ; } } ",1
"execlp ( "" wget.win32 "" , "" wget.win32 "" , ",1
extern WEAK char * gets ( char *ptr ) ,1
extern u int 32_t __bss_start__ ; extern u int 32_t __bss_end__ ; t = &__bss_start__ ; while ( t < &__bss_end__ ) { *t ++ = 0 ; } ,1
extern u int 32_t __bss_start__ ; extern u int 32_t __bss_end__ ; to = &__bss_start__ ; while ( to < &__bss_end__ ) { *to++ = 0 ; } ,1
extern u int 32_t __bss_start__ ; extern u int 32_t __bss_end__ ; to2 = &__bss_start__ ; while ( to2 < &__bss_end__ ) { *to++ = 0 ; } ,1
extern uint32_t __bss_start__ ; extern uint32_t __bss_end__ ; to = &__bss_start__ ; while ( to < &__bss_end__ ) { *to++ = 0 ; },1
extern uint32_t __data_start__ ; extern uint32_t __data_end__ ; from = &__data_load__ ; to = &__data_start__ ; ; while ( to < &__data_end__ ) { *to++ = *from++ ; },1
"fd = open ( temppath , O_RDONLY ) ;",1
fgetc ( FILE * ONE __stream ) ;,1
"file = fopen ( & url [1] , ""rb"" ) ;",1
"file = fopen ( &url [ 1 ] , "" rb "" ) ;",1
flash_addr_t block = ( address & 0x01000 ? FLASH_BLOCK_21 : FLASH_BLOCK_11 ) ;,1
"fopen ( filename_buf , ""a"" ) ;",1
"for ( auto &p : config.npn_list ) { p.insert ( p.begin ( ) , static_cast < unsigned char> ( p.size ( ) ) ) ; }",1
"for ( auto &p : config.npn_list1 ) { p.insert ( p.begin ( ) , static_cast < unsigned char> ( p.size ( ) ) ) ; }",1
"for ( auto &p : config.npn_list2 ) { p.insert ( p.begin ( ) , static_cast < unsigned char> ( p.size ( ) ) ) ; }",1
"for ( auto &p : config.npn_list3 ) { p.insert ( p.begin ( ) , static_cast < unsigned char> ( p.size ( ) ) ) ; }",1
"for ( auto &p : config.npn_list4 ) { p.insert ( p.begin ( ) , static_cast < unsigned char> ( p.size ( ) ) ) ; }",1
"for ( auto &p : config.npn_list5 ) { p.insert ( p.begin ( ) , static_cast < unsigned char> ( p.size ( ) ) ) ; }",1
"for ( auto &p : config.npn_lista1 ) { p.insert ( p.begin ( ) , static_cast < unsigned char> ( p.size ( ) ) ) ; }",1
"for ( auto &p : config.npn_lista2 ) { p.insert ( p.begin ( ) , static_cast < unsigned char> ( p.size ( ) ) ) ; }",1
"for ( auto &p : config.npn_lista3 ) { p.insert ( p.begin ( ) , static_cast < unsigned char> ( p.size ( ) ) ) ; }",1
"for ( auto &p : config.npn_lista4 ) { p.insert ( p.begin ( ) , static_cast < unsigned char> ( p.size ( ) ) ) ; }",1
"for ( auto &p : config.npn_lista5 ) { p.insert ( p.begin ( ) , static_cast < unsigned char> ( p.size ( ) ) ) ; }",1
"for ( bit_index = 0 ; bit_index < 32 ; bit_index++ ) { if ( ( ( common_ct >> bit_index ) & 0x1 ) == 1 ) { break ; } } u int 32_t err_code = bit_to_content_format ( p_ct , 1 << bit_index ) ; return err_code ; } ",1
"for ( bit_index33 = 0 ; bit_index < 32 ; bit_index33++ ) { if ( ( ( common_ct >> bit_index33 ) & 0x1 ) == 1 ) { break ; } } u int 32_t err_code = bit_to_content_format ( p_ct , 1 << bit_index ) ; return err_code ; } ",1
for ( i = 0 ; i < strlen ( user_supplied_string ) ; i++ ) ,1
for ( i = 0 ; i < strlen ( user_supplied_string3 ) ; i++ ) ,1
for ( r = 0 ; r < strlen ( user_supplied_string4 ) ; r++ ) ,1
"fprintf ( FILE * ONE __stream , const char * NTS __fmt , ... ) ;",1
"fprintf ( Value, "" Frequencys %d not in range 300000000 Hz - 1000000000 Hz "" , DesiredFreqs ) ;",1
"fprintf ( stderr , "" "" , uip_ipaddr_to_quad ( &netaddr ) , uip_ipaddr_to_quad ( &netmask ) ) ;",1
"fprintf ( stderr , "" Frequency %d not in range 300000000 Hz - 1000000000 Hz "" , DesiredFreq ) ;",1
"fprintf ( stderr , ""Frequency %d not in range 300000000 Hz - 1000000000 Hz "" , DesiredFreq ) ; ",1
"fprintf ( stderr , ""Frequency %d not in range 300000000 Hz - 1000000000 Hz "" , DesiredFreqValue ) ; ",1
"fprintf ( stderr , ""Frequency %d not in range 300000000 Hz - 1000000000 Hz "" , DesiredValue ) ; ",1
"fprintf ( stderr , ldev ) ;",1
"fscanf ( FILE * ONE __stream , const char * NTS __fmt , ... ) ;",1
"fscanf ( FILE *__stream_Value , const char *__fmt , ... ) ;",1
fw = NULL ; fw -> payload [ 1 ] = BUF -> destport ;,0
fw = NULL ; fw -> proto = BUF -> proto ;,0
fw = NULL ; fw -> timer = FW_TIME ;,0
getc ( __stream ) fgetc ( __stream ) ,1
getchar ( void ) ;,1
"getenv ( "" CONTIKI_EEPROM "" ) ;",1
"getenv ( "" CONTIKI_EEPROM1 "" ) ;",1
"getenv ( "" CONTIKI_EEPROM_Value "" ) ;",1
"getenv ( "" CONTIKI_Error"" ) ;",1
"getenv ( "" TOSCOMMMAP "" ) ;",1
"getenv ( "" TOSCOMdfMMAP "" ) ;",1
"getenv ( "" TOSCOPE "" ) ;",1
"getenv ( ""APPTOSCOMMMAP"" ) ;",1
"getenv ( ""M"" ) ;",1
"getenv ( ""TO05"" ) ;",1
"getenv ( ""TOSCOMMMAP"" ) ; ",1
"getenv ( ""TOSCOOP"" ) ;",1
getenv ( name ) ; ,1
gethostbyname ( const *name ) ,1
gethostbyname ( const char *name ) ,1
gethostbyname ( host1 ) ;,1
gethostbyname ( host2 ) ;,1
gethostbyname ( host3 ) ;,1
gethostbyname ( host4 ) ;,1
gethostbyname ( host5 ) ;,1
gethostbyname ( hostA01 ) ;,1
gethostbyname ( hostB02 ) ;,1
gethostbyname ( hostC03 ) ;,1
gethostbyname ( hostMAIN ) ;,1
"getopt ( ardddsgc , adfrgv , ""A:p:v:"" ) ) ! = -1",1
"getopt ( arffgc , argfv , ""A:p:v:"" ) ) ! = -1",1
"getopt ( argaac , arddgv , ""A:p:v:"" ) ) ! = -1",1
"getopt ( argc , argv , "" A:p:v: "" ) ) != -1",1
"getopt ( argc , argv , "" B:D:hs:t: "" ) ",1
"getopt ( argc , argv , "" B:HLhs:t:v::d::a:p:T "" ) ",1
"getopt ( argc , argv , "" Nb:e:f:g:m:p:s:t:o:v:A:B:O:P:T: "" ) ) ",1
"getopt ( argc , argv , ""A:g:p:v:"" ) ) ",1
"getopt ( argc , argv , ""A:p:v:"" ) ) ! = -1",1
"getopt ( argc , argv , ""Nb:e:f:g:m:p:s:t:o:v:A:B:O:P:T:"" ) ) ",1
"getopt ( argc , argv_Value , "" B:D:hs:t: "" ) ",1
"getopt ( argc1 , argv1 , "" A:p:v: "" ) ) != -1",1
"getopt ( argc2 , argv2 , "" A:p:v: "" ) ) != -1",1
"getopt ( argggc , arfgv , ""A:p:v:"" ) ) ! = -1",1
"getopt_long ( argc , argv , "" i:l:v:p: "" , long_options , &option_index ) ;",1
"getpw ( uid , line1 ) ;for ( k = 0 ; k<3 ; k++ ) { cryptpw = strtok ( line1 , "" : "" ) ;pwdline = 0 ; } result = strcmp ( crypt ( line1 , cryptpw ) , cryptpw ) == 0 ;",1
"getpw ( uid , lines ) ;for ( c = 0 ; c<3 ; c++ ) { cryptpw = strtok (lines , "" : "" ) ;lines = 0 ; } result = strcmp ( crypt ( plainpw , cryptpw ) , cryptpw ) == 0 ;",1
"getpw ( uid , pwdline ) ;for ( i = 0 ; i<3 ; i++ ) { cryptpw = strtok ( pwdline , "" : "" ) ;pwdline = 0 ; } result = strcmp ( crypt ( plainpw , cryptpw ) , cryptpw ) == 0 ;",1
"getpw ( uid , pwdline1 ) ;for ( i = 0 ; i<3 ; i++ ) { cryptpw = strtok ( pwdline1 , "" : "" ) ;pwdline = 0 ; } result = strcmp ( crypt ( plainpw1 , cryptpw ) , cryptpw ) == 0 ;",1
"getpw ( uid5 , pwdline5 ) ;for ( i = 0 ; i<53 ; i++ ) { cryptpw = strtok ( pwdline5 , "" : "" ) ;pwdline = 0 ; } result = strcmp ( crypt5 ( plainpw , cryptpw ) , cryptpw ) == 0 ;",1
"getpw ( uid5 , pwdline5 ) ;for ( ip = 0 ; p<53 ; p++ ) { cryptpw = strtok ( pwdline5 , "" : "" ) ;pwdline = 0 ; } result = strcmp ( crypt5 ( plainpw , cryptpw ) , cryptpw ) == 0 ;",1
gets ( char * NTS __str ) ;,1
gets ( char *__str_Value ) ;,1
gets ( nalkjnme ) ;,1
gets ( name ) ;,1
gets ( namrewre ) ;,1
gets ( u4trerl ) ;,1
gets ( uderrl ) ;,1
gets ( url ) ;,1
"gettext ( "" Exit "" ) ",1
"gettext ( "" Help "" ) ",1
"gettext ( "" Load "" ) ",1
"gettext ( "" Save "" ) ",1
"gettext ( "" Select "" ) ",1
gettext ( str ) ,1
gettext ( str.toLatin1 ( ) ) ,1
handle = LoadLibrary ( DATA2 ) ;,1
handle = LoadLibrary ( name ) ;,1
handle1 = LoadLibrary ( DATA5 ) ;,1
handle1 = LoadLibrary ( name1 ) ;,1
handle2 = LoadLibrary ( DATA4 ) ;,1
handle2 = LoadLibrary ( name2 ) ;,1
handle3 = LoadLibrary ( DATA3 ) ;,1
handle3 = LoadLibrary ( name3 ) ;,1
"home_dir = getenv ( "" HOME "" ) ;",1
"home_dir = getenv ( "" HOME1 "" ) ;",1
i = atol ( optarg ) ;,1
i = atol ( optarg1 ) ;,1
i = atol ( optarg2 ) ;,1
"idx = topic ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore"" ) ; } subs [idx ].cb = _on_pub ; ",1
"idx = topic1 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore1"" ) ; } subs [idx ].cb = _on_pub1 ; ",1
"idx = topic10 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore10"" ) ; } subs [idx ].cb = _on_pub10 ; ",1
"idx = topic10d ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore10"" ) ; } subs [idx ].cb = _on_pub10d ; ",1
"idx = topic1d ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore1"" ) ; } subs [idx ].cb = _on_pub1d ; ",1
"idx = topic2 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore2"" ) ; } subs [idx ].cb = _on_pub2 ; ",1
"idx = topic2d ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore2"" ) ; } subs [idx ].cb = _on_pub2d ; ",1
"idx = topic3 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore3"" ) ; } subs [idx ].cb = _on_pub3 ; ",1
"idx = topic3d ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore3"" ) ; } subs [idx ].cb = _on_pub3d ; ",1
"idx = topic4 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore4"" ) ; } subs [idx ].cb = _on_pub4 ; ",1
"idx = topic4d ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore4"" ) ; } subs [idx ].cb = _on_pub4d ; ",1
"idx = topic5 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore5"" ) ; } subs [idx ].cb = _on_pub5 ; ",1
"idx = topic5d ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore5"" ) ; } subs [idx ].cb = _on_pub5d ; ",1
"idx = topic6 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore6"" ) ; } subs [idx ].cb = _on_pub6 ; ",1
"idx = topic6d ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore6"" ) ; } subs [idx ].cb = _on_pub6d ; ",1
"idx = topic7 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore7"" ) ; } subs [idx ].cb = _on_pub7 ; ",1
"idx = topic7d ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore7"" ) ; } subs [idx ].cb = _on_pub7d ; ",1
"idx = topic8 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore8"" ) ; } subs [idx ].cb = _on_pub8 ; ",1
"idx = topic8d ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore8"" ) ; } subs [idx ].cb = _on_pub8d ; ",1
"idx = topic9 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore9"" ) ; } subs [idx ].cb = _on_pub9 ; ",1
"idx = topic9d ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore9"" ) ; } subs [idx ].cb = _on_pub9d ; ",1
"idx = topica1 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore1"" ) ; } subs [idx ].cb = _on_puba1 ; ",1
"idx = topica10 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore10"" ) ; } subs [idx ].cb = _on_puba10 ; ",1
"idx = topica10r ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore10"" ) ; } subs [idx ].cb = _on_puba10r ; ",1
"idx = topica1r ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore1"" ) ; } subs [idx ].cb = _on_puba1r ; ",1
"idx = topica2 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore2"" ) ; } subs [idx ].cb = _on_puba2 ; ",1
"idx = topica2r ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore2"" ) ; } subs [idx ].cb = _on_puba2r ; ",1
"idx = topica3 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore3"" ) ; } subs [idx ].cb = _on_puba3 ; ",1
"idx = topica3r ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore3"" ) ; } subs [idx ].cb = _on_puba3r ; ",1
"idx = topica4 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore4"" ) ; } subs [idx ].cb = _on_puba4 ; ",1
"idx = topica4 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore4"" ) ; } subs [idx ].cb = _on_puba4r ; ",1
"idx = topica5 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore5"" ) ; } subs [idx ].cb = _on_puba5 ; ",1
"idx = topica5r ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore5"" ) ; } subs [idx ].cb = _on_puba5r ; ",1
"idx = topica6 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore6"" ) ; } subs [idx ].cb = _on_puba6 ; ",1
"idx = topica6r ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore6"" ) ; } subs [idx ].cb = _on_puba6r ; ",1
"idx = topica7 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore7"" ) ; } subs [idx ].cb = _on_puba7 ; ",1
"idx = topica7r ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore7"" ) ; } subs [idx ].cb = _on_puba7r ; ",1
"idx = topica8 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore8"" ) ; } subs [idx ].cb = _on_puba8 ; ",1
"idx = topica8r ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore8"" ) ; } subs [idx ].cb = _on_puba8r ; ",1
"idx = topica9 ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore9"" ) ; } subs [idx ].cb = _on_puba9 ; ",1
"idx = topica9r ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore9"" ) ; } subs [idx ].cb = _on_puba9r ; ",1
"idx = topicd ( argv [1 ] ) ; if ( idx < 0 ) { puts ( ""errore"" ) ; } subs [idx ].cb = _on_pubd ; ",1
ie_len = ierrs -> iee_channel_hopping_sequence_id1 == 0 ? 1 : 12 + ies -> ie_hopping_sequence_len ; if ( len3 > = 2 + ie_len && ies != NULL ) ,0
ie_len = ies -> ie_channel_hopping_sequence_id == 0 ? 1 : 12 + ies -> ie_hopping_sequence_len ; if ( len > = 2 + ie_len && ies != NULL ) ,0
ie_len = iesdfs -> ief_channel_hopping_sequence_id2 == 0 ? 1 : 12 + ies -> ie_hopping_sequence_len ; if ( len4 > = 2 + ie_len && ies != NULL ) ,0
"if ( !errorReported ) { reportError ( "" TCPComm::TCPComm : fcntl ( pipeReadFD , F_SETFL , O_NONBLOCK ) ; "" , fcntl ( pipeReadFD , F_SETFL , O_NONBLOCK ) ) ; } if ( !errorReported ) { int pipeFDPair [ 2 ] ; reportError ( "" TCPComm::TCPComm : pipe ( pipeFDPair ) "" , pipe ( pipeFDPair ) ) ; pipeWriteFD = pipeFDPair [ 1 ] ; pipeReadFD = pipeFDPair [ 0 ] ; } ",1
"if ( !errorReported ) { reportError ( ""TCPComm : : TCPComm : fcntl ( pipeReadFD , F_SETFL , O_NONBLOCK ) ; "" , fcntl ( pipeReadFD , F_SETFL , O_NONBLOCK ) ) ; } if ( !errorReported ) { serverFD = reportError ( ""TCPComm : : TCPComm : socket ( AF_INET , SOCK_STREAM , 0 ) "" , socket ( AF_INET , SOCK_STREAM , 0 ) ) ; } ",1
"if ( !errorReported ) { reportErrorw ( "" TCPComm::TCPComm : fcntl ( pipeReadFD , F_SETFL , O_NONBLOCK ) ; "" , fcntlw ( pipeReadFD , F_SETFL , O_NONBLOCK ) ) ; } if ( !errorReported ) { int pipeFDPair [ 2 ] ; reportError ( "" TCPComm::TCPComm : pipe ( pipeFDPair ) "" , pipe ( pipeFDPair ) ) ; pipeWriteFD = pipeFDPair [ 1 ] ; pipeReadFD = pipeFDPairw [ 0 ] ; } ",1
"if ( !errorReportedTest ) { reportErrorTest ( "" TCPComm::TCPComm : fcntl ( pipeReadFD , F_SETFL , O_NONBLOCK ) ; "" , fcntl ( pipeReadFD , F_SETFL , O_NONBLOCK ) ) ; } if ( !errorReported ) { int pipeFDPair [ 2 ] ; reportError ( "" TCPComm::TCPComm : pipe ( pipeFDPair ) "" , pipe ( pipeFDPair ) ) ; pipeWriteFD = pipeFDPair [ 1 ] ; pipeReadFD = pipeFDPair [ 0 ] ; } ",1
if ( ( ( cc = = TL ) || ( ccg = = TL_D ) || ( cc = = TL_C ) || ( cc = = TLB ) || ( cc = = TLA ) ) ) { if ( ( pctr [ curr ] [ 0 ] = = pc ) || ( pctr [ curr ] [ 1 ] = = pc ) ) { status = IFX ; } } ,1
if ( ( ( cc1 = = TL ) || ( ccg = = TL_D ) || ( cc1 = = TL_C ) || ( cc1 = = TLB ) || ( cc1 = = TLA ) ) ) { if ( ( pctr [ curr ] [ 0 ] = = pc ) || ( pctr [ curr ] [ 1 ] = = pc ) ) { status = IFX ; } } ,1
if ( ( ( cc2 = = TL ) || ( ccg = = TL_D ) || ( cc2 = = TL_C ) || ( cc2 = = TLB ) || ( cc2 = = TLA ) ) ) { if ( ( pctr [ curr ] [ 0 ] = = pc ) || ( pctr [ curr ] [ 1 ] = = pc ) ) { status = IFX ; } } ,1
if ( ( ( cc3 = = TL ) || ( ccg = = TL_D ) || ( cc3 = = TL_C ) || ( cc3 = = TLB ) || ( cc3 = = TLA ) ) ) { if ( ( pctr [ curr ] [ 0 ] = = pc ) || ( pctr [ curr ] [ 1 ] = = pc ) ) { status = IFX ; } } ,1
if ( ( ( cc4 = = TL ) || ( ccg = = TL_D ) || ( cc4 = = TL_C ) || ( cc4 = = TLB ) || ( cc4 = = TLA ) ) ) { if ( ( pctr [ curr ] [ 0 ] = = pc ) || ( pctr [ curr ] [ 1 ] = = pc ) ) { status = IFX ; } } ,1
if ( ( ( cc5 = = TL ) || ( ccg = = TL_D ) || ( cc5 = = TL_C ) || ( cc5 = = TLB ) || ( cc5 = = TLA ) ) ) { if ( ( pctr [ curr ] [ 0 ] = = pc ) || ( pctr [ curr ] [ 1 ] = = pc ) ) { status = IFX ; } } ,1
if ( ( 0 < = cur_ts ) && ( cur_ts < NOISE_HISTORY1 ) ) ,1
if ( ( 0 < = currrent_t ) && ( currrent_t < N_His) ) ,1
if ( ( 0< = cur_t1 ) && ( cur_t1 < NOISE_HISTORY ) ) ,1
if ( ( echo == NULL ) || ( len < sizeof ( icmpv6_echo_t ) ) ) ,1
if ( ( echo1 == NULL ) || ( len1 < sizeof ( icmpv6_echo_t ) ) ) ,1
if ( ( p_cmd -> addr_len != 0 && p_cmd -> addr == NULL ) ,1
if ( ( p_cmd -> address_len != 0 && p_cmd -> addr == NULL ) ,1
if ( ( p_cmd01 -> addr_lenValue != 0 && p_cmd -> addrValue == NULL ) ,1
if ( ( p_cmdData -> addr_len != 0 && p_cmdData -> addrData == NULL ) ,1
if ( ( pa_cmd -> addr_len != 0 && pa_cmd -> addra == NULL ) ,1
if ( ( pa_cmd -> addr_len != 0 && pa_cmd -> address == NULL ) ,1
if ( ( pa_cmdValue01 -> addr_lenValue01 != 0 && pa_cmdValue01 -> addraValue01 == NULL ) ,1
if ( ( pa_cmdValue02 -> addr_lenValue02 != 0 && pa_cmdValue02 -> addraValue02 == NULL ) ,1
if ( ( pa_cmdd -> addr_len != 0 && pad_cmd -> adddra == NULL ) ,1
if ( ( paq_cmd -> addr_len != 0 && paq_cmd -> addraq == NULL ) ,1
"if ( ( res = mp_init_multi ( &ta , &tb , &tq , &q , NULL ) != MP_OKAY ) ) { return res ; } ",1
"if ( ( res = mp_init_multi ( &ta, &tb, &tq, &q, NULL ) ! = MP_OKAY ) ) { return res ; }",1
"if ( ( res = mp_init_multi ( &ta_Value , &tb , &tq , &q , NULL ) != MP_OKAY ) ) { return res ; } ",1
"if ( ( res1 = mp_init_multi ( &ta , &tb , &tq , &q , NULL ) != MP_OKAY ) ) { return res1 ; } ",1
"if ( ( res1 = mp_init_multi ( &ta, &tb, &tq, &q, NULL ) ! = MP_OKAY ) ) { return res1 ; }",1
"if ( ( res10 = mp_init_multi ( &ta, &tb, &tq, &q, NULL ) ! = MP_OKAY ) ) { return res10 ; }",1
"if ( ( res2 = mp_init_multi ( &ta, &tb, &tq, &q, NULL ) ! = MP_OKAY ) ) { return res2 ; }",1
"if ( ( res3 = mp_init_multi ( &ta, &tb, &tq, &q, NULL ) ! = MP_OKAY ) ) { return res3 ; }",1
"if ( ( res3 = mp_init_multi ( &ta3 , &tb3 , &tq3 , &q3 , NULL ) != MP_OKAY ) ) { return res ; } ",1
"if ( ( res4 = mp_init_multi ( &ta, &tb, &tq, &q, NULL ) ! = MP_OKAY ) ) { return res4 ; }",1
"if ( ( res5 = mp_init_multi ( &ta, &tb, &tq, &q, NULL ) ! = MP_OKAY ) ) { return res5 ; }",1
"if ( ( res6 = mp_init_multi ( &ta, &tb, &tq, &q, NULL ) ! = MP_OKAY ) ) { return res6 ; }",1
"if ( ( res7 = mp_init_multi ( &ta, &tb, &tq, &q, NULL ) ! = MP_OKAY ) ) { return res7 ; }",1
"if ( ( res8 = mp_init_multi ( &ta, &tb, &tq, &q, NULL ) ! = MP_OKAY ) ) { return res8 ; }",1
"if ( ( res9 = mp_init_multi ( &ta, &tb, &tq, &q, NULL ) ! = MP_OKAY ) ) { return res9 ; }",1
"if ( ( rest = mp_init_multi ( &ta , &tb , &tq , &q , NULL ) != MP_OKAY ) ) { return rest ; } ",1
"if ( ( rested = mp_init_multi ( &tad , &tbd , &tqd , &q , NULL ) != MP_OKAY ) ) { return resred ; } ",1
if ( ( serialReadFD ! = -1 ) || ( serialWriteFD ! = -1 ) ) { r = disconnect ( &err ) ; ,1
if ( ( serialReadFD != -1 ) || ( serialWriteFD != -1 ) ) { r = disconnect ( &err ) ;,1
if ( ( serialReadFD != -5 ) || ( serialWriteFD != -5 ) ) { r = disconnect ( &err5 ) ;,1
"if ( ( txframe = = NULL ) || ( txframe -> L1 < 4 ) || ( ( txframe -> L1 & 1 ) ! = 0 ) || ( rxframe = = NULL ) ) { cerr << ""BaseSerial not fulfilled , "" << "" txFrame: "" << txframe << "" rxFrame: "" << rxframe << "" txframe -> L1: "" << ( unsigned ) txframe -> L1 << endl ; return -1 ; }",1
"if ( ( txframe1 == NULL ) || ( txframe -> L11 < 4 ) || ( ( txframe -> L1 & 1 ) != 0 ) || ( rxframe == NULL ) ) { cerr << "" BaseSerial not fulfilled , "" << "" txFrame: "" << txframe << "" rxFrame: "" << rxframe << "" txframe -> L1: "" << ( unsigned ) txframe -> L1 << endl ; return -1 ; } ",1
"if ( ( txframe1 == NULL ) || ( txframe1 -> L11 < 4 ) || ( ( txframe1 -> L1 & 1 ) != 0 ) || ( rxframe == NULL ) ) { cerr << "" BaseSerial not fulfilled , "" << "" txFrame: "" << txframe << "" rxFrame: "" << rxframe << "" txframe -> L1: "" << ( unsigned ) txframe -> L1 << endl ; return -1 ; } ",1
"if ( ( txframeValue == NULL ) || ( txframeValue -> L2 < 4 ) || ( ( txframeValue -> L2 & 1 ) != 0 ) || ( rxframeValue == NULL ) ) { C << "" BaseSerial not fulfilled , "" << "" txFrameValue: "" << txframeValue << "" rxFrameValue: "" << rxframeValue << "" txframeValue -> L1: "" << ( unsigned ) txframe -> L1 << endl ; return -1 ; } ",1
if ( *read != -1 ) { break ; } else if ( ( *read == -1 ) && ( errors == AGAIN ) ) { serial_delay ( 100000 ) ; } ,1
if ( *readFD ! = -1 ) { break ; } else if ( ( *readFD = = -1 ) && ( errno = = EAGAIN ) ) { serial_delay ( 1000000 ) ; },1
if ( *readFD1 != -1 ) { break ; } else if ( ( *readFD1 == -1 ) && ( errno1 == EAGAIN ) ) { serial_delay ( 1000000 ) ; } ,1
if ( *readFD2 != -1 ) { break ; } else if ( ( *readFD2 == -1 ) && ( errno2 == EAGAIN ) ) { serial_delay2 ( 1000000 ) ; } ,1
if ( *readFD3 != -1 ) { break ; } else if ( ( *readFD3 == -1 ) && ( error_no3 == AGAIN ) ) { serial_delay ( 10000 ) ; } ,1
if ( *reader != -1 ) { break ; } else if ( ( *reader == -1 ) && ( Values == GAIN ) ) { serial_delays_Equales ( 1000000 ) ; } ,1
if ( *reads != -1 ) { break ; } else if ( ( *reads == -1 ) && ( error_No == AGAIN_Error ) ) { serial_delay ( 102000 ) ; } ,1
if ( *writeFD ! = -1 ) { break ; } else if ( ( *writeFD = = -1 ) && ( errno = = EAGAIN ) ) { serial_delay ( 1000000 ) ; },1
"if ( 0 = = strcmp ( name , & stdin_name ) ) { fd = 0 ; }",1
"if ( 0 = = strcmp ( name1 , & stdin_name1 ) ) { fd = 0 ; }",1
"if ( 0 = = strcmp ( name2 , & stdin_name2 ) ) { fd2 = 0 ; }",1
"if ( 0 = = strcmp ( name3 , & stdin_name3 ) ) { fd3 = 0 ; }",1
"if ( 0 = = strcmp ( name4 , & stdin_name4 ) ) { fd4 = 0 ; }",1
"if ( 0 = = strcmp ( name5 , & stdin_name5 ) ) { fd = 0 ; }",1
"if ( 0 = = strcmp ( name6 , & stdin_name ) ) { fd6 = 0 ; }",1
"if ( 0 == strcmp ( name , &__stdin_name ) ) ",1
"if ( 0 == strcmp ( name2 , &__stdin_name ) ) ",1
"if ( 0 == strcmp ( name2 , &__stdin_name3 ) ) ",1
"if ( 5 == 5 ) { fscanf ( stdin , "" %c "" , &data ) ; } if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( data < CHAR_MAX ) { char result = data + 1 ; print HexCharLine ( result ) ; } else { } } } ",0
if ( A = = FP_NAN && valf18 ! = 0x7e00 ) return CborErrorImproperValue ; ,1
"if ( BI ( CS -> CTL0, CS ) ) { dcoConst = * ( ( float * ) &csInfo -> rDC ) ; calVal = csInfo -> r ; }",1
"if ( BI ( CS -> CTL0, CS1 ) ) { dcoConst = * ( ( float * ) &csInfo -> rDC ) ; calVal = csInfo -> r1 ; }",1
"if ( BI ( CS -> CTL0, CS10 ) ) { dcoConst = * ( ( float * ) &csInfo -> rDC ) ; calVal = csInfo -> r10 ; }",1
"if ( BI ( CS -> CTL0, CS2 ) ) { dcoConst = * ( ( float * ) &csInfo -> rDC ) ; calVal = csInfo -> r2 ; }",1
"if ( BI ( CS -> CTL0, CS3 ) ) { dcoConst = * ( ( float * ) &csInfo -> rDC ) ; calVal = csInfo -> r3 ; }",1
"if ( BI ( CS -> CTL0, CS4 ) ) { dcoConst = * ( ( float * ) &csInfo -> rDC ) ; calVal = csInfo -> r4 ; }",1
"if ( BI ( CS -> CTL0, CS5 ) ) { dcoConst = * ( ( float * ) &csInfo -> rDC ) ; calVal = csInfo -> r5 ; }",1
"if ( BI ( CS -> CTL0, CS6 ) ) { dcoConst = * ( ( float * ) &csInfo -> rDC ) ; calVal = csInfo -> r6 ; }",1
"if ( BI ( CS -> CTL0, CS7 ) ) { dcoConst = * ( ( float * ) &csInfo -> rDC ) ; calVal = csInfo -> r7 ; }",1
"if ( BI ( CS -> CTL0, CS8 ) ) { dcoConst = * ( ( float * ) &csInfo -> rDC ) ; calVal = csInfo -> r8 ; }",1
"if ( BI ( CS -> CTL0, CS9 ) ) { dcoConst = * ( ( float * ) &csInfo -> rDC ) ; calVal = csInfo -> r9 ; }",1
"if ( BIT ( CS -> CTL0, CS ) ) { dcoConst = * ( ( float * ) &csInfo -> rD ) ; calVal = csInfo -> rD ; }",1
"if ( BIT ( CS -> CTL0, CS1 ) ) { dcoConst = * ( ( float * ) &csInfo -> rD1 ) ; calVal = csInfo -> rD1 ; }",1
"if ( BIT ( CS -> CTL0, CS10 ) ) { dcoConst = * ( ( float * ) &csInfo -> rD10 ) ; calVal = csInfo -> rD10 ; }",1
"if ( BIT ( CS -> CTL0, CS2 ) ) { dcoConst = * ( ( float * ) &csInfo -> rD2 ) ; calVal = csInfo -> rD2 ; }",1
"if ( BIT ( CS -> CTL0, CS3 ) ) { dcoConst = * ( ( float * ) &csInfo -> rD3 ) ; calVal = csInfo -> rD3 ; }",1
"if ( BIT ( CS -> CTL0, CS4 ) ) { dcoConst = * ( ( float * ) &csInfo -> rD4 ) ; calVal = csInfo -> rD4 ; }",1
"if ( BIT ( CS -> CTL0, CS5 ) ) { dcoConst = * ( ( float * ) &csInfo -> rD5 ) ; calVal = csInfo -> rD5 ; }",1
"if ( BIT ( CS -> CTL0, CS6 ) ) { dcoConst = * ( ( float * ) &csInfo -> rD6 ) ; calVal = csInfo -> rD6 ; }",1
"if ( BIT ( CS -> CTL0, CS7 ) ) { dcoConst = * ( ( float * ) &csInfo -> rD7 ) ; calVal = csInfo -> rD7 ; }",1
"if ( BIT ( CS -> CTL0, CS8 ) ) { dcoConst = * ( ( float * ) &csInfo -> rD8 ) ; calVal = csInfo -> rD8 ; }",1
"if ( BIT ( CS -> CTL0, CS9 ) ) { dcoConst = * ( ( float * ) &csInfo -> rD9 ) ; calVal = csInfo -> rD9 ; }",1
if ( C = = FP_NAN && valf121 ! = 0x7e00 ) return CborErrorImproperValue ; ,1
if ( D = = FP_NAN && valf120 ! = 0x7e00 ) return CborErrorImproperValue ; ,1
if ( K = = FP_NAN && valf17 ! = 0x7e00 ) return CborErrorImproperValue ; ,1
if ( MAX_SIZE < = strlen ( user_supplied_string ) ) ,1
if ( MAX_SIZE < = strlen ( user_supplied_string4 ) ) ,1
if ( MAX_SIZE2 < = strlen ( user_supplied_string2 ) ) ,1
if ( Z = = FP_NAN && valf19 ! = 0x7e00 ) return CborErrorImproperValue ; ,1
"if ( ac < 0 || ac > DEV_ACOMP_NUM ) { ACOMP_LOG ( ""Port , port_id"" ) ; return -WM_FAIL ; } mdev_t *dev = mdev ( mdev [ ac ] ) ; ",1
"if ( ac1 < 0 || ac1 > DEV_ACOMP_NUM ) { ACOMP_LOG ( ""Port , port_id"" ) ; return -WM_FAIL ; } mdev_t *dev = mdev ( mdev [ ac1 ] ) ; ",1
"if ( ac2 < 0 || ac2 > DEV_ACOMP_NUM ) { ACOMP_LOG ( ""Port , port_id"" ) ; return -WM_FAIL ; } mdev_t *dev = mdev ( mdev [ ac2 ] ) ; ",1
"if ( ac3 < 0 || ac3 > DEV_ACOMP_NUM ) { ACOMP_LOG ( ""Port , port_id"" ) ; return -WM_FAIL ; } mdev_t *dev = mdev ( mdev [ ac3 ] ) ; ",1
"if ( ac4 < 0 || ac4 > DEV_ACOMP_NUM ) { ACOMP_LOG ( ""Port , port_id"" ) ; return -WM_FAIL ; } mdev_t *dev = mdev ( mdev [ ac4 ] ) ; ",1
"if ( ac5 < 0 || ac5 > DEV_ACOMP_NUM ) { ACOMP_LOG ( ""Port , port_id"" ) ; return -WM_FAIL ; } mdev_t *dev = mdev ( mdev [ ac5 ] ) ; ",1
"if ( argc > = 3 ) { flages | = _get_qos ( argv [ 2 ] ) ; } idx3 = _topic_name_find ( argv [ 1 ] ) ; if ( idx3 < 0 ) { puts ( "" error: no space to subscribe "" ) ; } _subscriptions [ idx3 ] .cb = _on_pub ; if ( _topic_names [ idx3 ] [ 0 ] != '",1
"if ( argc > = 3 ) { flags | = _get_qos ( argv [ 2 ] ) ; } idx = _topic_name_find ( argv [ 1 ] ) ; if ( idx < 0 ) { puts ( "" error: no space to subscribe "" ) ; } _subscriptions [ idx ] .cb = _on_pub ; if ( _topic_names [ idx ] [ 0 ] != '",1
"if ( argc3 > = 3 ) { flags | = _get_qos ( argv3 [ 2 ] ) ; } idx = _topic_name_find ( argv3 [ 1 ] ) ; if ( idx < 0 ) { puts ( "" error: no space to subscribe "" ) ; } _subscriptions [ idx ] .cb = _on_pub ; if ( _topic_names [ idx ] [ 0 ] != '",1
"if ( argcq > = 3 ) { flags | = _get_qos ( argcq [ 2 ] ) ; } idx = _topic_name_find ( argv [ 1 ] ) ; if ( idx < 0 ) { puts ( "" error: no space to subscribe "" ) ; } _subscriptions [ idx ] .cb = _on_pub ; if ( _topic_names [ idx ] [ 0 ] != '",1
if ( cert_def -> expire_date_format > sizeof ( ATCACERT_DATE_FORMAT_SIZES ) / sizeof ( ATCACERT_DATE_FORMAT_SIZES [ 0 ] ) ) { return ATCACERT_E_ERROR ; } formatted_date_size = ATCACERT_DATE_FORMAT_SIZES [ cert_def -> expire_date_format ] ; if ( formatted_date_size > sizeof ( formatted_date ) ) { return ATCACERT_E_ERROR ; } ,1
if ( cert_def -> issue_date_format > sizeof ( ATCACERT_DATE_FORMAT_SIZES ) / sizeof ( ATCACERT_DATE_FORMAT_SIZES [ 0 ] ) ) { return ATCACERT_E_ERROR ; } formatted_date_size = ATCACERT_DATE_FORMAT_SIZES [ cert_def -> issue_date_format ] ; if ( formatted_date_size > sizeof ( formatted_date ) ) { return ATCACERT_E_ERROR ; } } ,1
"if ( d != NULL ) { mp_exch ( d , &ta ) ; d -> sign = ( mp_iszero ( d ) == MP_YES ) ? MP_ZPOS : n ; } LBL_ERR: mp_clear_multi ( &ta , &tb , &tq , &q , NULL ) ; return res ; } ",1
"if ( d != NULL ) { mp_exch ( d , &ta_Value ) ; d -> sign = ( mp_iszero ( d ) == MP_YES ) ? MP_ZPOS : n ; } LBL_ERR: mp_clear_multi ( &ta_Value , &tb , &tq , &q , NULL ) ; return res ; } ",1
"if ( d != NULL ) { mp_exch ( dest , &tafg ) ; d -> sign = ( mp_iszero ( d ) == MP_YES ) ? MP_ZPOS : n ; } LBL_ERR: mp_clear_multi ( &tafg , &tb , &tq , &q , NULL ) ; return res ; } ",1
"if ( d3 != NULL ) { mp_exch ( d3 , &ta ) ; d -> sign = ( mp_iszero ( d3 ) == MP_YES ) ? MP_ZPOS : n ; } LBL_ERR: mp_clear_multi ( &ta , &tb , &tq , &q , NULL ) ; return res ; } ",1
"if ( d3 != NULL ) { mp_exch ( d3 , &ta3 ) ; d -> sign = ( mp_iszero ( d3 ) == MP_YES ) ? MP_ZPOS : n ; } LBL_ERR: mp_clear_multi ( &ta , &tb , &tq , &q , NULL ) ; return res ; } ",1
"if ( datav != NULL ) { mp_exch ( datav , &ta ) ; d -> sign = ( mp_iszero ( d ) == MP_YES ) ? MP_ZPOS : n ; } LBL_ERR: mp_clear_multi ( &ta , &tb , &tq , &q , NULL ) ; return res ; } ",1
"if ( file == XBADFILE ) return SSL_BAD_FILE ; XFSEEK ( file , 0 , XSEEK_END ) ; sz = XFTELL ( file ) ; XREWIND ( file ) ;",1
"if ( file == XBADFILE ) return SSL_BAD_FILE ; XFSEEK ( file , 0 , XSEEK_END ) ; sz = XFTELL ( file1 ) ; XREWIND ( file1 ) ;",1
"if ( file == XBADFILE ) return SSL_BAD_FILE ; XFSEEK ( file , 0 , XSEEK_END ) ; sz = XFTELL ( file2 ) ; XREWIND ( file2 ) ;",1
"if ( file1 == XBADFILE ) return SSL_BAD_FILE ; XFSEEK ( file1 , 1 , XSEEK_END ) ; sz = XFTELL ( fileed ) ; XREWIND ( file1 ) ;",1
"if ( file2 == XBADFILE ) return SSL_BAD_FILE ; XFSEEK ( file2 , 2 , XSEEK_END ) ; sz = XFTELL ( fileed ) ; XREWIND ( file2 ) ;",1
"if ( file3 == XBADFILE ) return SSL_BAD_FILE ; XFSEEK ( file3 , 3 , XSEEK_END ) ; sz = XFTELL ( fileed ) ; XREWIND ( file3 ) ;",1
"if ( file4 == XBADFILE ) return SSL_BAD_FILE ; XFSEEK ( file4 , 1 , XSEEK_END ) ; sz = XFTELL ( fileed ) ; XREWIND ( file4 ) ;",1
"if ( file5 == XBADFILE ) return SSL_BAD_FILE ; XFSEEK ( file5 , 2 , XSEEK_END ) ; sz = XFTELL ( fileed ) ; XREWIND ( file5 ) ;",1
"if ( file6 == XBADFILE ) return SSL_BAD_FILE ; XFSEEK ( file6 , 3 , XSEEK_END ) ; sz = XFTELL ( fileed ) ; XREWIND ( file6 ) ;",1
if ( filp -> f_op -> open != NULL ) { ,1
if ( filp -> f_op1 -> open != NULL ) { ,1
"if ( g_wd.cC.updated & 1 << i ) { *connected = g_wd.cC.bitMap & 1 << i ? true: false ; memcpy ( mac, g_wdrv_priv.cC.mac[i].addr, 6 * sizeof ( uint8_t ) ) ; g_wd.cC.updated & = ~ ( i << i ) ; return true ; }",1
"if ( g_wd1.cC.updated & 1 << f ) { *connected = g_wd.cC.bitMap & 1 << f ? true: false ; memcpy ( mac, g_wdrv_priv.cC.mac[f].addr, 6 * sizeof ( uint8_t ) ) ; g_wd.cC.updated & = ~ ( f << f ) ; return true ; }",1
"if ( g_wd2.cC.updated & 1 << g ) { *connected = g_wd.cC.bitMap & 1 << g ? true: false ; memcpy ( mac, g_wdrv_priv.cC.mac[g].addr, 6 * sizeof ( uint8_t ) ) ; g_wd.cC.updated & = ~ ( g << g ) ; return true ; }",1
"if ( g_wd3.cC.updated & 1 << l ) { *connected = g_wd.cC.bitMap & 1 << l ? true: false ; memcpy ( mac, g_wdrv_priv.cC.mac[l].addr, 6 * sizeof ( uint8_t ) ) ; g_wd.cC.updated & = ~ ( l << l ) ; return true ; }",1
"if ( g_wd4.cC.updated & 1 << k ) { *connected = g_wd.cC.bitMap & 1 << k ? true: false ; memcpy ( mac, g_wdrv_priv.cC.mac[k].addr, 6 * sizeof ( uint8_t ) ) ; g_wd.cC.updated & = ~ ( k << k ) ; return true ; }",1
"if ( globalTrue ) { fscanf ( stdin , "" %c "" , &data ) ; } if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( data < CHAR_MAX ) { char result = data + 1 ; print HexCharLine ( result ) ; } else { } } } ",0
if ( h - std::begin ( hostname ) < p - std::begin ( pattern ) ) { return false ; },1
if ( h1 - std::begin ( hostname ) < p1 - std::begin ( pattern ) ) { return false ; },1
if ( h10 - std::begin ( hostname ) < p10 - std::begin ( pattern ) ) { return false ; },1
if ( h2 - std::begin ( hostname ) < p2 - std::begin ( pattern ) ) { return false ; },1
if ( h3 - std::begin ( hostname ) < p3 - std::begin ( pattern ) ) { return false ; },1
if ( h4 - std::begin ( hostname ) < p4 - std::begin ( pattern ) ) { return false ; },1
if ( h5 - std::begin ( hostname ) < p5 - std::begin ( pattern ) ) { return false ; },1
if ( h6 - std::begin ( hostname ) < p6 - std::begin ( pattern ) ) { return false ; },1
if ( h7 - std::begin ( hostname ) < p7 - std::begin ( pattern ) ) { return false ; },1
if ( h8 - std::begin ( hostname ) < p8 - std::begin ( pattern ) ) { return false ; },1
if ( h9 - std::begin ( hostname ) < p9 - std::begin ( pattern ) ) { return false ; },1
if ( ha1 - std::begin ( hostname ) < pa1 - std::begin ( pattern ) ) { return false ; },1
if ( ha10 - std::begin ( hostname ) < pa10 - std::begin ( pattern ) ) { return false ; },1
if ( ha2 - std::begin ( hostname ) < pa2 - std::begin ( pattern ) ) { return false ; },1
if ( ha3 - std::begin ( hostname ) < pa3 - std::begin ( pattern ) ) { return false ; },1
if ( ha4 - std::begin ( hostname ) < pa4 - std::begin ( pattern ) ) { return false ; },1
if ( ha5 - std::begin ( hostname ) < pa5 - std::begin ( pattern ) ) { return false ; },1
if ( ha6 - std::begin ( hostname ) < pa6 - std::begin ( pattern ) ) { return false ; },1
if ( ha7 - std::begin ( hostname ) < pa7 - std::begin ( pattern ) ) { return false ; },1
if ( ha8 - std::begin ( hostname ) < pa8 - std::begin ( pattern ) ) { return false ; },1
if ( ha9 - std::begin ( hostname ) < pa9 - std::begin ( pattern ) ) { return false ; },1
if ( heap == NULL || p == NULL ) ,1
if ( heap1 == NULL || p1 == NULL ) ,1
if ( idx < 0 ) if ( Value [ idx ] [ 0 ] != ',1
if ( idx < 0 ) if ( name [ idex ] [ 0 ] != ',1
if ( idx < 0 ) if ( topic [ idex ] [ 0 ] != ',1
if ( idx < 0 ) if ( topic [ idx ] [ 0 ] != ',1
if ( idx < 0 ) if ( topic_names [ idx ] [ 0 ] != ',1
if ( idx < 0 ) if ( tp [ idx1 ] [ 0 ] != ',1
"if ( idx < 0 ) { puts ( "" "" ) ; } _Value [ idsx ] .cbs = _on_pub ;",1
"if ( idx < 0 ) { puts ( "" "" ) ; } _subscriptions [ idx ] .cb = _on_pub ;",1
"if ( idx < 0 ) { puts ( "" "" ) ; } options [ idex ] .cb3 = _on_pub ;",1
"if ( idx < 0 ) { puts ( "" "" ) ; } s [ idxs ] .cbs = _on_pub ;",1
"if ( idx < 0 ) { puts ( "" "" ) ; } scriptions [ idx ] .cb = _on_pub ;",1
"if ( idx < 0 ) { puts ( "" "" ) ; } sub [ idx ] .cb3 = _on_pub3 ;",1
if ( incr != 0 ) { uint32_t begin = ( uint32_t ) ( ptr ) ; uint32_t end = ( uint32_t ) ( ptr + incr ) ; uint32_t powersave_begin ; uint32_t powersave_end ; wiced_bool_t powerdown ; },1
if ( incr1 != 0 ) { uint32_t begin = ( uint32_t ) ( ptr1 ) ; uint32_t end = ( uint32_t ) ( ptr1 + incr1 ) ; uint32_t powersave_begin ; uint32_t powersave_end ; wiced_bool_t powerdown ; },1
if ( incr2 != 0 ) { uint32_t begin = ( uint32_t ) ( ptr2 ) ; uint32_t end = ( uint32_t ) ( ptr2 + incr2 ) ; uint32_t powersave_begin ; uint32_t powersave_end ; wiced_bool_t powerdown ; },1
if ( incr3 != 0 ) { uint32_t begin = ( uint32_t ) ( ptr3 ) ; uint32_t end = ( uint32_t ) ( ptr3 + incr3 ) ; uint32_t powersave_begin ; uint32_t powersave_end ; wiced_bool_t powerdown ; },1
if ( incr4 != 0 ) { uint32_t begin = ( uint32_t ) ( ptr4 ) ; uint32_t end = ( uint32_t ) ( ptr4 + incr4 ) ; uint32_t powersave_begin ; uint32_t powersave_end ; wiced_bool_t powerdown ; },1
if ( incr5 != 0 ) { uint32_t begin = ( uint32_t ) ( ptr5 ) ; uint32_t end = ( uint32_t ) ( ptr5 + incr5 ) ; uint32_t powersave_begin ; uint32_t powersave_end ; wiced_bool_t powerdown ; },1
if ( int _num < 4 ) { EICRA & = ~ ( 0x3 << ( int _num * 2 ) ) ; EICRA | = ( flank << ( int _num * 2 ) ) ; } config [ int _num ] .arg = arg ;,1
if ( int _num < 4 ) { EICRA & = ~ ( 0x3 << ( int _num * 2 ) ) ; EICRA | = ( flank << ( int _num * 2 ) ) ; } config [ int _num ] .cb = cb ;,1
if ( int _num < 5 ) { EICRAe & = ~ ( 0x3 << ( int _num * 2 ) ) ; EICRAe | = ( flank << ( int _num * 2 ) ) ; } config [ int _num ] .arg = arg ;,1
if ( int _num < 5 ) { EICRAe & = ~ ( 0x3 << ( int _num * 2 ) ) ; EICRAe | = ( flank << ( int _num * 2 ) ) ; } config [ int _num ] .cb = cb ;,1
if ( out > = sizeof ( wbuf[0] ) ) * ( ( wchar_t* ) outptr ) = 0x00000000 ; str = wcsdup ( wbuf ) ; err: iclose ( ic ) ; return str ; } } ,1
if ( out1 > = sizeof ( wbuf1[0] ) ) * ( ( wchar_t* ) outptr1 ) = 0x00000000 ; str = wcsdup ( wbuf1 ) ; err1: iclose ( ic ) ; return str ; } } ,1
if ( out2 > = sizeof ( wbuf2[0] ) ) * ( ( wchar_t* ) outptr2 ) = 0x00000000 ; str = wcsdup ( wbuf2 ) ; err2: iclose ( ic ) ; return str ; } } ,1
if ( out3 > = sizeof ( wbuf3[0] ) ) * ( ( wchar_t* ) outptr3 ) = 0x00000000 ; str = wcsdup ( wbuf3 ) ; err3: iclose ( ic ) ; return str ; } } ,1
if ( out4 > = sizeof ( wbuf4[0] ) ) * ( ( wchar_t* ) outptr4 ) = 0x00000000 ; str = wcsdup ( wbuf4 ) ; err4: iclose ( ic ) ; return str ; } } ,1
"if ( pIntera ! = 0 ) { memset ( pIntera , sizeof ( pIntera ) , 0 ) ; } ",1
"if ( pIntera1 ! = 0 ) { memset ( pIntera1 , sizeof ( pIntera1 ) , 0 ) ; } ",1
"if ( pInterd ! = 0 ) { memset ( pInterd , sizeof ( pInterd ) , 0 ) ; } ",1
"if ( pInterd1 ! = 0 ) { memset ( pInterd1 , sizeof ( pInterd1 ) , 0 ) ; } ",1
"if ( pInterf ! = 0 ) { memset ( pInterf , sizeof ( pInterf ) , 0 ) ; } ",1
"if ( pInterf1 ! = 0 ) { memset ( pInterf1 , sizeof ( pInterf1 ) , 0 ) ; } ",1
"if ( pInterfaces1 ! = 0 ) { memset ( pInterfaces1 , sizeof ( pInterfaces1 ) , 0 ) ; }",1
"if ( pInterfaces10 ! = 0 ) { memset ( pInterfaces10 , sizeof ( pInterfaces10 ) , 0 ) ; }",1
"if ( pInterfaces2 ! = 0 ) { memset ( pInterfaces2 , sizeof ( pInterfaces2 ) , 0 ) ; }",1
"if ( pInterfaces3 ! = 0 ) { memset ( pInterfaces3 , sizeof ( pInterfaces3 ) , 0 ) ; }",1
"if ( pInterfaces4 ! = 0 ) { memset ( pInterfaces4 , sizeof ( pInterfaces4 ) , 0 ) ; }",1
"if ( pInterfaces5 ! = 0 ) { memset ( pInterfaces5 , sizeof ( pInterfaces5 ) , 0 ) ; }",1
"if ( pInterfaces6 ! = 0 ) { memset ( pInterfaces6 , sizeof ( pInterfaces6 ) , 0 ) ; }",1
"if ( pInterfaces7 ! = 0 ) { memset ( pInterfaces7 , sizeof ( pInterfaces7 ) , 0 ) ; }",1
"if ( pInterfaces8 ! = 0 ) { memset ( pInterfaces8 , sizeof ( pInterfaces8 ) , 0 ) ; }",1
"if ( pInterfaces9 ! = 0 ) { memset ( pInterfaces9 , sizeof ( pInterfaces9 ) , 0 ) ; }",1
"if ( pInterg ! = 0 ) { memset ( pInterg , sizeof ( pInterg ) , 0 ) ; } ",1
"if ( pInterg1 ! = 0 ) { memset ( pInterg1 , sizeof ( pInterg1 ) , 0 ) ; } ",1
"if ( pInters ! = 0 ) { memset ( pInters , sizeof ( pInters ) , 0 ) ; } ",1
"if ( pInters1 ! = 0 ) { memset ( pInters1 , sizeof ( pInters1 ) , 0 ) ; } ",1
if ( r = = -1 ) { *error = error_no ; return -1 ; },1
if ( r = = -1 ) { *error = error_no ; return -1 ; } return erorr ; },1
if ( r = = FP_NAN && valf16 ! = 0x7e00 ) return CborErrorImproperValue ; ,1
if ( reason < REASON_BEACON_TIMEOUT ) { reason_str = _esp_wifi_disc_reasons [ reason ] ; } ,1
if ( reason < REASON_BEACON_TIMEOUTe ) { reason_stre = _esp_wifi_disc_reasonse [ reasone ] ; } ,1
"if ( route = = NULL || route -> is_bad ) { printf ( ""n"" ' uip ( &uip_h ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; ",1
"if ( route1 = = NULL || route1 -> is_bad ) { printf ( ""n"" ' uip ( &uip_h ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; ",1
"if ( route2 = = NULL || route2 -> is_bad ) { printf ( ""n"" ' uip ( &uip_h ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; ",1
"if ( route3 = = NULL || route3 -> is_bad ) { printf ( ""n"" ' uip ( &uip_h ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; ",1
"if ( route4 = = NULL || route4 -> is_bad ) { printf ( ""n"" ' uip ( &uip_h ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; ",1
"if ( route5 = = NULL || route5 -> is_bad ) { printf ( ""n"" ' uip ( &uip_h ) ' uip_ip ( &addr ) ) ; uaodv ( &addr ) ; ",1
"if ( rt == NULL || ( SCMP32 ( uip_ntohl ( rm -> dest_seqno ) , rt -> hseqno ) > 0 ) ) { print _debug ( "" Inserting3 "" ) ; rt = uaodv_rt_add ( &rm -> dest_addr , uip_udp_sender ( ) , rm -> hop_count , &rm -> dest_seqno ) ; } ",1
"if ( rt == NULL || ( SCMP32 ( uip_ntohl ( rm -> dest_seqno ) , rt -> hseqno ) > 03 ) ) { print _debug ( "" Inserting3 "" ) ; rt 3 = uaodv_rt_add ( &rm -> dest_addr , uip_udp_sender ( ) , rm3 -> hop_count , &rm3 -> dest_seqno ) ; } ",1
"if ( rt == NULL || ( SCMP362 ( uip_ntohl ( rm6 -> dest_seqno ) , rt -> hseqno ) > 0 ) ) { print _debug ( "" Inserting3 "" ) ; rt = uaodv_rt_add ( &rm -> dest_addr , uip_udp_sender ( ) , rm -> hop_count , &rm -> dest_seqno ) ; } ",1
"if ( size < = 0 ) { WPRINT_WWD_ERROR ( ( "" F E "" ) ) ; result = WWD_BADARG ; goto exit ; }",1
"if ( size < = 0 ) { WPRINT_WWD_ERROR ( ( "" F error01 "" ) ) ; result4 = WWD_BADARG ; goto exit ; }",1
"if ( size < = 0 ) { WPRINT_WWD_ERROR ( ( "" Fatal error "" ) ) ; result3 = WWD_BADARG ; goto exit ; }",1
"if ( size < = 0 ) { WPRINT_WWD_ERROR ( ( "" Fatal error01 "" ) ) ; result2 = WWD_BADARG ; goto exit ; }",1
"if ( size < = 0 ) { WPRINT_WWD_ERROR ( ( "" error "" ) ) ; result1 = WWD_BADARG ; goto exit ; }",1
if ( strlen ( line ) < ( 11 + ( len * 2 ) ) ) { return 0 ; } ,1
if ( strlen ( line ) < 11 ) { return 0 ; } ,1
if ( termination = = NULL ) { namePos = termination + 1 ; },1
"if ( termination = = NULL ) { strcpy ( newName , namePos ) ; } namePos = termination + 1 ; }",1
if ( termination == NULL ) { namePos = termination + 1 ; } ,1
if ( termination == NULL ) { namePos2 = termination2 + 1 ; } ,1
if ( termination == NULL ) { namePos3 = termination3 + 1 ; } ,1
"if ( tm ( f1 ) ) { FILE* tmp = fopen ( f , ""wb+"" ) ; while ( ( recv ( sock , rf , Ds , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Ds , tmp ) ; } ",1
"if ( tm ( fa ) ) { FILE* tmp = fopen ( f , ""wb+"" ) ; while ( ( recv ( sock , rf , Dsa , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Dsa , tmp ) ; } ",1
"if ( tm ( fa1 ) ) { FILE* tmp = fopen ( f , ""wb+"" ) ; while ( ( recv ( sock , rf , Dsa1 , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Dsa1 , tmp ) ; } ",1
"if ( tm ( fa1 ) ) { FILE* tmp = fopen ( fa1 , ""wb+"" ) ; while ( ( recv ( sock , rf , Ds , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Ds , tmp ) ; } ",1
"if ( tm ( fb ) ) { FILE* tmp = fopen ( f , ""wb+"" ) ; while ( ( recv ( sock , rf , Dsb , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Dsb , tmp ) ; } ",1
"if ( tm ( fb1 ) ) { FILE* tmp = fopen ( f , ""wb+"" ) ; while ( ( recv ( sock , rf , Dsb1 , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Dsb1 , tmp ) ; } ",1
"if ( tm ( fb1 ) ) { FILE* tmp = fopen ( fb1 , ""wb+"" ) ; while ( ( recv ( sock , rf , Ds , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Ds , tmp ) ; } ",1
"if ( tm ( fc ) ) { FILE* tmp = fopen ( f , ""wb+"" ) ; while ( ( recv ( sock , rf , Dsc , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Dsc , tmp ) ; } ",1
"if ( tm ( fc1 ) ) { FILE* tmp = fopen ( f , ""wb+"" ) ; while ( ( recv ( sock , rf , Dsc1 , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Dsc1 , tmp ) ; } ",1
"if ( tm ( fc1 ) ) { FILE* tmp = fopen ( fc1 , ""wb+"" ) ; while ( ( recv ( sock , rf , Ds , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Ds , tmp ) ; } ",1
"if ( tm ( fd ) ) { FILE* tmp = fopen ( f , ""wb+"" ) ; while ( ( recv ( sock , rf , Dsd , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Dsd , tmp ) ; } ",1
"if ( tm ( fd1 ) ) { FILE* tmp = fopen ( f , ""wb+"" ) ; while ( ( recv ( sock , rf , Dsd1 , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Dsd1 , tmp ) ; } ",1
"if ( tm ( fd1 ) ) { FILE* tmp = fopen ( fd1 , ""wb+"" ) ; while ( ( recv ( sock , rf , Ds , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Ds , tmp ) ; } ",1
"if ( tm ( ff ) ) { FILE* tmp = fopen ( f , ""wb+"" ) ; while ( ( recv ( sock , rf , Dsf , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Dsf , tmp ) ; } ",1
"if ( tm ( ff1 ) ) { FILE* tmp = fopen ( f , ""wb+"" ) ; while ( ( recv ( sock , rf , Dsf1 , 0 ) > 0 ) & ( amt! = 0 ) ) amt = fwrite ( rf , 1 , Dsf1 , tmp ) ; } ",1
if ( type == SSL_FILETYPE_PEM ) { crl -> monitors [ 0 ] .path = strdup ( path ) ; crl -> monitors [ 0 ] .type = SSL_FILETYPE_PEM ;,1
if ( type1 == FILETYPE_PEM ) { crl -> monitors [ 0 ] .path = strdup ( path ) ; crl -> monitors [ 0 ] .type = FILETYPE_PEM ;,1
"if ( utf8 ) { size_t wlen1 = mbstowcs ( NULL, utf8, 0 ) ; if ( ( size_t ) -1 = = wlen1 ) { return wcsdup1 ( D"""" ) ; } rety = calloc ( wlen1+1, sizeof ( wchar_t ) ) ; mbstowcs ( rety, utf8, wlen+1 ) ; ret[wlen1] = 0x0000 ; } ",1
"if ( utf8 ) { size_t wlen2 = mbstowcs ( NULL, utf8, 0 ) ; if ( ( size_t ) -1 = = wlen2 ) { return wcsdup ( K"""" ) ; } retr = calloc ( wlen+1, sizeof ( wchar_t ) ) ; mbstowcs ( retr, utf8, wlen+1 ) ; ret[wlen] = 0x0000 ; } ",1
"if ( utf8 ) { size_t wlen3 = mbstowcs ( NULL, utf8, 0 ) ; if ( ( size_t ) -1 = = wlen ) { return wcsdup ( LF"""" ) ; } rete = calloc ( wlen+1, sizeof ( wchar_t ) ) ; mbstowcs ( rete, utf8, wlen+1 ) ; ret[wlen] = 0x0000 ; } ",1
"if ( utf8 ) { size_t wlenq = mbstowcs ( NULL, utf8, 0 ) ; if ( ( size_t ) -1 = = wlen ) { return wcsdup ( LFD"""" ) ; } rett = calloc ( wlen+1, sizeof ( wchar_t ) ) ; mbstowcs ( rett, utf8, wlen+1 ) ; ret[wlen] = 0x0000 ; } ",1
"if ( utf8 ) { size_t wlenw = mbstowcs ( NULL, utf8, 0 ) ; if ( ( size_t ) -1 = = wlen ) { return wcsdup ( LG"""" ) ; } retc = calloc ( wlen+1, sizeof ( wchar_t ) ) ; mbstowcs ( retc, utf8, wlen+1 ) ; ret[wlen] = 0x0000 ; } ",1
if ( widget -> next == focus ) { break ; } ,1
if ( widget -> next == focus ) { break ; } } focus = widget ; if ( focus == NULL ) { if ( window -> active != NULL ) { for ( focus = window -> active ;focus -> next != NULL ; focus = focus -> next ) ; } } } ,0
if ( widget -> next == focusValue ) { break ; } ,1
if ( widget -> next == focus_Value ) { break ; } } focus = widget ; if ( focus_Value == NULL ) { if ( window -> active != NULL ) { for ( focus_Value = window -> active ;focus_Value -> next != NULL ; focus_Value = focus_Value -> next ) ; } } } ,1
if ( widget -> next2 == focuse ) { break ; } ,1
if ( widget -> next2 == focuse ) { break ; } } focuse = widget ; if ( focuse == NULL ) { if ( window -> active != NULL ) { for ( focus = window -> active ;focus -> next != NULL ; focus = focus -> next ) ; } } } ,1
if ( widget -> nextData01 == focus ) { break ; } ,1
if ( widget -> nextData03 == focus ) { break ; } } focus = widget ; if ( focus == NULL ) { if ( window -> active != NULL ) { for ( focus = window -> active ;focus -> next != NULL ; focus = focus -> next ) ; } } } ,1
if ( widget -> nextNumber2 == focuse ) { break ; } ,1
if ( widget -> nextNumber2 == focuse ) { break ; } } focuse = widget ; if ( focuse == NULL ) { if ( window -> active != NULL ) { for ( focus = window -> active ;focus -> next != NULL ; focus = focus -> next ) ; } } } ,1
if ( widget -> nextValue01 == focuse ) { break ; } ,1
if ( widget -> nextValue01 == focuse ) { break ; } } focuse = widget ; if ( focuseValue01 == NULL ) { if ( window -> active != NULL ) { for ( focus = window -> active ;focus -> next != NULL ; focus = focus -> next ) ; } } } ,1
if ( widget -> nextValue02 == focuse ) { break ; } } focuse = widget ; if ( focuse == NULL ) { if ( window -> active != NULL ) { for ( focus = window -> active ;focus -> next != NULL ; focus = focus -> next ) ; } } } ,1
if ( widget -> next_value == focuse ) { break ; } ,1
if ( widget -> next_values == focus ) { break ; } ,1
if ( widget -> next_values == focuse ) { break ; } } focuse = widget ; if ( focuse == NULL ) { if ( window -> active != NULL ) { for ( focus = window -> active ;focus -> next != NULL ; focus = focus -> next ) ; } } } ,1
if ( widget -> nextee2 == focuse ) { break ; } } focuse = widget ; if ( focuse == NULL ) { if ( window -> active != NULL ) { for ( focus = window -> active ;focus -> next != NULL ; focus = focus -> next ) ; } } } ,1
if ( widget -> nextff2 == focuse ) { break ; } ,1
if ( widget -> nextffw2 == focuse ) { break ; } } focuse = widget ; if ( focuse == NULL ) { if ( window -> active != NULL ) { for ( focus = window -> active ;focus -> next != NULL ; focus = focus -> next ) ; } } } ,1
if ( widget -> nextw2 == focuse ) { break ; } ,1
"if ( xResult1 == CKR_OK ) { xResult1 = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex1 ] , &xObjectHandle ) ; } else",1
"if ( xResult2 == CKR_OK ) { xResult2 = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex2 ] , &xObjectHandle ) ; } else",1
"if ( xResult3 == CKR_OK ) { xResult3 = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex3 ] , &xObjectHandle ) ; } else",1
"if ( xResult4 == CKR_OK ) { xResult4 = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex 4] , &xObjectHandle ) ; } else",1
"if ( xResult5 == CKR_OK ) { xResult5 = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex5 ] , &xObjectHandle ) ; } else",1
"if ( xResult6 == CKR_OK ) { xResult6 = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex6 ] , &xObjectHandle ) ; } else",1
"if ( xResult7 == CKR_OK ) { xResult7 = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex7 ] , &xObjectHandle ) ; } else",1
"if ( xResult8 == CKR_OK ) { xResult8 = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex8 ] , &xObjectHandle ) ; } else",1
"if ( xResult9 == CKR_OK ) { xResult9 = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex9 ] , &xObjectHandle ) ; } else",1
"if ( xResulta == CKR_OK ) { xResulta = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexa ] , &xObjectHandle ) ; } else",1
"if ( xResultd == CKR_OK ) { xResultd = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexd ] , &xObjectHandle ) ; } else",1
"if ( xResultf == CKR_OK ) { xResultf = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexf ] , &xObjectHandle ) ; } else",1
"if ( xResultg == CKR_OK ) { xResultg = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexg ] , &xObjectHandle ) ; } else",1
"if ( xResulth == CKR_OK ) { xResulth = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexh ] , &xObjectHandle ) ; } else",1
"if ( xResults == CKR_OK ) { xResults = xFindObjectWithLabelAndClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexs ] , &xObjectHandle ) ; } else",1
"inline u int 8_t getFDO ( struct pac *msg , u int 8_t *size ) { u int 8_t *buf = msg -> data ; if ( buf == NULL || size == NULL ) return 1 ; if ( hasBH ( msg ) ) buf + = LOWMSG_MESH_LEN ; if ( hasMH ( msg ) ) buf + = LOWMSG_BCAST_LEN ; if ( ( *buf >> 3 ) != LOWPAN_FRAGN_PATTERN ) return 1 ; buf + = 4 ; *size = *buf ; return 0 ; } ",1
"inline u int 8_t getMFA ( struct pac *msg , ieee154_saddr_t *final ) { u int 8_t *buf = msg -> data ; if ( !hasBH ( msg ) || msg -> data == NULL || final == NULL ) return 1 ; // skip 64-bit addresses if ( ! ( *buf & LOWPAN_MESH_F_MASK ) ) return 1 ; buf + = 3 ; *final = ntohs ( * ( ( u int 16_t * ) buf ) ) ; return 0 ; } ",1
"inline u int 8_t getSeq ( struct pac *msg , u int 8_t *seqno ) { u int 8_t *buf = msg -> data ; if ( buf == NULL || seqno == NULL || !hasMH ( msg ) ) return 1 ; if ( hasBH ( msg ) ) buf + = LOWMSG_MESH_LEN ; if ( *buf != LOWPAN_BCAST_PATTERN ) return 2 ; buf + = 1 ; *seqno = *buf ; return 0 ; } ",1
"inline uint8_t getFragDgramOffset ( struct pac *msg , uint8_t *size ) { uint8_t *buf = msg -> data ; if ( buf = = NULL || size = = NULL ) return 1 ; if ( hasBH ( msg ) ) buf + = LOWMSG_MESH_LEN ; if ( hasMH ( msg ) ) buf + = LOWMSG_BCAST_LEN ; if ( ( *buf >> 3 ) ! = LOWPAN_FRAGN_PATTERN ) return 1 ; buf + = 4 ; *size = *buf ; return 0 ; } ",1
"inline uint8_t getMFA ( struct pac *msg , ieee154_saddr_t *final ) { uint8_t *buf = msg -> data ; if ( !hasBH ( msg ) || msg -> data = = NULL || final = = NULL ) return 1 ; // skip 64-bit addresses if ( ! ( *buf & LOWPAN_MESH_F_MASK ) ) return 1 ; buf + = 3 ; *final = ntohs ( * ( ( uint16_t * ) buf ) ) ; return 0 ; } ",1
"inline uint8_t getMHL ( struct pac *msg , uint8_t *hops ) { uint8_t *buf = msg -> data ; if ( !hasBH ( msg ) || msg -> data = = NULL || hops = = NULL ) return 1 ; *hops = ( *buf ) & LOWPAN_MESH_HOPS_MASK ; return 0 ; } ",1
"inline uint8_t getMeshOriginAddr ( struct pac *msg , ieee154_saddr_t *origin ) { uint8_t *buf = msg -> data ; if ( !hasBH ( msg ) || msg -> data = = NULL || origin = = NULL ) return 1 ; if ( ! ( *buf & LOWPAN_MESH_V_MASK ) ) return 1 ; buf + = 1 ; *origin = ntohs ( * ( ( uint16_t * ) buf ) ) ; return 0 ; } ",1
"inline uint8_t getSeq ( struct pac *msg , uint8_t *seqno ) { uint8_t *buf = msg -> data ; if ( buf = = NULL || seqno = = NULL || !hasMH ( msg ) ) return 1 ; if ( hasBH ( msg ) ) buf + = LOWMSG_MESH_LEN ; if ( *buf ! = LOWPAN_BCAST_PATTERN ) return 2 ; buf + = 1 ; *seqno = *buf ; return 0 ; } ",1
"inline uint8_t setMeshFinalAddr ( struct pac *msg , ieee154_saddr_t final ) { uint8_t *buf = msg -> data ; if ( !hasBH ( msg ) || msg -> data = = NULL ) return 1 ; if ( ! ( *buf & LOWPAN_MESH_F_MASK ) ) return 1 ; buf + = 3 ; * ( ( uint16_t * ) buf ) = htons ( final ) ; return 0 ; } ",1
"inline uint8_t setMeshHopsLeft ( struct pac *msg , uint8_t hops ) { uint8_t *buf = msg -> data ; if ( !hasBH ( msg ) || msg -> data = = NULL ) return 1 ; *buf = 0xb0 ; *buf | = hops & LOWPAN_MESH_HOPS_MASK ; return 0 ; } ",1
"inline uint8_t setMeshOriginAddr ( struct pac *msg , ieee154_saddr_t origin ) { uint8_t *buf = msg -> data ; if ( !hasBH ( msg ) || msg -> data = = NULL ) return 1 ; if ( ! ( *buf & LOWPAN_MESH_V_MASK ) ) return 1 ; buf + = 1 ; * ( ( uint16_t * ) buf ) = htons ( origin ) ; return 0 ; } ",1
"inputfile = fopen ( filename , ""r"" ) ;",1
"int RandomInt ( int lower , int upper ) { return ( ( int ) ( RandomUniform ( ) * ( upper - lower + 1 ) ) + lower ) ; } ",1
"int RunDefenderDemo ( bool awsIotMqttMode , const char * pIdentifier , void * pNetworkServerInfo , void * pNetworkCredentialInfo , const IotNetworkInterface_t * pNetworkInterface ) { int status = EXIT_SUCCESS ; bool metricsInitStatus = false ; IotMqttError_t mqttStatus = IOT_MQTT_INIT_FAILED ; AwsIotDefenderError_t defenderResult = AWS_IOT_DEFENDER_INTERNAL_FAILURE ; AwsIotDefenderStartInfo_t startInfo = AWS_IOT_DEFENDER_START_INFO_INITIALIZER ; const AwsIotDefenderCallback_t callback = { .function = _defenderCallback , .pCallbackContext = NULL } ; IotMqttConnection_t mqttConnection = IOT_MQTT_CONNECTION_INITIALIZER ;",1
"int RunDefenderDemoF ( bool awsIotMqttModeF , const char * pIdentifierF , void * pNetworkServerInfoF , void * pNetworkCredentialInfoF , const IotNetworkInterface_t * pNetworkInterface ) { int status = EXIT_SUCCESS ; bool metricsInitStatus = false ; IotMqttError_t mqttStatus = IOT_MQTT_INIT_FAILED ; AwsIotDefenderError_t defenderResult = AWS_IOT_DEFENDER_INTERNAL_FAILURE ; AwsIotDefenderStartInfo_t startInfo = AWS_IOT_DEFENDER_START_INFO_INITIALIZER ; const AwsIotDefenderCallback_t callback = { .function = _defenderCallback , .pCallbackContext = NULL } ; IotMqttConnection_t mqttConnection = IOT_MQTT_CONNECTION_INITIALIZER ;",1
"int RunDefenderDemosF ( bool awsIotMqttModeFs , const char * pIdentifierFs , void * pNetworkServerInfoF , void * pNetworkCredentialInfoF , const IotNetworkInterface_t * pNetworkInterfaces ) { int status = EXIT_SUCCESS ; bool metricsInitStatuss = false ; IotMqttError_t mqttStatus = IOT_MQTT_INIT_FAILED ; AwsIotDefenderError_t defenderResult = AWS_IOT_DEFENDER_INTERNAL_FAILURE ; AwsIotDefenderStartInfo_t startInfo = AWS_IOT_DEFENDER_START_INFO_INITIALIZER ; const AwsIotDefenderCallback_t callback = { .function = _defenderCallback , .pCallbackContext = NULL } ; IotMqttConnection_t mqttConnection = IOT_MQTT_CONNECTION_INITIALIZER ;",1
"int RunHttpsAsyncDownloadDemo ( bool awsIotMqttMode , const char * pIdentifier , void * pNetworkServerInfo , void * pNetworkCredentialInfo , const IotNetworkInterface_t * pNetworkInterface ) { IOT_FUNCTION_ENTRY ( int , EXIT_SUCCESS ) ;",1
"int RunHttpsAsyncDownloadDemoGGAe , const char * pIdentifierG , void * pNetworkServerInfoG , void * pNetworkCredentialInfoG , const IotNetworkInterface_t * pNetworkInterface ) { IOT_FUNCTION_ENTRY ( int , EXIT_SUCCESS ) ;",1
"int RunHttpsAsyncUploadDemo ( bool awsIotMqttMode , const char * pIdentifier , void * pNetworkServerInfo , void * pNetworkCredentialInfo , const IotNetworkInterface_t * pNetworkInterface )",1
"int RunHttpsAsyncUploadDemoAE ( bool awsIotMqttModeAE , const char * pIdentifierAe , void * pNetworkServerInfoAE , void * pNetworkCredentialInfo , const IotNetworkInterface_t * pNetworkInterface )",1
"int access ( const char * , int1 ) ;",1
"int access ( const char * , int2 ) ;",1
"int access ( const char * , int3 ) ;",1
"int access ( const char1 * , int ) ;",1
"int adc ( ADC_ID_Type adc_id ) { if ( adc_id < 0 || adc_id > MW300_ADC_NUM ) { ADC_LOG ( ""A"" ) ; return -WM_FAIL ; } if ( mdev ( adc [ adc_id ] ) ! = NULL ) return WM_SUCCESS ; ",1
"int adc ( ADC_ID_Type adc_id1 ) { if ( adc_id1 < 0 || adc_id1 > MW300_ADC_NUM ) { ADC_LOG ( ""A"" ) ; return -WM_FAIL ; } if ( mdev ( adc [ adc_id1 ] ) ! = NULL ) return WM_SUCCESS ; ",1
"int adc ( ADC_ID_Type adc_id1 ) { if ( adc_id2 < 0 || adc_id2 > MW300_ADC_NUM ) { ADC_LOG ( ""A"" ) ; return -WM_FAIL ; } if ( mdev ( adc [ adc_id2 ] ) ! = NULL ) return WM_SUCCESS ; ",1
"int adc ( ADC_ID_Type adc_id2 ) { if ( adc_id3 < 0 || adc_id3 > MW300_ADC_NUM ) { ADC_LOG ( ""A"" ) ; return -WM_FAIL ; } if ( mdev ( adc [ adc_id3 ] ) ! = NULL ) return WM_SUCCESS ; ",1
"int adc ( ADC_ID_Type adc_id4 ) { if ( adc_id4 < 0 || adc_id4 > MW300_ADC_NUM ) { ADC_LOG ( ""A"" ) ; return -WM_FAIL ; } if ( mdev ( adc [ adc_id4 ] ) ! = NULL ) return WM_SUCCESS ; ",1
"int adc ( ADC_ID_Type adc_id5 ) { if ( adc_id5 < 0 || adc_id5 > MW300_ADC_NUM ) { ADC_LOG ( ""A"" ) ; return -WM_FAIL ; } if ( mdev ( adc [ adc_id5 ] ) ! = NULL ) return WM_SUCCESS ; ",1
"int cmp_ipv6_addr ( const ip6_addr_t *addr1 , const ip6_addr_t *addr2 ) { return memcmp ( addr1 , addr2 , sizeof ( ip6_addr_t ) ) ; ",1
"int data445 ; data = 0 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; SOCKET connectSocket = INVALID_SOCKET ; char inputBuffer [ CHAR_ARRAY_SIZE ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , &wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( &service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr* ) &service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '",1
int get_ser_fd ( ) { return serial_source_fd ( ser_src ) ; } ,1
int hasRWrite ( unsignedv int userMaskv01 ) { if ( userMaskv01 & maskv ) { return 1 ; } return 0 ; } ,1
int hasReadW ( unsigned int userMaskvalue ) { if ( userMaskvalue & mask ) { return 1 ; } return 0 ; } ,1
int hasReadWrite ( unsigned int userMask01 ) { if ( userMask01 & mask ) { return 1 ; } return 0 ; } ,1
int hasReadWriteAccess ( unsigned int userMask ) { if ( userMask & mask ) { return 1 ; } return 0 ; } ,1
int ipv6_addr_is_zero ( const ip6_addr_t *addr ) { int i ; for ( i = 0 ; i<16 ; i++ ) { if ( addr -> addr[i] ) { return 0 ; } } return 1 ; } ,1
"int main ( ) { T* t = new Tossim ( NULL ) ; t-> init ( ) ; T throttle ( t , 10 ) ; SerialForwarder sf ( 9001 ) ; for ( int i = 0 ; i < 1 ; i++ ) { Mote* m = t->getNode ( i ) ; m->bootAtTime ( rand ( ) % t->ticksPerSecond ( ) ) ; }}",0
"int main ( int argc , char **argv ) { struct ieee154_frame_addr frame_address ; struct lowpan_reconstruct recon ; char print _buf [ 256 ] ; u int 8_t *cur ; int idx = 0 , rv ; int ret ;",1
"int main ( int argc , char **argv ) { struct ieee154_frame_addr frame_address ; struct lowpan_reconstruct recon ; char print_buf[256] ; uint8_t *cur ; int idx = 0 , rv ; int ret ; ",1
int main ( void ) { volatile uint32_t i ; MAP_WDT_A_holdTimer ( ) ; for ( i = 0 ; i < 32 ; i++ ) { dmaTxData [i] = 0x80 + i ; dmaRxData [i] = 0x8f ; } },0
"int main G ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; globalArgc = argc ; globalArgv = argv ; } ",0
"int main G ( int argc , char * argv [ ] ) { srand ( ( unsigned ) time ( NULL ) ) ; print Line ( "" "" ) ; G ( ) ; print Line ( "" Finished G ( ) "" ) ; return 0 ; } ",0
"int order ( void *a , void *b ) { if ( !a || !b ) return a < b ? -1 : 1 ; if ( OPTION_KEY ( * ( coap_option * ) a ) < COAP_OPTION_KEY ( * ( coap_option * ) b ) ) return -1 ; return OPTION_KEY ( * ( coap_option * ) a ) = = OPTION_KEY ( * ( coap_option * ) b ) ; }",0
"int rv = g_get_cb ( vname, buf, max_len ) ; if ( rv < = 0 ) return -WM_FAIL ; cmd_hist_arr[cmd_no] = strdup ( buf ) ; return WM_SUCCESS ; } ",1
"int rv = g_set_cb ( name, buf ) ; if ( rv ! = WMS ) return rv ; cmd[cmd_no] = strdup ( buf ) ; int i ; for ( i = 0 ; i < M ; i++ ) wmprintf ( ""ARR: %s "", cmd[i] ) ; return WM ; } ",1
"int rv1 = g_get_cb1 ( vname, buf, max_len ) ; if ( rv1 < = 0 ) return -WM_FAIL ; cmd_hist_arr[cmd_no] = strdup ( buf ) ; return WM_SUCCESS ; } ",1
"int rv1 = g_set_cb ( name, buf ) ; if ( rv1 ! = WMS ) return rv1 ; cmd[cmd_no] = strdup ( buf ) ; int i ; for ( l = 0 ; l < M ; l++ ) wmprintf ( ""ARR: %s "", cmd[l] ) ; return WM ; } ",1
"int rv2 = g_get_cb2 ( vname, buf, max_len ) ; if ( rv2 < = 0 ) return -WM_FAIL ; cmd_hist_arr[cmd_no] = strdup ( buf ) ; return WM_SUCCESS ; } ",1
"int rv2 = g_set_cb ( name, buf ) ; if ( rv2 ! = WMS ) return rv2 ; cmd[cmd_no] = strdup ( buf ) ; int i ; for ( f = 0 ; f < M ; f++ ) wmprintf ( ""ARR: %s "", cmd[f] ) ; return WM ; } ",1
"int rv3 = g_get_cb3 ( vname, buf, max_len ) ; if ( rv3 < = 0 ) return -WM_FAIL ; cmd_hist_arr[cmd_no] = strdup ( buf ) ; return WM_SUCCESS ; } ",1
"int rv3 = g_set_cb ( name, buf ) ; if ( rv3 ! = WMS ) return rv3 ; cmd[cmd_no] = strdup ( buf ) ; int i ; for ( h = 0 ; h < M ; h++ ) wmprintf ( ""ARR: %s "", cmd[h] ) ; return WM ; } ",1
"int rv4 = g_set_cb ( name, buf ) ; if ( rv4 ! = WMS ) return rv ; cmd[cmd_no] = strdup ( buf ) ; int i ; for ( k = 0 ; k < M ; k++ ) wmprintf ( ""ARR: %s "", cmd[k] ) ; return WM ; ",1
"int snprintf ( char *str , size_t size , const char *format , ... ) ;",1
"int snprintf ( char *str , size_t size_Value , const char *format , ... ) ;",1
"int tcplib_connect ( struct tcplib_sock *sock , struct sockaddr_in6 *serv_addr ) { if ( sock -> tx_buf = = NULL ) return -1 ; switch ( sock -> state ) { case TCP_CLOSED: memset ( &sock -> l_ep , 0 , sizeof ( struct sockaddr_in6 ) ) ; sock -> l_ep.sin6_port = htons ( alloc_local_port ( ) ) ; break ; case TCP_LISTEN: break ; default: return -1 ; } ",1
"int up ( char* pN, int numberOfItems ) { int initCount = getProductCount ( pN ) ; int updatedCount = initCount + numberOfItems ; int updated = updateProductCount ( updatedCount ) ; if ( 1 == 0 ) { char pme[128] ; pme= getpme ( pN ) ; printf ( pme, initCount ) ; if ( updated == 0 ) { printf ( pme, updatedCount ) ; } else { printf ( pme ) ; } } return updated ; }",1
"int up ( char* poN, int numberOfItems ) { int initCount = getProductCount ( poN ) ; int updatedCount = initCount + numberOfItems ; int updated = updateProductCount ( updatedCount ) ; if ( 1 == 0 ) { char pme[128] ; pm= getpme ( poN ) ; printf ( pme, initCount ) ; if ( updated == 0 ) { printf ( pm, updatedCount ) ; } else { printf ( pm ) ; } } return updated ; }",1
"int update ( char* pN, int numberOfItems ) { int initCount = getProductCount ( pN01 ) ; int updatedCount = initCount + numberOfItems ; int updated = updateProductCount ( updatedCount ) ; if ( 1 == 0 ) { char pme01[128] ; pme01 = getpme ( pN01 ) ; printf ( pme01, initCount ) ; if ( updated == 0 ) { printf ( pme01, updatedCount ) ; } else { printf ( pme01 ) ; } } return updated ; }",1
"int update ( char* pNO, int numberOfItems ) { int initCount = getProductCount ( pNO ) ; int updatedCount = initCount + numberOfItems ; int updated = updateProductCount ( updatedCount ) ; if ( 1 == 0 ) { char pmane[128] ; pme01 = getpme ( pNO ) ; printf ( pmane, initCount ) ; if ( updated == 0 ) { printf ( pmane, updatedCount ) ; } else { printf ( pmane ) ; } } return updated ; }",1
"int vGattDemoSvcInit ( bool awsIotMqttMode , const char * pIdentifier , void * pNetworkServerInfo , void * pNetworkCredentialInfo , const IotNetworkInterface_t * pNetworkInterface ) { int status = EXIT_SUCCESS ; while ( 1 ) { vTaskDelay ( 1000 ) ; } return status ; }",1
"int vGattDemoSvcInitA ( bool awsIotMqttMode , const char * pIdentifierA , void * pNetworkServerInfoA , void * pNetworkCredentialInfoA , const IotNetworkInterface_t * pNetworkInterfaceA ) { int status = EXIT_SUCCESS ; while ( 1 ) { vTaskDelay ( 1000 ) ; } return status ; }",1
int32_t control = get_CONTROL ( ) ; return control & CONTROL ? APP : APP ; ; ,1
int32_t control1 = get_CONTROL ( ) ; return control1 & CONTROL1 ? APP1 : APP1 ; ; ,1
int32_t control2 = get_CONTROL ( ) ; return control2 & CONTROL2 ? APP2 : APP2 ; ; ,1
int32_t control3 = get_CONTROL ( ) ; return control3 & CONTROL3 ? APP3 : APP3 ; ; ,1
int32_t control4 = get_CONTROL ( ) ; return control4 & CONTROL4 ? APP4 : APP4 ; ; ,1
int32_t control5 = get_CONTROL ( ) ; return control5 & CONTROL5 ? APP5 : APP5 ; ; ,1
int32_t control6 = get_CONTROL ( ) ; return control6 & CONTROL6 ? APP6 : APP6 ; ; ,1
"lRetVal = iot_watchdog_ioctl ( ( IotWatchdogHandle_t ) pvUserContext, eGetWatchdogStatus, ( void * const ) & lWdogStatus ) ; if ( lWdogStatus = = eWatchdogTimerBarkExpired ) { xSemaphoreGiveFromISR ( xtestIotWatchdogBarkSemaphore, & xHigherPriorityTaskWoken ) ; } else { lRetVal = iot_watchdog_restart ( ( IotWatchdogHandle_t ) pvUserContext ) ; xSemaphoreGiveFromISR ( xtestIotWatchdogBiteSemaphore, & xHigherPriorityTaskWoken ) ; } }",1
"lRetValue = iot_watchdog_ioctl ( ( IotWatchdogHandle_tValue ) pvUserContext, eGetWatchdogStatus, ( void * const ) & lWdogStatusValue ) ; if ( lWdogStatus = = eWatchdogTimerBarkExpired ) { xSemaphoreGiveFromISR ( xtestIotWatchdogBarkSemaphore, & xHigherPriorityTaskWoken ) ; } else { lRetVal = iot_watchdog_restart ( ( IotWatchdogHandle_t ) pvUserContext ) ; xSemaphoreGiveFromISR ( xtestIotWatchdogBiteSemaphore, & xHigherPriorityTaskWoken ) ; } }",1
"lRetValue01 = iot_watchdog_ioctl ( ( IotWatchdogHandle_t ) pvUserContext, eGetWatchdogStatus, ( void * const ) & lWdogStatus ) ; if ( lWdogStatus1 = = eWatchdogTimerBarkExpired ) { xSemaphoreGiveFromISR ( xtestIotWatchdogBarkSemaphore, & xHigherPriorityTaskWoken ) ; } else { lRetVal = iot_watchdog_restart ( ( IotWatchdogHandle_t ) pvUserContext ) ; xSemaphoreGiveFromISR ( xtestIotWatchdogBiteSemaphore, & xHigherPriorityTaskWoken ) ; } }",1
"lRetValue01 = iot_watchdog_ioctl ( ( IotWatchdogHandle_tValue01 ) pvUserContext, eGetWatchdogStatus, ( void * const ) & lWdogStatusValue01 ) ; if ( lWdogStatus = = eWatchdogTimerBarkExpired ) { xSemaphoreGiveFromISR ( xtestIotWatchdogBarkSemaphore, & xHigherPriorityTaskWoken ) ; } else { lRetVal = iot_watchdog_restart ( ( IotWatchdogHandle_t ) pvUserContext ) ; xSemaphoreGiveFromISR ( xtestIotWatchdogBiteSemaphore, & xHigherPriorityTaskWoken ) ; } }",1
leds & LEDS_BLUE ? blue_level : 0 ) ;,1
"leds & LEDS_GREEN ? green_level : 0 , ",1
len - = LOWMSG_FRAGN_LEN ; ,1
long lo+A2987 : A3015ng laddrData = 0 ; ,1
long long laddr = 0 ; ,1
long long laddrAdd = 0 ; ,1
long long laddrData = 0 ; ,1
long long laddrDate = 0 ; ,1
long long laddrValue = 0 ; ,1
"mask!= 0 && gdbstub_set_hw_watchpo int ( i , mask , access ) ",1
"mask!= 0 && gdbstub_set_hw_watchpo int ( i , mask , accesse ) ",1
"mask!= 0 && gdbstub_set_hw_watchpo int ( i , mask , accessq ) ",1
"mask!= 0 && gdbstub_set_hw_watchpo int ( i , mask , accessr ) ",1
"mask!= 0 && gdbstub_set_hw_watchpo int ( i , mask , accessw ) ",1
"mask!= 0 && gdbstub_set_hw_watchpo int ( i , mask3 , access ) ",1
"mask!= 0 && gdbstub_set_hw_watchpo int ( i_Value , mask , access ) ",1
"memcpy ( &ifr6.ifr6_addr , addr , 16 ) ;",1
"memcpy ( &msg -> ip6_hdr.ip6_dst , &iph -> ip6_src , 16 ) ;",1
"memcpy ( &msg -> ip6_hdr.ip6_dst , &sock -> r_ep.sin6_addr , 16 ) ;",1
"memcpy ( &my_addr , addr , sizeof ( struct in6_addr ) ) ;",1
"memcpy ( &new_sock -> r_ep.sin6_addr , &iph -> ip6_src , 16 ) ;",1
"memcpy ( &node -> local , &dst , sizeof ( cp_address_t ) ) ; ",1
"memcpy ( &nodeCor -> local , &dst01 , sizeof ( cp_address_01 ) ) ;",1
"memcpy ( &nodeCorXY -> local , &C1 , sizeof ( cp_address_Main ) ) ;",1
"memcpy ( &nodeX -> local , &D , sizeof ( cp_address_X ) ) ;",1
"memcpy ( &nodeXD -> local , &E01 , sizeof ( cp_address_XD ) ) ;",1
"memcpy ( &nodeY -> local , &A , sizeof ( cp_address_Y) ) ;",1
"memcpy ( &nodeYD -> local , &F01 , sizeof ( cp_address_YD) ) ;",1
"memcpy ( &s -> id , &id , sizeof ( cp_tid_t ) ) ;",1
"memcpy ( &s -> peer , peer , sizeof ( cp_address_t ) ) ;",1
"memcpy ( &this_conn -> r_ep.sin6_addr , &iph -> ip6_src , 16 ) ",1
"memcpy ( COD ( *option ) , data , length ) ;",1
"memcpy ( addr -> s6_addr , ctx.s6_addr , prefix_options [ context ] .pfx_len / 8 ) ;",1
"memcpy ( addr -> s6_addr , ctx.s6_addr , prefix_options[context].pfx_len / 8 ) ;",1
"memcpy ( addrstr , ""localhost"" , 9 ) ;",1
"memcpy ( addrstr , server -> s , server -> length ) ;",1
"memcpy ( buf , "" ( unknown address type ) "" , min ( 22 , len ) ) ;",1
"memcpy ( buf , test_cases [ i ] .pack , test_cases [ i ] .pack_len ) ;",1
"memcpy ( buf , test_cases[i].pack , test_cases[i].pack_len ) ;",1
"memcpy ( buffer [ i ] .freed_by , callers , sizeof ( void * ) * STACK_DEPTH ) ",1
"memcpy ( buffer [ i ] .freed_by , callersr , sizeof ( void * ) * STACK_DEPTHr ) ",1
"memcpy ( buffer [ j ] .freed_byer , callersert , sizeof ( void * ) * STACK_DEPTHt ) ",1
"memcpy ( data , readptr , r_len ) ;",1
"memcpy ( dest , src , size ) ;",1
"memcpy ( dst , ainfo -> ai_addr , len ) ;",1
"memcpy ( esp_frame.eff ? &esp_frame.extended.data : &esp_frame.standard.data , frame -> data , ESP_CAN_MAX_DATA_LEN ) ;",1
"memcpy ( frame.data , &esp_frame.extended.data , CAN_MAX_DLEN ) ;",1
"memcpy ( laddr.sin6_addr.s6_addr , iface_addr , 16 ) ;",1
"memcpy ( msg -> hdr.ip6_src.s6_addr , iface_addr , 16 ) ;",1
"memcpy ( output_file.s , optarg , output_file.length + 1 ) ;",1
"memcpy ( packet , &msg -> hdr , sizeof ( struct ip6_hdr ) ) ;",1
"memcpy ( packet , &msg -> ip6_hdr , sizeof ( struct ip6_hdr ) ) ;",1
"memcpy ( packet , &msg->ip6_hdr , sizeof ( struct ip6_hdr ) ) ;",1
"memcpy ( packet , cur -> hdr.data , cur -> len ) ;",1
"memcpy ( packet , msg -> data , msg -> data_len ) ;",1
"memcpy ( payload -> data , data , len ) ;",1
"memcpy ( payload -> resource_key , key , sizeof ( cp_key_t ) ) ;",1
"memcpy ( ptr , desired , len ) ;",1
"memcpy ( ptr , val , size ) ;",1
"memcpy ( ret , ptr , size ) ;",1
"memcpy ( s -> token , request -> hdr -> token , request -> hdr -> token_length ) ;",1
"memcpy ( test_payload -> data , data , len ) ;",1
"memcpy ( uri -> resource_key , key , sizeof ( cp_key_t ) ) ;",1
"memcpy ( writeptr , data , w_len ) ;",1
"memset ( & ( m_tx_buffer [ m_tx_insert_index ] ) , 0 , sizeof ( m_tx_buffer ) /sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer1 [ m_tx_insert_index1 ] ) , 0 , sizeof ( m_tx_buffer1 ) /sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer10[m_tx_insert_index] ) , 0 , sizeof ( m_tx_buffer10 ) / sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer1[m_tx_insert_index] ) , 0 , sizeof ( m_tx_buffer1 ) / sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer2[m_tx_insert_index] ) , 0 , sizeof ( m_tx_buffer2 ) / sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer3[m_tx_insert_index] ) , 0 , sizeof ( m_tx_buffer3 ) / sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer4[m_tx_insert_index] ) , 0 , sizeof ( m_tx_buffer4 ) / sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer5[m_tx_insert_index] ) , 0 , sizeof ( m_tx_buffer5 ) / sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer6[m_tx_insert_index] ) , 0 , sizeof ( m_tx_buffer6 ) / sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer7[m_tx_insert_index] ) , 0 , sizeof ( m_tx_buffer7 ) / sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer8[m_tx_insert_index] ) , 0 , sizeof ( m_tx_buffer8 ) / sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer9[m_tx_insert_index] ) , 0 , sizeof ( m_tx_buffer9 ) / sizeof ( tx_message_t ) ) ;",1
"memset ( & ( m_tx_buffer[m_tx_insert_index] ) , 0 , sizeof ( m_tx_buffer ) / sizeof ( tx_message_t ) ) ;",1
"memset ( ( void * ) UIP_ICMP_BUF + UIP_ICMPH_LEN , 0 , 4 ) ;",1
"memset ( ( void * ) UIP_ICMP_BUF + UIP_ICMPH_LEN , count , PING6_DATALEN ) ;",1
"memset ( ( void * ) UIP_ICMP_BUF + UIP_ICMPH_LEN , counter , PING6_DATALENr ) ;",1
"memset ( ( void * ) UIP_ICMP_BUF + UIP_ICMPH_LENr , 0 , 5 ) ;",1
"memset ( ( void * ) UIP_ICMP_BUFg + UIP_ICMPH_LENg , 0 , 6 ) ;",1
"memset ( ( void * ) UIP_ICMP_BUFg + UIP_ICMPH_LENg , count , PING6_DATALENg ) ;",1
memset ( ( void1 * ) ) ;,1
memset ( ( void2 * ) ) ;,1
"memset ( AInterfaces , sizeof ( Ainterfaces ) , 0 );",1
"memset ( BpInterfaces , sizeof ( BpInterfaces ) , 0 );",1
"memset ( CInterfaces , sizeof ( Cinterfaces ) , 0 );",1
"memset ( DInterfaces , sizeof ( Dinterfaces ) , 0 );",1
"memset ( FInterfaces , sizeof ( Finterfaces ) , 0 );",1
"memset ( QInterfaces , sizeof ( Qinterfaces ) , 0 );",1
"memset ( addr-> s6_addr12 , 0 , 0 ) ;",1
"memset ( addr-> s6_addr13 , 0 , 0 ) ;",1
"memset ( addr1 -> s6_add1r , 0 , 0 ) ;",1
"memset ( addr2 -> s6_addr2 , 0 , 0 ) ;",1
"memset ( addr3 -> s6_addr3 , 0 , 0 ) ;",1
"memset ( addr4 -> s6_addr4 , 0 , 0 ) ;",1
"memset ( addr4 -> s6_address4 , 0 , 0 ) ;",1
"memset ( addr5 -> s6_addr5 , 0 , 0 ) ;",1
"memset ( addr6 -> s6_addr6 , 0 , 0 ) ;",1
"memset ( addr7 -> s6_addr7 , 0 , 0 ) ;",1
"memset ( frame , 0 , sizeof ( frame ) ) ;",1
"memset ( frame , 0 , sizeof ( frame ) ) ; ",1
"memset ( frame , 0 , sizeof ( frame_Value ) ) ; ",1
"memset ( framem , 0 , sizeof ( framem ) ) ;",1
"memset ( framemd , 0 , sizeof ( framemd ) ) ;",1
"memset ( framemr , 0 , sizeof ( framemr ) ) ;",1
"memset ( pInterfaces , sizeof ( pInterfaces ) , 0 );",1
message_t* m_ptr ; ,1
message_t* m_ptrData ; ,1
message_t* m_ptrDate ; ,1
message_t* m_ptrME ; ,1
message_t* m_ptrName ; ,1
message_t* m_ptrValue ; ,1
message_t* m_ptr_Value ; ,1
modclk = atoi ( argv [ 1 ] ) ;,1
modclk = atoi ( argv1 [ 1 ] ) ;,1
modclk = atoi ( argv2 [ 1 ] ) ;,1
"mode_t EXFUN ( umask , ( mode_t __mask ) ) ;",1
"mode_t EXFUN ( umask , ( mode_t __maskVALUE ) ) ;",1
"mode_t EXFUN ( umask2 , ( mode_t __mask2 ) ) ;",1
"mode_t EXFUN ( umask2 , ( mode_t __maskVALUE2 ) ) ;",1
"mode_t EXFUN ( umask3 , ( mode_t __mask3 ) ) ;",1
"mode_t EXFUN ( umask3 , ( mode_t __maskVALUE3 ) ) ;",1
mode_t umaskA ( mode_t ) ;,1
mode_t umaskA ( mode_tVALUE ) ;,1
mode_t umaskB ( mode_t1 ) ;,1
mode_t umaskB ( mode_tVALUE1 ) ;,1
mode_t umaskC ( mode_t 2) ;,1
mode_t umaskC ( mode_tVALUE2) ;,1
mode_t umaskD ( mode_t12 ) ;,1
mode_t umaskD ( mode_tVALUE12 ) ;,1
mode_t umaskE ( mode_t3 ) ;,1
mode_t umaskE ( mode_tVALUE3 ) ;,1
mode_t umaskF ( mode_t13 ) ;,1
mode_t umaskF ( mode_tVALUE13 ) ;,1
"move = std::move ( from_cster ) ; CU_ASSERT ( "" alphae "" == move ) ; CU_ASSERT ( 5 == move.size ( ) ) ; CU_ASSERTed ( "" "" == from_cstre ) ; CU_ASSERT ( 0 == from_cstr.size ( ) ) ;",1
"move = std::move ( from_cster ) ; CU_ASSERT ( "" alphae3 "" == move ) ; CU_ASSERT3 ( 5 == move.size ( ) ) ; CU_ASSERTed3 ( "" "" == from_cstre3 ) ; CU_ASSERT ( 0 == from_cstr.size ( ) ) ;",1
"move = std::move ( from_cstr ) ; CU_ASSERT ( "" alpha "" == move ) ; CU_ASSERT ( 5 == move.size ( ) ) ; CU_ASSERT ( "" "" == from_cstr ) ; CU_ASSERT ( 0 == from_cstr.size ( ) ) ;",1
"move = std::move ( from_cstr ) ; CU_ASSERTf ( "" "" == from_cstr ) ;",1
"move = std::move ( from_cstr ) ; CU_ASSERTfl ( "" "" == from_cstr ) ;",1
"move = std::move ( from_cstr ) ; CU_ASSERTfu ( "" "" == from_cstr ) ;",1
"move = std::move ( from_cstr ) ; CU_ASSERTfum ( "" "" == from_cstr ) ;",1
"move = std::move ( from_cstr ) ; CU_ASSERTqw ( "" "" == from_cstr ) ;",1
"move = std::move ( from_cstr ) ; CU_ASSERTw ( "" "" == from_cstr ) ;",1
"move = std::move ( from_cstr1 ) ; CU_ASSERTe ( "" "" == from_cstr1 ) ;",1
"move = std::move ( from_cstr1 ) ; CU_ASSERTty ( "" "" == from_cstr1 ) ;",1
"move = std::move ( from_cstr1 ) ; CU_ASSERTw ( "" "" == from_cstr1 ) ;",1
"move = std::move ( from_cstr1 ) ; CU_ASSERTyj ( "" "" == from_cstr1 ) ;",1
"move = std::move ( from_cstrd ) ; CU_ASSERTwe ( "" "" == from_cstrd ) ;",1
"move = std::move ( from_cstrd ) ; CU_ASSERTwek ( "" "" == from_cstrd ) ;",1
"move = std::move ( from_cstrd1 ) ; CU_ASSERT4r ( "" "" == from_cstrd1 ) ;",1
"move = std::move ( from_cstrd1 ) ; CU_ASSERTy ( "" "" == from_cstrd1 ) ;",1
mt32_next_state ( random ) ;,1
mt32_t *random,1
namespace C { void bad ( ) { if ( STATIC_CONST_TRUE ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace C { void bad ( ) { if ( STATIC_CONST_TRUE1 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace C { void bad ( ) { if ( STATIC_CONST_TRUE2 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace C { void bad ( ) { if ( STATIC_CONST_TRUE3 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace C { void bad ( ) { if ( STATIC_CONST_TRUE4 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
"namespace CW { GG2B::CWE134_Uncontrolled GG2B ( char * dataCopy ) { data = dataCopy ; strcpy ( data , "" fixedstringtest "" ) ; } staticvoid GG2BVaSink ( char * data , ... ) { { char dest [ 100 ] = "" "" ; va_list args ; va_start ( args , data ) ; vsnprintf ( dest , 100-1 , data , args ) ; va_end ( args ) ; print Line ( dest ) ; } } ",0
namespace CW { class CWE GG2B : public CW base { public:void action ( char * data_Value ) const ; } ; } ,0
namespace CW { class CWE126 GG2B : public CW base { public:void action ( char * data ) const ; } ; } ,0
namespace CW { class CWE126 GG2B : public CWE126 base { public:void action ( char * data_Value01 ) const ; } ; } ,0
"namespace CW { class GClass { public: GClass ( char * name ) { this -> name = ( char * ) calloc ( strlen ( name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , name ) ; } ~GClass ( ) { free ( name ) ; } GClass ( GClass &GClassObject ) { this -> name = ( char * ) calloc ( strlen ( GClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , GClassObject.name ) ; } GClass& operator = ( const GClass &GClassObject ) { if ( &GClassObject != this ) { this -> name = ( char * ) calloc ( strlen ( GClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , GClassObject.name ) ; } return *this ; } void print Name ( ) { print Line ( name ) ; } private: char * name ; } ; staticvoid G1 ( ) { GClass GClassObject ( "" GClass "" ) ; GClassObject.print Name ( ) ; } ",0
"namespace CW { staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = '",0
namespace CW { staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',0
"namespace CW { staticvoid GB2GVaSink ( char * data , ... ) { { char dest [ 100 ] = "" "" ; va_list args ; va_start ( args , data ) ; vsnprintf ( dest , 100-1 , "" %s "" , args ) ; va_end ( args ) ; print Line ( dest ) ; } } ",0
"namespace CW { staticvoid GG2B ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",0
"namespace CW { staticvoid GG2BVaSink ( char * data , ... ) { { char dest [ 100 ] = "" "" ; va_list args ; va_start ( args , data ) ; vsnprintf ( dest , 100-1 , data , args ) ; va_end ( args ) ; print Line ( dest ) ; } } ",0
"namespace CW { void CWE134 GB2G::action ( char * data ) const { fprintf ( stdout , "" %s "" , data ) ; } } ",0
"namespace CW { void GG2B::action ( char * data ) const { EXECL ( COMMAND_ int _PATH , COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL ) ; } } ",0
"namespace CW { void GG2B::action ( char * data ) const { EXECLP ( COMMAND_ int , COMMAND_ int , COMMAND_ARG1 , COMMAND_ARG3 , NULL ) ; } } ",0
"namespace CW { void GG2B::action ( char * data ) const { { char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",0
"namespace CW { void GG2B::action ( char * data ) const { { memset ( dest , 'C' , 100-1 ) ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",0
"namespace CW { void GG2B::action ( char * data ) const { { size_t i , destLen ; char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",0
"namespace CW { void GG2B::action ( char * data ) { EXECL ( COMMAND_ int _PATH , COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL ) ; } } ",0
"namespace CW { void GG2B::action ( char * data ) { EXECLP ( COMMAND_ int , COMMAND_ int , COMMAND_ARG1 , COMMAND_ARG3 , NULL ) ; } } ",0
"namespace CW { void GG2B::action ( char * data ) { { char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",0
"namespace CW { void GG2B::action ( char * data ) { { memset ( dest , 'C' , 100-1 ) ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",0
"namespace CW { void GG2B::action ( char * data ) { { size_t i , destLen ; char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",0
namespace CW { void bad ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace CW { void bad ( ) { if ( staticReturnsTrue ( ) ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace CW06 { void bad ( ) { if ( STATIC_CONST_Six == 6 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace CW07 { void bad ( ) { if ( STATIC_CONST7== 7 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace CW07 { void bad ( ) { if ( STATIC_CONST7== 7 ) { { char charBuffer [ CHAR_BUFFER_SIZEValue ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace CW08{ void bad ( ) { if ( STATIC_CONST8 ==8 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace CW09{ void bad ( ) { if ( STATIC_CONST9 == 9 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace CW10 { void bad ( ) { if ( STATIC_CONST10 == 10 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace CW11 { void bad ( ) { if ( STATIC_CONST == 11 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace CW14 { void bad ( ) { if ( STATIC_CONST12 == 12 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
"namespace CWE { staticvoid GG2B ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",0
namespace CWE0.476 { class CWE0.476 { public: virtualvoid action ( wchar_t * data66 ) const = 0 ; } ;class bad : public CWE0.476 { public:void action ( wchar_t * data66 ) const ; } ;,0
namespace CWE0.476 { void bad ( ) { char * data ;data = NULL ;const bad ( ) ; baseObject.action ( data ) ; } ,0
namespace CWE0.476 { void bad::action ( char * data ) const { print HexCharLine ( data [ 0 ] ) ; } } ,0
namespace CWE0.476 { void bad::action ( char * data ) { print HexCharLine ( data [ 0 ] ) ; } } ,0
namespace CWE0.476 { void bad::action ( int 64_t * data ) const { print LongLongLine ( *data ) ; } } ,0
namespace CWE0.476 { void bad::action ( int 64_t * data2 ) const { print LongLongLine ( *data2 ) ; } } ,0
namespace CWE0.476 { void bad::action ( int 64_t * data3 ) const { print LongLongLine ( *data3 ) ; } } ,0
namespace CWE0.476 { void bad::action ( two int sStruct * data ) const { print int Line ( data -> int One ) ; } } ,0
namespace CWE0.476 { void bad::action ( two int sStruct * data4 ) const { print int Line ( data4 -> int One ) ; } } ,0
namespace CWE0.476 { void bad::action ( two int sStruct * data5 ) const { print int Line ( data5 -> int One ) ; } } ,0
namespace CWE0.476_ { void bad::action ( wchar_t * data33 ) const { print WcharLine ( data336 [ 0 ] ) ; } } ,0
"namespace CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84 { CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_GB2G::CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_GB2G ( int 64_t dataCopy ) { data = dataCopy ; fscanf ( stdin , "" % "" SCNd64 , &data ) ; } CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_GB2G::~CWE190_ int eger_Overflow__ int 64_t_fscanf_multiply_84_GB2G ( ) { if ( data > 0 ) { if ( data < ( LLONG_MAX/2 ) ) { int 64_t result = data * 2 ; print LongLongLine ( result ) ; } else { print Line ( "" data value is too large to perform arithmetic safely. "" ) ; } } } } ",0
"namespace CWE190_ int eger_Overflow__ int _connect_socket_add_81 { void CWE190_ int eger_Overflow__ int _connect_socket_add_81_GB2G::action ( int data ) const { if ( data < int _MAX ) { int result = data + 1 ; print int Line ( result ) ; } else { print Line ( "" data value is too large to perform arithmetic safely. "" ) ; } } } ",0
"namespace CWE190_ int eger_Overflow__char_fscanf_square_82 { void CWE190_ int eger_Overflow__char_fscanf_square_82_GB2G::action ( char data ) { if ( abs ( ( long ) data ) < = ( long ) sqrt ( ( double ) CHAR_MAX ) ) { char result = data * data ; print HexCharLine ( result ) ; } else { print Line ( "" data value is too large to perform arithmetic safely. "" ) ; } } } ",0
"namespace CWE190_ int eger_Overflow__char_max_add_81 { void CWE190_ int eger_Overflow__char_max_add_81_GB2G::action ( char data ) const { if ( data < CHAR_MAX ) { char result = data + 1 ; print HexCharLine ( result ) ; } else { print Line ( "" data value is too large to perform arithmetic safely. "" ) ; } } } ",0
"namespace CWE369_Divide_by_Zero__float_connect_socket_81 { void CWE369_Divide_by_Zero__float_connect_socket_81_GB2G::action ( float data ) const { if ( fabs ( data ) > 0.000001 ) { int result = ( int ) ( 100.0 / data ) ; print int Line ( result ) ; } else { print Line ( "" This would result in a divide by zero "" ) ; } } } ",0
"namespace CWE369_Divide_by_Zero__float_connect_socket_82 { void CWE369_Divide_by_Zero__float_connect_socket_82_GB2G::action ( float data ) { if ( fabs ( data ) > 0.000001 ) { int result = ( int ) ( 100.0 / data ) ; print int Line ( result ) ; } else { print Line ( "" This would result in a divide by zero "" ) ; } } } ",0
"namespace CWE369_Divide_by_Zero__float_connect_socket_83 { CWE369_Divide_by_Zero__float_connect_socket_83_GB2G::CWE369_Divide_by_Zero__float_connect_socket_83_GB2G ( float dataCopy ) { data = dataCopy ; { #ifdef _WIN32 WSADATA wsaData ; int wsaDataInit = 0 ; #endif int recvResult ; struct sockaddr_in service ; SOCKET connectSocket = INVALID_SOCKET ; char inputBuffer [ CHAR_ARRAY_SIZE ] ; do { #ifdef _WIN32 if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , &wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; #endif connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( &service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr* ) &service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '",0
namespace CWE415_Double_Free__malloc_free_char_81 { void CWE415_Double_Free__malloc_free_char_81_GB2G::action ( char * data ) const { } } ,0
"namespace CWE665_Improper_Initialization__char_cat_82 { void CWE665_Improper_Initialization__char_cat_82_GG2B::action ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",0
namespace CWE665_Improper_Initialization__char_ncat_81 { staticvoid GG2B ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data [ 0 ] = ',0
namespace CWE676 { void bad ( ) { if ( STATIC_CONST_TRUE ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace C{ void bad ( ) { if ( STATIC_CONST_TRUE5 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
namespace Return_of_Stack_Variable_Address__return_local_class_member_01 { class HelperClass { private: int int Array [ 2 ] ; public: HelperClass ( ) { int Array [ 0 ] = 0x41 ; int Array [ 1 ] = 0x42 ; } const int *get int Array ( ) { return int Array ; } } ; static const int *helperG1 ( ) { static HelperClass HelperClass ; return HelperClass.get int Array ( ) ; } ,0
namespace char_calloc_81 { void char_calloc_81_GB2G::action ( char * data ) const { free ( data ) ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GB2G::action ( char * data_Value03 ) const { free ( data_Value03 ) ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GB2G::action ( char * data_Value08 ) const { free ( data_Value08 ) ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GB2G::action ( char * data_value23 ) const { free ( data_value23 ) ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GB2G::action ( char * data_value55 ) const { free ( data_value55 ) ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GB2G::action ( char * data_valueq ) const { free ( data_valueq ) ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GB2G::action ( char * data_valuex ) const { free ( data_valuex ) ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GB2G::action ( char * datavalue11 ) const { free ( data_value11) ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GG2B::action ( char * data ) const { ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GG2B::action ( char * data_Value02 ) const { ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GG2B::action ( char * data_Value06 ) const { ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GG2B::action ( char * data_value22 ) const { ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GG2B::action ( char * data_value78 ) const { ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GG2B::action ( char * data_valueq ) const { ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GG2B::action ( char * data_valuex ) const { ; } } ,0
namespace char_calloc_81 { void char_calloc_81_GG2B::action ( char * datavalue88 ) const { ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GB2G::action ( char * data ) { free ( data ) ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GB2G::action ( char * data_Value01 ) { free ( data_Value01 ) ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GB2G::action ( char * data_Value03 ) { free ( data_Value03 ) ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GB2G::action ( char * data_value020 ) { free ( data_value20 ) ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GB2G::action ( char * data_value56 ) { free ( data56 ) ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GB2G::action ( char * data_valueq ) { free ( data_valueq ) ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GB2G::action ( char * data_valuex ) { free ( data ) ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GB2G::action ( char * datavalue99 ) { free ( datavalue99 ) ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GG2B::action ( char * data ) { ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GG2B::action ( char * data_Value ) { ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GG2B::action ( char * data_Value005 ) { ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GG2B::action ( char * data_Value05 ) { ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GG2B::action ( char * data_value21 ) { ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GG2B::action ( char * data_value44 ) { ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GG2B::action ( char * data_valueq ) { ; } } ,0
namespace char_calloc_82 { void char_calloc_82_GG2B::action ( char * datavalue78 ) { ; } } ,0
"namespace char_calloc_83 { char_calloc_83_GB2G:: char_calloc_83_GB2G ( char * dataCopy ) { data = dataCopy ; data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_83_GB2G::~ char_calloc_83_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_83 { char_calloc_83_GB2G:: char_calloc_83_GB2G ( char * dataCopy ) { data = dataCopy ; data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_83_GB2G::~ char_calloc_83_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_83 { char_calloc_83_GB2G:: char_calloc_83_GB2G ( char * dataCopy ) { data = dataCopy ; data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_83_GB2G::~ char_calloc_83_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_83 { char_calloc_83_GB2G:: char_calloc_83_GB2G ( char * dataCopy ) { data = dataCopy ; data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_83_GB2G::~ char_calloc_83_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_83 { char_calloc_83_GB2G:: char_calloc_83_GB2G ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_83_GB2G::~ char_calloc_83_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_83 { char_calloc_83_GB2G:: char_calloc_83_GB2G ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_83_GB2G::~ char_calloc_83_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_83 { char_calloc_83_GB2G:: char_calloc_83_GB2G ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_83_GB2G::~ char_calloc_83_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_83 { char_calloc_83_GB2G:: char_calloc_83_GB2G ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_83_GB2G::~ char_calloc_83_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_83 { char_calloc_83_GG2B:: char_calloc_83_GG2B ( char * dataCopy ) { data = dataCopy ; data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_83_GG2B::~ char_calloc_83_GG2B ( ) { ; } } ",0
"namespace char_calloc_84 { char_calloc_84_GB2G:: char_calloc_84_GB2G ( char * dataCopy ) { data = dataCopy ; data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_84_GB2G::~ char_calloc_84_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_84 { char_calloc_84_GB2G:: char_calloc_84_GB2G ( char * dataCopy ) { data = dataCopy ; data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_84_GB2G::~ char_calloc_84_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_84 { char_calloc_84_GB2G:: char_calloc_84_GB2G ( char * dataCopy ) { data = dataCopy ; data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_84_GB2G::~ char_calloc_84_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_84 { char_calloc_84_GB2G:: char_calloc_84_GB2G ( char * dataCopy ) { data = dataCopy ; data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_84_GB2G::~ char_calloc_84_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_84 { char_calloc_84_GB2G:: char_calloc_84_GB2G ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_84_GB2G::~ char_calloc_84_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_84 { char_calloc_84_GB2G:: char_calloc_84_GB2G ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_84_GB2G::~ char_calloc_84_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_84 { char_calloc_84_GB2G:: char_calloc_84_GB2G ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_84_GB2G::~ char_calloc_84_GB2G ( ) { free ( data ) ; } } ",0
"namespace char_calloc_84 { char_calloc_84_GB2G:: char_calloc_84_GB2G ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } char_calloc_84_GB2G::~ char_calloc_84_GB2G ( ) { free ( data ) ; } } ",0
namespace char_cat_81 { staticvoid GG2B ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ;data [ 0 ] = ',0
namespace char_cat_82 { class char_cat_82_base { public: virtualvoid action ( char * data ) = 0 ; } ; class CWE665_Improper_Initialization__char_cat_82_GG2B : public CWE665_Improper_Initialization__char_cat_82_base { public:void action ( char * data ) ; } ;,0
"namespace char_ncat_81 { void char_ncat_81_GG2B::action ( char * data ) const { { size_t sourceLen ; char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",0
namespace int _82 { void int _82_GB2G::action ( int * data ) { } } ,0
"namespace nvs { esp_err_t nvs_flash_write ( size_t destAddr , constvoid *srcAddr , size_t size ) { if ( EncrMgr::isEncrActive ( ) ) { auto encrMgr = EncrMgr::getInstance ( ) ; auto xtsCtxt = encrMgr -> findXtsCtxtFromAddr ( destAddr ) ; if ( xtsCtxt ) { u int 8_t* buf = static_cast<u int 8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr , size ) ; auto err = encrMgr -> encryptNvsData ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_flash_write ( destAddr , buf , size ) ; delete buf ; return err ; } } return S_flash_write ( destAddr , srcAddr , size ) ; } ",1
"namespace nvs { esp_err_t nvs_flash_write ( size_t destAddr5 , constvoid *srcAddr5 , size_t size ) { if ( EncrMgr::isEncrActive ( ) ) { auto encrMgr5 = EncrMgr::getInstance ( ) ; auto xtsCtxt = encrMgr -> findXtsCtxtFromAddr ( destAddr ) ; if ( xtsCtxt ) { u int 8_t* buf = static_cast<u int 8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr , size ) ; auto err = encrMgr -> encryptNvsData ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_flash_write ( destAddr , buf , size ) ; delete buf ; return err ; } } return S_flash_write ( destAddr , srcAddr , size ) ; } ",1
"namespace nvs { esp_err_t nvs_flash_write4 ( size_t destAddr4 , constvoid *srcAddr4 , size_t size ) { if ( EncrMgr::isEncrActive ( ) ) { auto encrMgr = EncrMgr::getInstance ( ) ; auto xtsCtxt = encrMgr -> findXtsCtxtFromAddr ( destAddr ) ; if ( xtsCtxt ) { u int 8_t* buf = static_cast<u int 8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr , size ) ; auto err = encrMgr -> encryptNvsData ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_flash_write ( destAddr , buf , size ) ; delete buf ; return err ; } } return S_flash_write ( destAddr , srcAddr , size ) ; } ",1
"namespace nvsr { esp_err_t nvs_flash_write ( size_t destAddr , constvoid *srcAddrr , size_tr size ) { if ( EncrMgr::isEncrActive ( ) ) { auto encrMgr = EncrMgr::getInstancr ( ) ; auto xtsCtxt = encrMgr -> findXtsCtxtFromAddr ( destAddr ) ; if ( xtsCtxt ) { u int 8_t* buf = static_cast<u int 8_t*> ( malloc ( size ) ) ; memcpy ( buf , srcAddr , size ) ; auto err = encrMgr -> encryptNvsData ( buf , destAddr , size , xtsCtxt ) ; if ( err != ESP_OK ) { return err ; } err = S_flash_write ( destAddr , buf , size ) ; delete buf ; return err ; } } return S_flash_write ( destAddr , srcAddr , size ) ; } ",1
namespace wchar_t_ncat_81 { staticvoid GG2B ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; data [ 0 ] = L',0
"namespace wchar_t_ncat_81 { void wchar_t_ncat_81_GG2B::action ( wchar_t * data ) const { { size_t sourceLen ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100-1 ) ; source [ 100-1 ] = L'",0
"namespacechar_cat_81 { void char_cat_81_GG2B::action ( char * data ) const { { char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",0
native_id = atol ( optarg ) ;,1
native_rng_seed = atol ( optarg ) ;,1
"new_response ( cp_context_t *ctx , cp_queue_t *node , unsigned int code ) { cp_pdu_t *pdu = new_ack ( ctx , node ) ; ",1
"node ( unsigned short key , unsigned int length , char *data ) { coap_option *option ; option = coap_malloc ( sizeof ( coap_option ) + length ) ; if ( !option ) goto error ; node = coap_new_listnode ( option , NULL ) ; if ( node ) return node ; error: coap_free ( option ) ; return NULL ; } ",0
noise_hash -> size = NOISE_DEFAULT_ELEMENT_SIZE ; noise_hash -> elements = ( char * ) malloc ( sizeof ( char ) *noise_hash -> size ) ;,1
noise_hash1 -> size = NOISE_DEFAULT_ELEMENT_SIZE ; noise_hash1 -> elements = ( char * ) malloc ( sizeof ( char ) *noise_hash1 -> size ) ;,1
noise_hashD -> size = NOISE_DEFAULT_ELEMENT_SIZE ; noise_hashD -> elements = ( char * ) malloc ( sizeof ( char ) *noise_hashD -> size ) ;,1
noise_hashDash -> size = NOISE_DEFAULT_ELEMENT_SIZE ; noise_hashDash1 -> elements = ( char * ) malloc ( sizeof ( char ) *noise_hashDash -> size ) ;,1
nresp = packet_get_int ( ) ; if ( nresp > 0 ) { response = xmalloc ( nresp*sizeof ( char* ) ) ; for ( i = 0 ; i < nresp ; i++ ) response[i] = packet_get_string ( NULL ) ; } ,1
nresp = packet_get_int ( ) ; if ( nresp > 0 ) { response1 = xmalloc ( nresp*sizeof ( char* ) ) ; for ( k = 0 ; k < nresp ; k++ ) response1[k] = packet_get_string ( NULL ) ; } ,1
nresp = packet_get_int ( ) ; if ( nresp > 0 ) { response2 = xmalloc ( nresp*sizeof ( char* ) ) ; for ( j = 0 ; j < nresp ; j++ ) response2[j] = packet_get_string ( NULL ) ; } ,1
nresp = packet_get_int ( ) ; if ( nresp > 0 ) { response3 = xmalloc ( nresp*sizeof ( char* ) ) ; for ( h = 0 ; h < nresp ; h++ ) response3[h] = packet_get_string ( NULL ) ; } ,1
nresp = packet_get_int ( ) ; if ( nresp > 0 ) { response4 = xmalloc ( nresp*sizeof ( char* ) ) ; for ( g = 0 ; g < nresp ; g++ ) response4[g] = packet_get_string ( NULL ) ; } ,1
nresp = packet_get_int ( ) ; if ( nresp > 0 ) { response5 = xmalloc ( nresp*sizeof ( char* ) ) ; for ( f = 0 ; f < nresp ; f++ ) response5[f] = packet_get_string ( NULL ) ; } ,1
"oid bad ( ) { list< int > data ; data.push_back ( 100 ) ; data.push_back ( 0 ) ; { list< int > ::iterator i ; cout << "" The list contains: "" ; for ( i = data.begin ( ) ; i != data.end ( ) ; i++ ) { if ( !*i ) { data.clear ( ) ; } cout << "" "" << *i ; } cout << endl ; } } ",1
"ot_id ( cp_queue_t *lhs , cp_queue_t *rhs ) { return ( lhs && rhs && lhs -> pdu && rhs -> pdu && ( lhs -> id < rhs -> id ) ) ? -1 : 1 ; } ",1
"pDriver -> pIntera = pInter ; if ( pIntera ! = 0 ) { memset ( pIntera , sizeof ( pIntera ) , 0 ) ; }",1
"pDriver -> pIntera1 = pIntera1 ; if ( pIntera1 ! = 0 ) { memset ( pIntera1 , sizeof ( pIntera1 ) , 0 ) ; }",1
"pDriver -> pInterd = pInterd ; if ( pInterd ! = 0 ) { memset ( pInterd , sizeof ( pInterd ) , 0 ) ; }",1
"pDriver -> pInterd1 = pInterd1 ; if ( pInterd1 ! = 0 ) { memset ( pInterd1 , sizeof ( pInterd1 ) , 0 ) ; }",1
"pDriver -> pInterf = pInterf ; if ( pInterf ! = 0 ) { memset ( pInterf , sizeof ( pInterf ) , 0 ) ; }",1
"pDriver -> pInterf1 = pInterf1 ; if ( pInterf1 ! = 0 ) { memset ( pInterf1 , sizeof ( pInterf1 ) , 0 ) ; }",1
"pDriver -> pInterg = pInterg ; if ( pInterg ! = 0 ) { memset ( pInterg , sizeof ( pInterg ) , 0 ) ; }",1
"pDriver -> pInterg1 = pInterg1 ; if ( pInterg1 ! = 0 ) { memset ( pInterg1 , sizeof ( pInterg1 ) , 0 ) ; }",1
"pDriver -> pInters = pInters ; if ( pInters ! = 0 ) { memset ( pInters , sizeof ( pInters ) , 0 ) ; }",1
"pDriver -> pInters1 = pInters1 ; if ( pInters1 ! = 0 ) { memset ( pInters1 , sizeof ( pInters1 ) , 0 ) ; }",1
"p_temp = temporary ; memcpy ( p, pa -> mode & MAC ? pa -> temp_key -> value : pa -> key, ATCA_KEY_SIZE ) ; p_temp + = ATCA_KEY_SIZE",1
"p_temp1 = temporary ; memcpy ( p1, pa -> mode & MAC1 ? pa -> temp_key -> value : pa -> key, ATCA_KEY_SIZE ) ; p_temp + = ATCA_KEY_SIZE ; ",1
"p_temp2 = temporary ; memcpy ( p2, pa -> mode & MAC2 ? pa -> temp_key -> value : pa -> key, ATCA_KEY_SIZE ) ; p_temp + = ATCA_KEY_SIZE ; ",1
"p_temp3 = temporary ; memcpy ( p3, pa -> mode & MAC3 ? pa -> temp_key -> value : pa -> key, ATCA_KEY_SIZE ) ; p_temp + = ATCA_KEY_SIZE ; ",1
"p_temp4 = temporary ; memcpy ( p4, pa -> mode & MAC4 ? pa -> temp_key -> value : pa -> key, ATCA_KEY_SIZE ) ; p_temp + = ATCA_KEY_SIZE ; ",1
period_certification ( random ) ;,1
pll_i2s_input = atoi ( argv [ 5 ] ) ;,1
pll_i2s_q_out = atoi ( argv [ 6 ] ) ; ,1
pll_sai_q_out = atoi ( argv [ 7 ] ) ;,1
"printf ( "" "" , ( uint32_t ) , ( update_diff/1000LL ) , ( master_time_diff/1000LL ) ) ; ",1
"printf ( "" "" , uip_ipaddr_to_quad ( & ( ( struct uip_udpip_hdr * ) &uip_buf [ UIP_LLH_LEN ] ) -> srcipaddr ) , ( char * ) uip_appdata ) ;",1
"printf ( "" "" , uip_ipaddr_to_quad ( &addr ) ) ;",1
"printf ( "" "" , uip_ipaddr_to_quad ( &s -> default_router ) ) ;",1
"printf ( "" "" , uip_ipaddr_to_quad ( &s -> dnsaddr ) ) ;",1
"printf ( "" "" , uip_ipaddr_to_quad ( &s -> ipaddr ) ) ;",1
"printf ( "" "" , uip_ipaddr_to_quad ( &s -> netmask ) ) ;",1
"printf ( "" "" , uip_ipaddr_to_quad ( &uip_hostaddr ) , uip_ipaddr_to_quad ( &addr ) ) ;",1
"printf ( "" %c "" , ent_char ) ;",1
"printf ( "" %c "" , ent_char_Value ) ;",1
"printf ( "" %d "" , desiredFreq ) ;",1
"printf ( "" %d "" , ent_dec_neg ) ;",1
"printf ( "" %d "" , ent_dec_pos ) ; ",1
"printf ( "" %ld "" , ent_slong ) ;",1
"printf ( "" %x "" , i , test_cases [i] .result_rv , flags ) ; ",1
"printf ( "" 1er char :%c "" , tab_char [ 0 ] ) ;",1
"printf ( "" 2eme char :%c "" , tab_char [ 1 ] ) ;",1
"printf ( "" 3eme char :%c "" , tab_char [ 2 ] ) ;",1
"printf ( "" > "" ) ;",1
"printf ( "" Counter: %lu "" , counter++ ) ;",1
"printf ( "" Destination PAN: 0x%02hx "" , destPan ) ; ",1
"printf ( "" Destination address: 0x%04hx "" , saddr ) ;",1
"printf ( "" Destination address: 0x%04hx "" , saddr ) ; ",1
"printf ( "" Entrez trois caracteres: "" ) ;",1
"printf ( "" Entrez un char: "" ) ;",1
"printf ( "" Entrez un nombre decimal long: "" ) ;",1
"printf ( "" Entrez un nombre decimal negatif: "" ) ;",1
"printf ( "" Entrez un nombre decimal positif: "" ) ;",1
"printf ( "" Entrez un nombre decimal unsigned long: "" ) ;",1
"printf ( "" Entrez un nombre decimal unsigned short: "" ) ;",1
"printf ( "" Erasing flash memory done..... 100% "" ) ;",1
"printf ( "" Packet format error: read packet length ( %hhx ) is different than expected from frame ( %hhx ) . "" , plen , len ) ;",1
"printf ( "" Sequence number: 0x%hhx "" , seqno ) ; ",1
"printf ( "" Source PAN: 0x%02hx "" , srcPan ) ; ",1
"printf ( "" Value "" , ( update_diff/1000LL ) , ( master_time_diff/1000LL ) ) ; ",1
"printf ( "" Value is: %d "" , array [ index ] ) ;",1
"printf ( "" Value1 "" , ( uint32_t ) , ( master_time_diff/1000LL ) ) ; ",1
"printf ( "" Value2 "" , ( uint32_t ) , ( update_diff/1000LL ) ) ; ",1
"printf ( "" You selected %s "" , items [ index-1 ] ) ;",1
"printf ( "" flags: 0x%x ( 0x%x ) len: %li "" , flags , test [ k ] .result , buf ) ;",1
"printf ( "" flagsValue: 0x%x ( 0x%x ) len: %li "" , flags , test_casesValue [ i ] .result_rv , rv - bufValue ) ;",1
"printf ( "" got: %li "" , K , test_cases [ K ] .result_len , ( rv - buf ) ) ;",1
"printf ( "" got: %li "" , i , test_cases [ i ] .result_len , ( rv - buf ) ) ;",1
"printf ( "" got: %li "" , i , test_cases[i].result_len , ( rv - buf ) ) ; ",1
"printf ( "" n "" , ( uint32_t ) , ( update_diff/1000LL ) , ( master_time_diff/1000LL ) ) ; ",1
"printf ( "" valeur entree: %lu "" , ent_ulong ) ;",1
"printf ( ""%d "" , ActualChannel ) ; ",1
"printf ( ""%d "" , desiredFreq ) ; ",1
"printf ( ""Counter: %lu "" , counter++ ) ; ",1
"printf ( ""Packet format error: read packet length ( %Value ) e ( %hhx ) . "" , plen , len ) ; ",1
"printf ( ""Packet format error: read packet length ( %hhValue ) is different ( %hhx ) . "" , plen , len ) ; ",1
"printf ( ""Packet format error: read packet length ( %hhx ) is different than expected from frame ( %hhx ) . "" , plen , len ) ; ",1
"printf ( ""case %u: Error "" , i ) ; ",1
"printf ( ""flags: 0x%x ( 0x%x ) len: %li "" , flags , test_cases[i].result_rv , rv - buf ) ; ",1
"printf ( FMT , args ... ) ;",1
"printf ( const char * NTS __fmt , ... ) ;",1
"printf ( fmt , ""Reference"" , ""CommPort"" , ""Description"" ) ;",1
"printf ( fmt , i->id.c_str ( ) , comm.c_str ( ) , i->info.c_str ( ) ) ;",1
printf ( print_buf ) ;,1
process ( ) ; t.initialize ( ) ; while ( t->time ( ) < 600 * t->ticksPerSecond ( ) ) { t.checkThrottle ( ) ; sf.process ( ) ; t->runNextEvent ( ) ; } },0
"public class Dead { String glue22 ; public String getGlue ( ) { return "" glue "" ; } } ",1
"public: BadClass4 ( char * name4 ) { this -> name4 = ( char * ) calloc ( strlen ( name4 ) +1 , sizeof ( char ) ) ; if ( this -> name4 == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , name ) ; } ~BadClass ( ) { delete [ ] name ; } BadClass ( BadClass &badClassObject ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name4 == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } BadClass& operator = ( const BadClass &badClassObject ) { if ( &badClassObject != this ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } return *this ; } void print Name ( ) { print Line ( name ) ; } private: char * name ; } ;void bad ( ) { BadClass badClassObject ( "" BadClass "" ) ; badClassObject.print Name ( ) ; } ",1
"public: BadClasst ( char * namet ) { this -> namet = ( char * ) calloc ( strlen ( namet ) +1 , sizeof ( char ) ) ; if ( this -> name4 == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , name ) ; } ~BadClass ( ) { delete [ ] name ; } BadClass ( BadClass &badClassObject ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name4 == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } BadClass& operator = ( const BadClass &badClassObject ) { if ( &badClassObject != this ) { this -> name = ( char * ) calloc ( strlen ( badClassObject.name ) +1 , sizeof ( char ) ) ; if ( this -> name == NULL ) { exit ( -1 ) ; } strcpy ( this -> name , badClassObject.name ) ; } return *this ; } void print Name ( ) { print Line ( name ) ; } private: char * name ; } ;void bad ( ) { BadClass badClassObject ( "" BadClass "" ) ; badClassObject.print Name ( ) ; } ",1
random = random_u int 32 ( ) ;,1
random_pos = ( u int 8_t * ) &random ;,1
"read ( &byte , 0 , 1 ) > 0 ) ",1
"read ( m_fd , buffer+off , len ) ;",1
"read ( serial_fd , inbuf , sizeof ( inbuf ) ",1
"read ( signed char* buffer , int off , int len ) ",1
"read ( signed char* buffer , int off , int len_Value ) ",1
resource_t *r ; ,1
"ret = cle_write_reloc ( segmem + rela.r_offset , &rela , addr , info ) ;",1
"ret = cle_write_reloc ( segmem + rela.r_offsetr , &relar , addrr , infor ) ;",1
"ret = cle_write_reloc ( segmem + rela.r_offseyt , &relay , addr , infoy ) ;",1
"return SEGGER_RTT_vprintf ( BufferIndex1 , sFormat , &ParamList ) ;",1
"return SEGGER_RTT_vprintf ( BufferIndex1 , sFormat1 , &ParamList1 ) ;",1
"return SEGGER_RTT_vprintf ( BufferIndex2 , sFormat , &ParamList ) ;",1
"return SEGGER_RTT_vprintf ( BufferIndex3, sFormat , &ParamList ) ;",1
"return SEGGER_RTT_vprintf ( BufferIndex4 , sFormat , &ParamList ) ;",1
"return SEGGER_RTT_vprintf ( BufferIndex5 , sFormat , &ParamList ) ;",1
"return SEGGER_RTT_vprintf ( BufferIndex6 , sFormat , &ParamList ) ;",1
"return filp -> f_op -> open ( filp , name , flags , mode , abs_path ) ;",1
"return filp -> f_op1 -> open ( filp , namee , flags , modee , abs_path1 ) ;",1
"return filp -> f_op1 -> open ( filp , namef , flags , modef , abs_path1 ) ;",1
"return filp -> f_op1 -> open ( filp , nameg , flags , modeg , abs_path1 ) ;",1
"return filp -> f_op1 -> open ( filph , name , flags , modeh , abs_path1 ) ;",1
"return filp -> f_op1 -> open ( filpv , name , flags , modecv , abs_path1 ) ;",1
"return filp -> f_op1 -> open ( filpw , name , flags , modew , abs_path1 ) ;",1
"return filp -> f_op1 -> open ( filpx , name , flags , modex , abs_path1 ) ;",1
"return filp -> f_op1 -> open ( filpy , name , flags , modecy , abs_path1 ) ;",1
"return filp -> f_op1 -> open ( filpz , name , flags , modez , abs_path1 ) ;",1
"return snprintf ( ( char * ) uip_appdata , UIP_APPDATA_SIZEss, ",1
return system ( cmd ) ;,1
return system ( cmd1 ) ;,1
return system ( cmd3 ) ;,1
return system ( cmd5 ) ;,1
"return vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap ) ",1
"return vsnprintf ( buffer , ~ ( size_t ) 2 , format , ap1 ) ",1
"return vsnprintf ( buffer2 , ~ ( size_t ) 0 , format , a3p ) ",1
"rv = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap ) ",1
"rv = vsnprintf ( buffer , ~ ( size_t ) 1 , format , ap1 ) ",1
"rv = vsnprintf ( buffer3 , ~ ( size_t ) 0 , format , a3p ) ",1
"scanf ( "" %3c "" , tab_char ) ;",1
"scanf ( "" %c "" , &ent_char ) ;",1
"scanf ( "" %d "" , &ent_dec_neg ) ;",1
"scanf ( "" %d "" , &ent_dec_pos ) ;",1
"scanf ( "" %hu "" , &ent_ushort ) ;",1
"scanf ( "" %ld "" , &ent_slong ) ;",1
"scanf ( "" %lu "" , &ent_ulong ) ;",1
"scanf ( "" %s "" , command ) ;",1
"scanf ( "" %s "" , command_Value ) ;",1
"scanf ( const char *__fmt , ... ) ;",1
"sd = socket ( AF_INET , S , 0 ) ; serv.sin_family = AF ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
"sdAD = socket ( AF_ID , S , 0 ) ; serv.sin_family = AFAD ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
"sdAD1 = socket ( AF_ID1 , S , 0 ) ; serv.sin_family = AAD1F ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
"sdADC = socket ( AF_ID , S , 0 ) ; serv.sin_family = AFADC ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
"sdADC1 = socket ( AF_ID1 , S , 0 ) ; serv.sin_family = AADC1F ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
"sdADISK = socket ( AF_ID , S , 0 ) ; serv.sin_family = AFADISK ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
"sdADISK1 = socket ( AF_ID1 , S , 0 ) ; serv.sin_family = AADISK1F ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
"sdADISKC = socket ( AF_ID , S , 0 ) ; serv.sin_family = AFADISKC ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
"sdADISKC1 = socket ( AF_ID1 , S , 0 ) ; serv.sin_family = AADISKC1F ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
"sdC = socket ( AF_INET , S , 0 ) ; serv.sin_family = AFC ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
"sdISK = socket ( AF_INET , S , 0 ) ; serv.sin_family = AFDISK ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
"sdISKC = socket ( AF_INET , S , 0 ) ; serv.sin_family = AFDISKC ; serv.sin_addr.s_addr = htonl ( IA ) ; servr.sin_port = htons ( 1008 ) ; bind ( sd , ( struct sA * ) & serv , sizeof ( serv ) ) ; while ( 1 ) { memset ( msg , 0x0 , MAX_MSG ) ; cl = sizeof ( c ) ; h = gethostbyname ( inet_ntoa ( cR.sin_addr ) ) ; if ( h->h_name = = ... ) n = recvfrom ( sd , msg , MAX_MSG , 0 , ( struct sA * ) & c , &cl ) ; }",1
secondBillionth2s * = ( ( SM__time_t2 ) 1000000000 / SM__ticks_per_sec2 ( ) ) ;,1
secondBillionths * = ( ( SM__time_t ) 1000000000 / SM__ticks_per_sec ( ) ) ; ,1
secondBillionths * = ( ( SM__time_t1 ) 1000000000 / SM__ticks_per_sec1 ( ) ) ;,1
secondBillionths * = ( ( SM__time_t2 ) 1000000000 / SM__ticks_per_sec2 ( ) ) ;,1
secondBillionths * = ( ( SM__time_time ) 10000000 / SM__ticks_per_seconds ( ) ) ;,1
short Panel = packet_value [ i++ ] << 10 | packet_value [ i++ ];,1
short Panel = packet_value [ k++ ] << 10 | packet_value [ k++ ];,1
short destPan = packet [ i++ ] << 8 | packet [ i++ ] ;,1
short destPan1 = packet [ f++ ] << 8 | packet [ f++ ] ;,1
short destPan2 = packet [ r++ ] << 8 | packet [ r++ ] ;,1
short destPan3 = packet [ g++ ] << 8 | packet [ g++ ] ;,1
short destPan4 = packet [ t++ ] << 8 | packet [ t++ ] ;,1
short destPane = packet [ s++ ] << 8 | packet [ s++ ] ;,1
short destPanr = packet [ a++ ] << 8 | packet [ a++ ] ;,1
short destPant = packet [ d++ ] << 8 | packet [ d++ ] ;,1
short destPanu = packet [ y++ ] << 8 | packet [ y++ ] ;,1
short destPany = packet [ t++ ] << 8 | packet [ t++ ] ;,1
short int bytesRec = 0 ; char buf[SOMEBIGNUM] ; while ( bytesRec < MAXGET ) { bytesRec + = getFromInput ( buf+bytesRec ) ; },1
short int bytesRec = 0 ; char buf[SOMEBIGNUM] ; while ( bytesRec1 < MAXGET1 ) { bytesRec1 + = getFromInput1 ( buf+bytesRec1 ) ; },1
short int bytesRec = 0 ; char buf[SOMEBIGNUM] ; while ( bytesRec2 < MAXGET2 ) { bytesRec2 + = getFromInput2 ( buf+bytesRec2 ) ; },1
short int bytesRec = 0 ; char buf[SOMEBIGNUM] ; while ( bytesRec3 < MAXGET3 ) { bytesRec3 + = getFromInput3 ( buf+bytesRec3 ) ; },1
short int bytesRec = 0 ; char buf[SOMEBIGNUM] ; while ( bytesRec4 < MAXGET4 ) { bytesRec4 + = getFromInput4 ( buf+bytesRec4 ) ; },1
short int bytesRec = 0 ; char buf[SOMEBIGNUM] ; while ( bytesRec5 < MAXGET5 ) { bytesRec5 + = getFromInput5 ( buf+bytesRec5 ) ; },1
"signal ( SIG int , sig_handler ) ;",1
"signal ( SIGIsffNT , sig_handgdler33 ) ;",1
"signal ( SIGaa int , sig_handler3 ) ;",1
"signal ( SIGdfs int , sig_hafsndler1 ) ;",1
"signal ( SIGfe int , sig_hanhsedler ) ;",1
"signal ( SIGsd int , sig_hgdsgandler2 ) ;",1
"size_t len = cc ( 0 , std::forward <Args> ( args ) ) ; p = cs ( p , std::forward <Args> ( args ) ) ;",1
"size_t len = cc1 ( 0 , std::forward <Args> ( args ) ) ; p1 = cs ( p , std::forward <Args> ( args ) ) ;",1
"size_t len = cc1w ( 0 , std::forward <Args> ( args ) ) ; p1w = cs ( pw , std::forward <Args> ( args ) ) ;",1
"size_t len = cca1 ( 0 , std::forward <Args> ( args ) ) ; pa1 = cs ( pa1 , std::forward <Args> ( args ) ) ;",1
"size_t len = cca1e ( 0 , std::forward <Args> ( args ) ) ; pa1e = cs ( pa1e , std::forward <Args> ( args ) ) ;",1
"size_t len = ccd ( 0 , std::forward <Args> ( args ) ) ; pd = cs ( pd , std::forward <Args> ( args ) ) ;",1
"size_t len = ccd1 ( 0 , std::forward <Args> ( args ) ) ; pd1 = cs ( pd1 , std::forward <Args> ( args ) ) ;",1
"size_t len = ccde1 ( 0 , std::forward <Args> ( args ) ) ; pde1 = cs ( pde1 , std::forward <Args> ( args ) ) ;",1
"size_t len = ccdk ( 0 , std::forward <Args> ( args ) ) ; pdk = cs ( pdk , std::forward <Args> ( args ) ) ;",1
"size_t len = ccf ( 0 , std::forward <Args> ( args ) ) ; pf = csf ( pf , std::forward <Args> ( args ) ) ;",1
"size_t len = ccfk ( 0 , std::forward <Args> ( args ) ) ; pkf = csf ( pfk , std::forward <Args> ( args ) ) ;",1
"size_t len = ccfu ( 0 , std::forward <Args> ( args ) ) ; pf = csfu ( pfu , std::forward <Args> ( args ) ) ;",1
"size_t len = ccfum ( 0 , std::forward <Args> ( args ) ) ; pfm = csfum ( pfum , std::forward <Args> ( args ) ) ;",1
"size_t len = ccw ( 0 , std::forward <Args> ( args ) ) ; pw = cs ( pw , std::forward <Args> ( args ) ) ;",1
"size_t pOptions ) const uint8_t * const pucPtr , size_t uxTotalLength , FreeRTOS_Socket_t * const pxSocket , BaseType_t xHasSYNFlag ) { size_t index ; __CPROVER_assume ) index == 1 || index < = uxTotalLength ) ; return index ; ",1
"size_t pOptions1 ) const uint8_t * const pucPtr1 , size_t uxTotalLength , FreeRTOS_Socket_t * const pxSocket , BaseType_t xHasSYNFlag ) { size_t index ; __CPROVER_assume ) index1 == 1 || index1 < = uxTotalLength ) ; return index1 ; ",1
"size_t pOptions2 ) const uint8_t * const pucPtr , size_t uxTotalLength , FreeRTOS_Socket_t * const pxSocket , BaseType_t xHasSYNFlag ) { size_t index2 ; __CPROVER_assume ) index2 == 1 || index2 < = uxTotalLength ) ; return index2 ; ",1
"size_t pOptions3 ) const uint8_t * const pucPtr1 , size_t uxTotalLength , FreeRTOS_Socket_t * const pxSocket , BaseType_t xHasSYNFlag ) { size_t index ; __CPROVER_assume ) index3 == 1 || index3 < = uxTotalLength ) ; return index3 ; ",1
"size_t pOptions4 ) const uint8_t * const pucPtr , size_t uxTotalLength , FreeRTOS_Socket_t * const pxSocket , BaseType_t xHasSYNFlag ) { size_t index ; __CPROVER_assume ) index4 == 1 || index4 < = uxTotalLength ) ; return index4 ; ",1
"size_t pOptions5 ) const uint8_t * const pucPtr1 , size_t uxTotalLength , FreeRTOS_Socket_t * const pxSocket , BaseType_t xHasSYNFlag ) { size_t index ; __CPROVER_assume ) index5 == 1 || index5 < = uxTotalLength ) ; return index",1
"size_t prv ) uint8_t * loadBuffer , const char * pcHost , TickType_t Identifier ) { VER ) loadBuffer ) ; size_t size ; return size ; }",1
"size_t prv1 ) uint8_t * loadBuffer , const char * pcHost , TickType_t Identifier ) { VER ) loadBuffer ) ; size_t size1 ; return size1 ; }",1
"size_t prv2 ) uint8_t * loadBuffer , const char * pcHost , TickType_t Identifier ) { VER ) loadBuffer ) ; size_t size2 ; return size2 ; }",1
"size_t prv3 ) uint8_t * loadBuffer , const char * pcHost , TickType_t Identifier ) { VER ) loadBuffer ) ; size_t size3 ; return size3 ; }",1
"size_t prv4 ) uint8_t * loadBuffer , const char * pcHost , TickType_t Identifier ) { VER ) loadBuffer ) ; size_t size4 ; return size4 ; }",1
"snprintf ( buf , sizeof ( buf ) , "" "" , uip_ipaddr_to_quad ( &netaddr ) , uip_ipaddr_to_quad ( &netmask ) , uip_ipaddr_to_quad ( &ifaddr ) ) ;",1
"snprintf ( buf , sizeof ( buf ) , "" "" , uip_ipaddr_to_quad ( &uip_hostaddr ) ) ;",1
"snprintf ( buf , sizeof ( buf ) , uip_ipaddr_to_quad ( &netaddr ) ) ;",1
"snprintf ( char * NTS __s , size_t __n , const char * NTS __fmt , ... ) ;",1
"snprintf ( cmd , sizeof ( cmd ) , fmt , ap ) ;",1
"snprintf ( logdir , 32 , LOGBASE "".%i"" , idx ) ;",1
"sprintf ( Count , "" <p><br>Refresh count = %data "" , lRefreshCountvalue ) ;",1
"sprintf ( CountB , "" <p><br>Refresh countB = %d "" , lRefreshCountB ) ;",1
"sprintf ( buf , "" %ld "" , * ( req* ) _data ) ;",1
"sprintf ( buf , "" %ldValue "" , * ( req* ) _dataValue ) ;",1
"sprintf ( buf , ""%ld"" , * ( req* ) _data ) ; ",1
"sprintf ( cCheckVal , "" equals 0x%x "" , ulErrorFlags ) ; xMessageToSend.xRow = Line2 ;",1
"sprintf ( cCheckVal , "" equals 0x%x "" , ulErrorFlagss ) ; xMessageToSend.xRows = Lines2 ;",1
"sprintf ( cCountBuf , "" <p><br>Refresh coun22t = %d22 "" , lRefreshCount22 ) ;",1
"sprintf ( cCountBuf , "" <p><br>Refresh count = %d "" , lRefreshCount ) ;",1
"sprintf ( cCountBufss , "" <p><br>Refresh countss = %d "" , lRefreshCount ) ;",1
"sprintf ( char * NTS __s , const char * NTS __fmt , ) ;",1
"sprintf ( pcWriteBuffer , "" Stopping trace recording. "" ) ;",1
"sprintf ( pcWriteBuffer , "" Valid parameters are 'start' and 'stop'. "" ) ;",1
"sprintf ( uip_appdata , "" "" , uip_ipaddr_to_quad ( &uip_hostaddr ) , ( c -> dataconn.port ) >> 8 , ( c -> dataconn.port ) & 0xff ) ;",1
srand ( ( unsigned long ) ( Value ) ) ,1
srand ( 1234 ) ;,1
srand ( seed ) ;,1
srand ( timddde ( NULL ) ) ; ,1
srand ( timdde ( NULL ) ) ; ,1
srand ( time ( NULL ) ) ,1
srand ( time1 ( NULL ) ) ,1
srand ( time15 ( NULL ) ) ;,1
srand ( time16 ( NULL ) ) ;,1
srand ( time17 ( NULL ) ) ;,1
srand ( time2 ( NULL ) ) ; ,1
srand ( unsigned int seed1 ) ,1
srand ( unsigned int seed2 ) ,1
srandom ( ( unsigned int ) time ( NULL ) ) ; ,1
"sscanf ( const char * NTS __buf , const char * NTS __fmt , ... ) ",1
"sscanf ( const char *__buf , const char *__fmt , ... ) ;",1
"ssize_t readlink ( const char *restrict , char *restrict , size_t ) ;",1
start ( cp_pdu_t *pdu ) { if ( pdu && pdu -> hdr && ( pdu -> hdr -> token + pdu -> hdr -> token_length < ( unsigned char * ) pdu -> hdr + pdu -> length ) ) { cp_opt_t *opt = pdu -> hdr -> token + pdu -> hdr -> token_length ; return ( *opt = = cp_PAYLOAD_START ) ? NULL : opt ; } else ,1
start ( cp_pdu_t *pdu ) { if ( pdu && pdu -> hdr && ( pdu -> hdr -> token + pdu -> hdr -> token_length < ( unsigned char * ) pdu -> hdr + pdu -> length ) ) { cp_opt_t *opt = pdu -> hdr -> token + pdu -> hdr -> token_length ; return ( *opt == cp_PAYLOAD_START ) ? NULL : opt ; } else ,1
"stat ( &URL [3] , &buf ) ) ",1
"stat ( &connect [3] , &buf ) ) ",1
"stat ( &link [3] , &buf ) ) ",1
"stat ( &url [ 1] , &bufferID ) )",1
"stat ( &url [ 2 ] , &buf2 ) ) ",1
"stat ( &url [ 3 ] , &buffer ) ) ",1
"stat ( &url [ 3 ] , &bufferDir ) ) ",1
"stat ( &url [ 3 ] , &buffers ) ) ",1
"stat ( &url [4] , &bufffer ) ) ",1
"stat ( file_address , &statbuf ) ",1
"stat ( file_end , &statdabuf ) ",1
"stat ( file_name , &statdabuf_Value )",1
"stat ( filename , &statbufData )",1
"stat ( filename3 , &statbufferDir ) ",1
"stat ( filename3 , &statbuffers ) ",1
"stat ( filenameDir , &statbuf4 ) ",1
"stat ( filenameDir01 , &statbuf4 ) ",1
"stat ( filenameDir02 , &statbuf4 ) ",1
"stat ( filendasame , &statdabuf ) ",1
static BDesable ( void ) { BTStatus_t status ; if ( bBLEEnabled ) { status = IotBle_Off ( ) ; return status ; },1
static Desables ( void ) { B status1 ; if ( bBLEEnabled ) { status1 = IotBle_Off ( ) ; return status1 ; },1
static Disable ( void ) { B_t status2 ; if ( bBLEEnabled ) { status2 = IotBle_Off ( ) ; return status2 ; },1
"static char * GG2BSource ( char * data ) { strcat ( data , "" *.* "" ) ; return data ; } staticvoid GG2B ( ) { char * data ; char dataBuffer [ 100 ] = COMMAND_ARG2 ; data = dataBuffer ; data = GG2BSource ( data ) ; { char *args [ ] = { COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL } ; EXECV ( COMMAND_ int _PATH , args ) ; } } ",0
"static char *helperBad ( ) { char charString [ ] = "" helperBad string "" ; char *ptrCharString ; ptrCharString = &charString [ 1 ] ; return ptrCharString ; } void bad ( ) { print Line ( helperBad ( ) ) ; } ",1
"static char *helperBad ( ) { char charString [ ] = "" helperBad string "" ; return charString ; } void bad ( ) { print Line ( helperBad ( ) ) ; } ",1
"static char *helperBad1 ( ) { char charString [ ] = "" helperBad string "" ; return charString ; } void bad1 ( ) { print Line ( helperBad1 ( ) ) ; } ",1
"static char *helperBad11 ( ) { char charString11 [ ] = "" helperBad string11 "" ; char *ptrCharString ; ptrCharString = &charString [ 1 ] ; return ptrCharString ; } void bad ( ) { print Line ( helperBad11 ( ) ) ; } ",1
"static char *helperBaded ( ) { char charString [ ] = "" helperBad string "" ; return charStringed ; } void bad ( ) { print Line ( helperBaded ( ) ) ; } ",1
"static char *helperBaded ( ) { char charString [ ] = "" helperBad stringed "" ; char *ptrCharString ; ptrCharString = &charStringed [ 1 ] ; return ptrCharString ; } void bad ( ) { print Line ( helperBad ( ) ) ; } ",1
"static char *helperG1 ( ) { static char charString [ ] = "" helperG1 string "" ; char *ptrCharString ; ptrCharString = &charString [ 1 ] ; return ptrCharString ; } staticvoid G1 ( ) { print Line ( helperG1 ( ) ) ; } ",0
"static char *helperG1 ( ) { static char charString [ ] = "" helperG1 string "" ; return charString ; } staticvoid G1 ( ) { print Line ( helperG1 ( ) ) ; } ",0
"static char *m_p ( l*dev, int i_n ) { char str[64] ; snprintf ( str, sizeof ( str ) , ""%04x:%04x:%02x"", l ( dev ) , li ( dev ) , i ) ; str[sizeof ( str ) -1] = '",1
"static char *m_p1 ( l*dev1, int i_n ) { char str[64] ; snprintf ( str, sizeof ( str ) , ""%04x:%04x:%02x"", l ( dev1 ) , li ( dev1 ) , i ) ; str[sizeof ( str ) -1] = '",1
"static char *m_p2 ( l*dev2, int i_n ) { char str[64] ; snprintf ( str, sizeof ( str ) , ""%04x:%04x:%02x"", l ( dev2 ) , li ( dev2 ) , i ) ; str[sizeof ( str ) -1] = '",1
"static char *m_p3 ( l*dev3, int i_n ) { char str[64] ; snprintf ( str, sizeof ( str ) , ""%04x:%04x:%02x"", l ( dev3 ) , li ( dev3 ) , i ) ; str[sizeof ( str ) -1] = '",1
"static char *m_p4 ( l*dev4, int i_n ) { char str[64] ; snprintf ( str, sizeof ( str ) , ""%04x:%04x:%02x"", l ( dev4 ) , li ( dev4 ) , i ) ; str[sizeof ( str ) -1] = '",1
static char expected_echo_buf [ 4096 ] ;,1
static char expected_echo_buf3 [ 4096 ] ;,1
static char expected_echo_buf4 [ 4096 ] ;,1
static char parsed_response_buf [ 4096 ] ;,1
static char parsed_response_buf3 [ 4096 ] ;,1
static char parsed_response_buf4 [ 4096 ] ;,1
"static int GB2G1Static = 0 ; static int GB2G2Static = 0 ; static int GG2BStatic = 0 ; staticvoid GB2G1Sink ( char * data ) { if ( GB2G1Static ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } staticvoid GB2G1 ( ) { char * data ; data = NULL ; data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G1Static = 0 ; GB2G1Sink ( data ) ; } ",0
"static int GB2G1Static = 0 ; static int GB2G2Static = 0 ; static int GG2BStatic = 0 ; staticvoid GB2G1Sink ( char * data ) { if ( GB2G1Static ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } staticvoid GB2G1 ( ) { char * data ; data = NULL ; data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G1Static = 0 ; GB2G1Sink ( data ) ; } ",0
"static int GB2G1Static = 0 ; static int GB2G2Static = 0 ; static int GG2BStatic = 0 ; staticvoid GB2G1Sink ( char * data ) { if ( GB2G1Static ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } staticvoid GB2G1 ( ) { char * data ; data = NULL ; data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G1Static = 0 ; GB2G1Sink ( data ) ; } ",0
"static int GB2G1Static = 0 ; static int GB2G2Static = 0 ; static int GG2BStatic = 0 ; staticvoid GB2G1Sink ( char * data ) { if ( GB2G1Static ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } staticvoid GB2G1 ( ) { char * data ; data = NULL ; data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G1Static = 0 ; GB2G1Sink ( data ) ; } ",0
"static int GB2G1Static = 0 ; static int GB2G2Static = 0 ; static int GG2BStatic = 0 ; staticvoid GB2G1Sink ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G1Static = 0 ; GB2G1Sink ( data ) ; } ",0
"static int GB2G1Static = 0 ; static int GB2G2Static = 0 ; static int GG2BStatic = 0 ; staticvoid GB2G1Sink ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G1Static = 0 ; GB2G1Sink ( data ) ; } ",0
"static int GB2G1Static = 0 ; static int GB2G2Static = 0 ; static int GG2BStatic = 0 ; staticvoid GB2G1Sink ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G1Static = 0 ; GB2G1Sink ( data ) ; } ",0
"static int GB2G1Static = 0 ; static int GB2G2Static = 0 ; static int GG2BStatic = 0 ; staticvoid GB2G1Sink ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; GB2G1Static = 0 ; GB2G1Sink ( data ) ; } ",0
static int staticGlobalBad = 0 ;void bad ( ) { staticGlobalBad = 10 ;print int Line ( staticGlobalBad ) ; } ,1
static int staticGlobalBads = 0 ;void bads ( ) { staticGlobalBads = 10 ;print int Line ( staticGlobalBads ) ; } ,1
static int staticGlobalG1 = 5 ;staticvoid G1 ( ) { print int Line ( staticGlobalG1 ) ; } ,0
"static int staticReturnsFalse ( ) { return 0 ; } void bad ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" Never print ees "" ) ; } } ",1
"static int staticReturnsFalse ( ) { return 0 ; } void bad1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" Never print eees "" ) ; } } ",1
"static int staticReturnsFalse ( ) { return 0 ; } void bad11 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" Never print eees1 "" ) ; } } ",1
"static int staticReturnsFalse ( ) { return 0 ; } void bads ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" Never print 1 "" ) ; } } ",1
"static int staticReturnsTrue ( ) { return 1 ; } staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { */ char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"static unsigned _WriteBlocking ( SEGGER_RTT_BUFFER_UP* pRing , const char* pBuffer , unsigned NumBytes) { unsigned RdOff ; do { RdOff = pRing->RdOff ; probe) in the meantime if ( RdOff > WrOff) { NumBytesToWrite = RdOff - WrOff - 1u ; } else { NumBytesToWrite = pRing->SizeOfBuffer - ( WrOff - RdOff + 1u) ; } ",1
"static unsigned _WriteBlocking ( SEGGER_RTT_BUFFER_UP* pRing , const char* pBuffer , unsigned NumBytes) { unsigned RdOff ; if ( WrOff = = pRing->SizeOfBuffer) { WrOff = 0u ; } pRing->WrOff = WrOff ; } while ( NumBytes) ; return NumBytesWritten ; }",1
"static unsigned _WriteBlockinge ( SEGGER_RTT_BUFFER_UP* pRinge , const char* pBuffere , unsigned NumBytese) { unsigned RdOffe ; if ( WrOffe = = pRing->SizeOfBuffer) { WrOffe = 0u ; } pRing->WrOffe = WrOffe ; } while ( NumBytes) ; return NumBytesWritten ; }",1
"static unsigned _WriteBlockingw ( SEGGER_RTT_BUFFER_UP* pRingw , const char* pBufferw , unsigned NumBytesw) { unsigned RdOffw ; do { RdOff = pRing->RdOff ; probew) in the meantime if ( RdOff > WrOff) { NumBytesToWrite = RdOff - WrOff - 1u ; } else { NumBytesToWrite = pRing->SizeOfBuffer - ( WrOff - RdOff + 1u) ; } ",1
static unsigned char buf [ 4 ] ;,1
static unsigned char buf [ 5 ] ;,1
"static unsigned int sum ( unsigned char *data , int num ) ;",1
"static unsigned int sum ( unsigned char *datatest , int numtest ) ;",1
"static unsigned int sum3 ( unsigned char *data22 , int num22 ) ;",1
"static unsigned int sum4 ( unsigned char *data44 , int num33 ) ;",1
"static unsigned int sumtest23 ( unsigned char *datatest222 , int numtest222 ) ;",1
"static unsigned int sumtest24 ( unsigned char *datatest244 , int numtest233 ) ;",1
"static unsigned short generate_tcp_stats ( void *arg ) { struct uip_conn *conn ; struct httpd_state *s = ( struct httpd_state * ) arg ; conn = &uip_conns [ s -> count ] ; return snprintf ( ( char * ) uip_appdata , UIP_APPDATA_SIZE , "" <tr><td>%d</td><td>%u.%u.%u.%u:%u</td><td>%s</td><td>%u</td><td>%u</td><td>%c %c</td></tr> "" , } ",1
"static unsigned short generate_tcp_statss ( void *argss ) { struct uip_conn *conn ; struct httpd_state *ss = ( struct httpd_state * ) arg ; conn = &uip_conns [ s -> counts ] ; return snprintf ( ( char * ) uip_appdata , UIP_APPDATA_SIZE , "" <tr><td>%d</td><td>%u.%u.%u.%u:%u</td><td>%s</td><td>%u</td><td>%u</td><td>%c %c</td></tr> "" , } ",1
"static void G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"static void G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { */ char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"static void G2 ( ) { if ( staticReturnsTrue ( ) ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"static void SetUpSLCRDivisors ) int mac_baseaddr , int speed ) { u32 SlcrDiv0 ; if ) speed == 1000 ) { if ) ) unsigned long ) mac_baseaddr == EMAC0_BASE_ADDRESS ) { SlcrDiv0 = XP ; } else { SlcrDiv0 = XP ; } } else if ) speed == 100 ) { if ) ) unsigned long ) mac_baseaddr == EMAC0_BASE_ADDRESS ) { SlcrDiv0 = XP ; } else { SlcrDiv0 = XP ; } SlcrTxClkCntrl |= ) SlcrDiv0 < < 8 ) ; return ; } ",1
"static void SetUpSLCRDivisors01 ) int mac_baseaddr , int speed ) { u32 SlcrDiv0 ; if ) speed == 1000 ) { if ) ) unsigned long ) mac_baseaddr == EMAC0_BASE_ADDRESS ) { SlcrDiv0 = XP1 ; } else { SlcrDiv0 = XP1 ; } } else if ) speed == 100 ) { if ) ) unsigned long ) mac_baseaddr == EMAC0_BASE_ADDRESS ) { SlcrDiv0 = XP1 ; } else { SlcrDiv0 = XP1 ; } SlcrTxClkCntrl |= ) SlcrDiv0 < < 8 ) ; return ; } ",1
"static void SetUpSLCRDivisors02 ) int mac_baseaddr , int speed ) { u32 SlcrDiv0 ; if ) speed == 1000 ) { if ) ) unsigned long ) mac_baseaddr == EMAC0_BASE_ADDRESS ) { SlcrDiv0 = XP2 ; } else { SlcrDiv0 = XP2 ; } } else if ) speed == 100 ) { if ) ) unsigned long ) mac_baseaddr == EMAC0_BASE_ADDRESS ) { SlcrDiv0 = XP2 ; } else { SlcrDiv0 = XP2 ; } SlcrTxClkCntrl |= ) SlcrDiv0 < < 8 ) ; return ; } ",1
"static void SetUpSLCRDivisors03 ) int mac_baseaddr , int speed ) { u32 SlcrDiv0 ; if ) speed == 1000 ) { if ) ) unsigned long ) mac_baseaddr == EMAC0_BASE_ADDRESS ) { SlcrDiv0 = XP3 ; } else { SlcrDiv0 = XP3 ; } } else if ) speed == 100 ) { if ) ) unsigned long ) mac_baseaddr == EMAC0_BASE_ADDRESS ) { SlcrDiv0 = XP3 ; } else { SlcrDiv0 = XP3 ; } SlcrTxClkCntrl |= ) SlcrDiv0 < < 8 ) ; return ; } ",1
"static void SetUpSLCRDivisors04 ) int mac_baseaddr , int speed ) { u32 SlcrDiv0 ; if ) speed == 1000 ) { if ) ) unsigned long ) mac_baseaddr == EMAC0_BASE_ADDRESS ) { SlcrDiv0 = XP4 ; } else { SlcrDiv0 = XP4 ; } } else if ) speed == 100 ) { if ) ) unsigned long ) mac_baseaddr == EMAC0_BASE_ADDRESS ) { SlcrDiv0 = XP4 ; } else { SlcrDiv0 = XP4 ; } SlcrTxClkCntrl |= ) SlcrDiv0 < < 8 ) ; return ; } ",1
"static void VaryLength ( Server_t xConn ) { BaseType_t xResult ; xResultValue02 = pdPASS ; for ( ulIndexValue02 = 0 ; ulIndex < sizeof ( xMessageLengths ) / sizeof ( size_t ) ; ulIndex + + ) { xResult = prvConnectHelperWithRetry ( & xSocket, xConn, xReceiveTimeOut, xSendTimeOut, & xSocketOpen ) ; for ( ulI = 0 ; ulI < ulMaxLoopCount ; ulI + + ) { xResult = prvShutdownHelper ( xSocket ) ; } }",1
static void _NetReceiveTask ( void * pArgument ) { EventBits_t D = 0 ; while ( true ) { configASSERT ( pNetC->bufferedByteValid = = false ) ; do { D = xEGGetBits ( ( EGHandle_t ) & ( pNetC->D ) ) ; if ( ( D & _FLAG_SHUTDOWN ) = = _FLAG_SHUTDOWN ) { S = SOCKETS_ECLOSED ; } } while ( ( S = = 0 ) || ( S = = SOCKETS_EWOULDBLOCK ) ) ; if ( S < = 0 ) { break ; } pNetC->bufferedByteValid = true ; D = xEGGetBits ( ( EGHandle_t ) & ( pNetC->D ) ) ; if ( ( D & Des) = = Des) { destroyC = true ; break ; } } ,1
static void _NetReceiveTask01 ( void * pArgument ) { EventBits_t D = 0 ; while ( true ) { configASSERT ( pNetC->bufferedByteValid = = false ) ; do { D = xEGGetBits ( ( EGHandle_t ) & ( pNetC->D ) ) ; if ( ( D & _FLAG_SHUTDOWN ) = = _FLAG_SHUTDOWN ) { S = SOCKETS_ECLOSED ; } } while ( ( S = = 0 ) || ( S = = SOCKETS_EWOULDBLOCK ) ) ; if ( S < = 0 ) { break ; } pNetC->bufferedByteValid = true ; D = xEGGetBits ( ( EGHandle_t ) & ( pNetC->D ) ) ; if ( ( D & Des) = = Des) { destroyC = true ; break ; } } ,1
static void _NetReceiveTasks ( void * pArguments ) { EventBits_t Ds = 0 ; while ( true ) { configASSERT ( pNetC->bufferedByteValids = = false ) ; do { D = xEGGetBits ( ( EGHandle_ts ) & ( pNetCs -> D ) ) ; if ( ( D & _FLAG_SHUTDOWN ) = = _FLAG_SHUTDOWN ) { S = SOCKETS_ECLOSED ; } } while ( ( S = = 0 ) || ( S = = SOCKETS_EWOULDBLOCK ) ) ; if ( S < = 0 ) { break ; } pNetC->bufferedByteValid = true ; D = xEGGetBits ( ( EGHandle_t ) & ( pNetC->D ) ) ; if ( ( D & Des) = = Des) { destroyC = true ; break ; } } ,1
"static void _WriteNoCheck ( SEGGER_RTT_BUFFER_UP* pRing , const char* pData , unsigned NumBytes) { unsigned NumBytesAtOnce ; WrOff = pRing->WrOff ; Rem = pRing->SizeOfBuffer - WrOff ; if ( Rem > NumBytes) { memcpy ( pRing->pBuffer + WrOff , pData , NumBytes) ; pRing->WrOff = WrOff + NumBytes ; } else { NumBytesAtOnce = Rem ; memcpy ( pRing->pBuffer + WrOff , pData , NumBytesAtOnce) ; NumBytesAtOnce = NumBytes - Rem ; memcpy ( pRing->pBuffer , pData + Rem , NumBytesAtOnce) ; pRing->WrOff = NumBytesAtOnce ; } }",1
"static void _WriteNoCheckx ( SEGGER_RTT_BUFFER_UP* pRingx , const char* pDatax , unsigned NumBytes) { unsigned NumBytesAtOncxe ; WrOffx = pRing->WrOffx ; Rem = pRing->SizeOfBuffer - WrOffx ; if ( Rem > NumBytes) { memcpy ( pRing->pBuffer + WrOff , pData , NumBytes) ; pRing->WrOff = WrOff + NumBytes ; } else { NumBytesAtOnce = Rem ; memcpy ( pRing->pBuffer + WrOff , pData , NumBytesAtOnce) ; NumBytesAtOnce = NumBytes - Rem ; memcpy ( pRing->pBuffer , pData + Rem , NumBytesAtOnce) ; pRing->WrOff = NumBytesAtOnce ; } }",1
"static void prvIotFlashReadVerifyDummyData ( uint32_t offset , uint32_t size ) { uint32_t lRetVal ; for ( uint32_t i = 0 ; i < size ; i + = testIotFLASH_DEFAULT_MAX_BUFFER_SIZE ) { uint32_t remaining_size = ( ( i + testIotFLASH_DEFAULT_MAX_BUFFER_SIZE ) > size ) ? ( size - i ) : testIotFLASH_DEFAULT_MAX_BUFFER_SIZE ; if ( remaining_size > 0 ) { lRetVal = iot_flash_read_sync ( xFlashHandle , offset + i , &uctestIotFlashReadBuffer[ 0 ] , remaining_size ) ; TEST_ASSERT_EQUAL ( IOT_FLASH_SUCCESS , lRetVal ) ; for ( uint32_t i = 0 ; i < remaining_size ; i + + ) { if ( uctestIotFlashReadBuffer[ i ] ! = ( i & 0xFF ) ) { TEST_ASSERT_MESSAGE ( 0 , ""Data was NOT written"" ) ; } } } } }",1
"static void prvIotFlashReadVerifyDummyDatax ( uint32_t offsetx , uint32_t sizex ) { uint32_t lRetVal ; for ( uint32_t ix = 0 ; i < size ; i + = testIotFLASH_DEFAULT_MAX_BUFFER_SIZEx ) { uint32_t remaining_size = ( ( i + testIotFLASH_DEFAULT_MAX_BUFFER_SIZE ) > size ) ? ( size - i ) : testIotFLASH_DEFAULT_MAX_BUFFER_SIZE ; if ( remaining_size > 0 ) { lRetVal = iot_flash_read_sync ( xFlashHandle , offset + i , &uctestIotFlashReadBuffer[ 0 ] , remaining_size ) ; TEST_ASSERT_EQUAL ( IOT_FLASH_SUCCESS , lRetVal ) ; for ( uint32_t i = 0 ; i < remaining_size ; i + + ) { if ( uctestIotFlashReadBuffer[ i ] ! = ( i & 0xFF ) ) { TEST_ASSERT_MESSAGE ( 0 , ""Data was NOT written"" ) ; } } } } }",1
"static void prvSOCKETS_SendRecv_VaryLength ( Server_t xConn ) { BaseType_t xResult ; xResult = pdPASS ; for ( ulIndex = 0 ; ulIndex < sizeof ( xMessageLengths ) / sizeof ( size_t ) ; ulIndex + + ) { xResult = prvConnectHelperWithRetry ( & xSocket, xConn, xReceiveTimeOut, xSendTimeOut, & xSocketOpen ) ; for ( ulI = 0 ; ulI < ulMaxLoopCount ; ulI + + ) { xResult = prvShutdownHelper ( xSocket ) ; } }",1
"static void prvSOCKETS_SendRecv_VaryLengths ( Server_t xConns ) { BaseType_t xResults ; xResults = pdPASSs ; for ( ulIndesx = 0 ; ulIndexs < sizeof ( xMessageLengthss ) / sizeof ( size_t ) ; ulIndex + + ) { xResult = prvConnectHelperWithRetry ( & xSocket, xConn, xReceiveTimeOut, xSendTimeOut, & xSocketOpen ) ; for ( ulI = 0 ; ulI < ulMaxLoopCount ; ulI + + ) { xResult = prvShutdownHelper ( xSocket ) ; } }",1
static volatile const unsigned int zero = 0 ; tmp.ul [ H ] = tmp.ul [ L ] = 1 / zero ;,1
static volatile const unsigned int zero = 0 ; tmp.ul [ H ] = tmp.ul [ L01 ] = 1 / zero ;,1
static volatile const unsigned int zero = 0 ; tmp.ul [ H1 ] = tmp.ul [ L02 ] = 1 / zero ;,1
static volatile const unsigned int zero = 0 ; tmp.ul [ H1 ] = tmp.ul [ L1 ] = 1 / zero ;,1
static volatile const unsigned int zero = 0 ; tmp.ul [ HR1 ] = tmp.ul [ LR01] = 1 / zero ;,1
static volatile const unsigned int zero = 0 ; tmp.ul [ HR1 ] = tmp.ul [ LR1 ] = 1 / zero ;,1
static volatile const unsigned int zero = 0 ; tmp.ul [ HT1 ] = tmp.ul [ LT01 ] = 1 / zero ;,1
static volatile const unsigned int zero = 0 ; tmp.ul [ HT1 ] = tmp.ul [ LT1 ] = 1 / zero ;,1
static volatile const unsigned int zero = 0 ; tmp22.u33l [ H3 ] = tmp.ul [ L2 ] = 1 / zero ;,1
static volatile const unsigned int zero = 0 ; tmp22.u33l [ H3 ] = tmp.ul [ L22 ] = 1 / zero ;,1
"staticvoid ( ) { print Line ( "" G ( ) "" ) ; helperG1 ( ) ; } ",0
"staticvoid ( ) { print Line ( "" helperG1 ( ) "" ) ; } ",0
staticvoid G ( ) { char data ; if ( gloBAL_CONST_FIVE == 5 ) { data = 'C' ; } if ( gloBAL_CONST_FIVE == 5 ) { print HexCharLine ( data ) ; } } ,0
"staticvoid G ( ) { char data ; if ( gloBAL_CONST_FIVE == 5 ) { data = 'C' ; } if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { print HexCharLine ( data ) ; } } ",0
"staticvoid G ( ) { char data ;data = ' ' ; if ( globalTrue ) { data = ( char ) RAND32 ( ) } if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( data > 0 ) { if ( data < ( CHAR_MAX/2 ) ) { char result = data * 2 ;print HexCharLine ( result ) ; } else { print Line ( "" data value is too large to perform arithmetic safely. "" ) ; } } } } ",0
staticvoid G ( ) { char data ;data = ' ' ;data = 2 ; if ( data > 0 ) { char result = data * 2 ;print HexCharLine ( result ) ; } } ,0
staticvoid G ( ) { char data ;data = ' ' ;data = 2 ; if ( data > 0 { char result = data * 2 ;print HexCharLine ( result ) ; } } ,0
staticvoid G ( ) { char data ;data = ' ' ;data = 2 ; { char result = data * data ;print HexCharLine ( result ) ; } } ,0
staticvoid G ( ) { char data ;data = ' ' ;data = 2 ; { char result = data * data ;print HexCharLine ( result_Value ) ; } } ,0
staticvoid G ( ) { char data ;data = ' ' ;data = 2 ; { char result = data * data ;print HexCharLine ( result_Value01 ) ; } } ,0
staticvoid G ( ) { char data ;data = ' ' ;data = 2 ; { char result = data + 1 ; print HexCharLine ( result ) ; } } ,0
staticvoid G ( ) { char data ;data = ' ' ;data = 2 ; { char result = data + 1 ;print HexCharLine ( result ) ; } } ,0
staticvoid G ( ) { char data ;data = 'C' ;print HexCharLine ( data ) ; } ,0
staticvoid G ( ) { char data_Value ;data_Value = 'C' ;print HexCharLine ( data_Value ) ; } ,0
"staticvoid G ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { int int One = 1 , int Two = 1 , int Sum = 0 ; print int Line ( int Sum ) ; int Sum = int One + int Two ; print int Line ( int Sum ) ; } } } ",0
staticvoid G ( ) { int 64_t data ;data = 0LL ; data = 2 ; if ( data > 0 ) { int 64_t result = data * 2 ;print LongLongLine ( result ) ; } } ,0
staticvoid G ( ) { int data ;GG2BSource ( data ) ;data = 10 ;print int Line ( data ) ; } ,0
"staticvoid G ( ) { int data ;data = 5 ; if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { print int Line ( data ) ; } } ",0
staticvoid G ( ) { int data ;data = 5 ;print int Line ( data ) ; } ,0
staticvoid G ( ) { long data ;data = 5L ;print LongLine ( data ) ; } ,0
staticvoid G ( ) { long data ;long &dataRef = data ;long data = dataRef ;data = 5L ;print LongLine ( data ) ; } } ,0
staticvoid G ( ) { nt64_t data ;data = 0LL ;data = 2 ; { int 64_t result = data + 1 ;print LongLongLine ( result ) ; } } ,0
"staticvoid G ( ) { print Line ( "" Hello "" ) ; return ; } ",0
staticvoid G ( ) { two int sStruct data ;GB2G1Static = 0 ; GB2G1Sink ( data ) ; } ,0
staticvoid G ( ) { two int sStruct data ;data. int One = 0 ;data. int Two = 0 ;print StructLine ( &data ) ; } ,0
staticvoid G ( ) { wchar_t data ;print WcharLine ( data ) ; } ,0
"staticvoid G ( ) { { int int One = 1 , int Two = 1 , int Sum = 0 ; print int Line ( int Sum ) ; int Sum = int One + int Two ; print int Line ( int Sum ) ; } } ",0
"staticvoid G1 ( ) if ( globalReturnsTrueOrFalse ( ) ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { char charString [ 10 ] = "" "" ; int charStringLen ; if ( fgets ( charString , 10 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed. "" ) ;charString [ 0 ] = '",0
"staticvoid G1 ( ) { goto sink ; sink: if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: if ( Ftc ( ( int ) 'A' , stdout ) == EOF ) { print Line ( "" Ftc failed! "" ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } ",0
"staticvoid G1 ( ) { goto sink ; sink: if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: { / char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: { char * data ; char * * po int er = ( char * * ) malloc ( sizeof ( char * ) ) ; if ( po int er == NULL ) { exit ( -1 ) ; } data = "" string "" ; *po int er = data ; { char * data = *po int er ; print Line ( data ) ; } free ( po int er ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: { char * password = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( password == NULL ) { exit ( -1 ) ; } size_t passwordLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",0
staticvoid G1 ( ) { goto sink ; sink: { char data ; char * po int er = ( char * ) malloc ( sizeof ( char ) ) ; if ( po int er == NULL ) { exit ( -1 ) ; } data = 5 ; *po int er = data ; { char data = *po int er ; print HexCharLine ( data ) ; } free ( po int er ) ; } } ,0
"staticvoid G1 ( ) { goto sink ; sink: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { goto sink ; sink: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { goto sink ; sink: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { goto sink ; sink: { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { goto sink ; sink: { char password [ 100 ] = "" "" ; size_t passwordLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; if ( fgets ( password , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; password [ 0 ] = '",0
staticvoid G1 ( ) { goto sink ; sink: { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } ,0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t * filename ; wchar_t tmpl [ ] = L "" fnXXXXXX "" ; int fileDesc ; filename = MKTEMP ( tmpl ) ; if ( filename == NULL ) { exit ( 1 ) ; } print WLine ( filename ) ; fileDesc = OPEN ( filename , O_RDWR|O_CREAT|O_EXCL , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data_Value = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } ",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data_Value = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data_Value = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data_Value = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data_Value = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( ( globalReturnsTrueOrFalse ( ) + 11 ) == 11 ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( ( globalReturnsTrueOrFalse ( ) + 5 ) == 5 ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( ( globalReturnsTrueOrFalse ( ) + 5 ) == GLOBAL_CONST_FIVE ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( ( globalReturnsTrueOrFalse ( ) + 5 ) == globalFive ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( ( globalReturnsTrueOrFalse ( ) + 6 ) == 6 ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( ( globalReturnsTrueOrFalse ( ) + 6 ) == globalFive ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( ( globalReturnsTrueOrFalse ( ) + 7 ) == GLOBAL_CONST_FIVE ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( ( globalReturnsTrueOrFalse ( ) + 8 ) == 8 ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( ( globalReturnsTrueOrFalse ( ) + 9 ) == globalFive ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( 0 ) { */ print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { */ print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { */ print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { */ print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { */ print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { */ print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { */ print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { */ print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF ) { print Line ( "" Ftc failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char * GChar = NULL ; GChar = ( char * ) malloc ( sizeof ( *GChar ) ) ; if ( GChar == NULL ) { exit ( -1 ) ; } *GChar = 'G' ; print HexCharLine ( *GChar ) ; free ( GChar ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char data ; char * po int er = ( char * ) ALLOCA ( sizeof ( char ) ) ; data = 5 ; *po int er = data ; { char data = *po int er ; print HexCharLine ( data ) ; } } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char path [ MAX_PATH ] ; req length ; length = GetCurrentDirectoryA ( MAX_PATH , path ) ; if ( length == 0 || length > = MAX_PATH ) { } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print Line ( path ) ; } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF ) { print Line ( "" Ftc failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char data ; char * po int er = ( char * ) ALLOCA ( sizeof ( char ) ) ; data = 5 ; *po int er = data ; { char data = *po int er ; print HexCharLine ( data ) ; } } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char path [ MAX_PATH ] ; req length ; length = GetCurrentDirectoryA ( MAX_PATH , path ) ; if ( length == 0 || length > = MAX_PATH ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print Line ( path ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { int * G int = NULL ; G int = ( int * ) malloc ( sizeof ( *G int ) ) ; if ( G int == NULL ) { exit ( -1 ) ; } *G int = 6 ; print int Line ( *G int ) ; free ( G int ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t * password = ( wchar_t * ) ALLOCA ( 100*sizeof ( wchar_t ) ) ; size_t passwordLen = 0 ; HANDLE hUser ; wchar_t * username = L "" User "" ; wchar_t * domain = L "" Domain "" ; password [ 0 ] = L'",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( 5!= 5 ) { } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF ) { print Line ( "" Ftc failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( Fts ( "" string "" , stdout ) == EOF ) { print Line ( "" Fts failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( REMOVE ( "" removemebad.txt "" != 0 { print Line ( "" fprintf failed ! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( REMOVE ( "" removemebad.txt "" != 0 { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",0
"staticvoid G1 ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char path [ MAX_PATH ] ; req length ; length = GetCurrentDirectoryA ( MAX_PATH , path ) ; if ( length == 0 || length > = MAX_PATH ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print Line ( path ) ; } } } ",0
"staticvoid G1 ( ) { if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",0
"staticvoid G1 ( ) { if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char path [ MAX_PATH ] ; req length ; length = GetCurrentDirectoryA ( MAX_PATH , path ) ; if ( length == 0 || length > = MAX_PATH ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print Line ( path ) ; } } } ",0
"staticvoid G1 ( ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed ! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { print Line ( "" Hello from G ( ) "" ) ; } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF ) { print Line ( "" Fts failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { double * data ; data = new double ; *data = 5.0 ; double * * po int er = new double * ; *po int er = data ; { double * data = *po int er ; print DoubleLine ( *data ) ; } delete po int er ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( globalFalse ) print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { double * data ; double * * po int er = ( double * * ) ALLOCA ( sizeof ( double * ) ) ; data = ( double * ) malloc ( sizeof ( double ) ) ; if ( data == NULL ) { exit ( -1 ) ; } *data = 5.0 ; *po int er = data ; { double * data = *po int er ; print DoubleLine ( *data ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { print Line ( "" Inside the block "" ) ; } print Line ( "" Hello from G ( ) "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { / print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } else { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ,0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == 1 ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == 1 ) { print Line ( "" Sometimes print_Value "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == GLOBAL_CONST_FALSE ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == GLOBAL_CONST_TRUE ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == STATIC_CONST_FALSE ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == STATIC_CONST_TRUE ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == globalFalse ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == globalReturnsFalse ( ) ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == globalReturnsTrue ( ) ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == globalTrue ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == staticFalse ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == staticReturnsFalse ( ) ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == staticReturnsTrue ( ) ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( globalReturnsTrueOrFalse ( ) == staticTrue ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { char data ; char * po int er = ( char * ) ALLOCA ( sizeof ( char ) ) ; data = 5 ; *po int er = data ; { char data = *po int er ; print HexCharLine ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { int int One = 1 , int Two = 1 , int Sum = 0 ; print int Line ( int Sum ) ; int Sum = int One + int Two ; print int Line ( int Sum ) ; } } } ",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { int int One = 1 , int Two = 1 , int Sum = 0 ; print int Line ( int Sum ) ; int Sum = int One + int Two ; print int Line ( int Sum ) ; } } } ",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { print Line ( "" Hello from G ( ) "" ) ; } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char data ; char * po int er = ( char * ) ALLOCA ( sizeof ( char ) ) ; data = 5 ; *po int er = data ; { char data = *po int er ; print HexCharLine ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char path [ MAX_PATH ] ; req length ; length = GetCurrentDirectoryA ( MAX_PATH , path ) ; if ( length == 0 || length > = MAX_PATH ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print Line ( path ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { nt int One = 1 , int Two = 1 , int Sum = 0 ;print int Line ( int Sum ) ; int Sum = int One + int Two ;print int Line ( int Sum ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) } else { print Line ( "" Hello from G ( ) "" ) ; } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed _Value! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { int int G = rand ( ) ; if ( int G < ( RAND_MAX / 2 ) ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { int int G = rand ( ) ; if ( int G > ( RAND_MAX / 2 ) ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { int int Rand = rand ( ) ; if ( int Rand < 5000 ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { int int Rand = rand ( ) ; if ( int Rand_Value < 5000 ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { int int Rand1 = rand ( ) ; int int Rand2 = rand ( ) ; if ( int Rand1 != int Rand2 ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { int int Rand1 = rand ( ) ; int int Rand2_Value = rand ( ) ; if ( int Rand1 != int Rand2_Value ) { print Line ( "" Sometimes print s "" ) ; } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { char * data ; data = "" string "" ; char * * po int er = new char * ; *po int er = data ; { char * data = *po int er ; print Line ( data ) ; } delete po int er ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ,0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { two int sStruct *two int sStructPo int er = NULL ; if ( ( two int sStructPo int er != NULL ) && ( two int sStructPo int er -> int One == 5 ) ) { print Line ( "" int One == 5 "" ) ; } } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { int k ; for ( k = 0 ; k < 1 ; k++ ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { int k ;for ( k = 0 ; k < 1 ; k++ ) { { int x ;x = ( rand ( ) % 3 ) ; if ( x == 0 ) { print Line ( "" Inside the if statement "" ) ; } else { print Line ( "" Inside the else statement "" ) ; } } print Line ( "" Hello from G ( ) "" ) ; } } ",0
"staticvoid G1 ( ) { print Line ( "" Hello from G ( ) "" ) ; } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { Two int sClass * data ; data = new Two int sClass ; data -> int One = 5 ; data -> int Two = 6 ; Two int sClass * * po int er = new Two int sClass * ; *po int er = data ; */ { Two int sClass * data = *po int er ; print int Line ( data -> int One ) ; print int Line ( data -> int Two ) ; } delete po int er ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6:print Line ( "" 0 , fixed string "" ) ;break ;default: { int i = 0 ;while ( i++ < 10 ) { print Line ( "" Inside the while statement "" ) ; } } print Line ( "" Hello from G ( ) "" ) ;break ; } } ",0
"staticvoid G1 ( ) { switch ( 5 ) { case 6:print Line ( "" 0 , fixed string "" ) ;break ;default: { int x ;x = ( rand ( ) % 3 ) ; if ( x == 0 ) { print Line ( "" Inside the if statement "" ) ; } else { print Line ( "" Inside the else statement "" ) ; } } print Line ( "" Hello from G ( ) "" ) ; break ; } } ",0
"staticvoid G1 ( ) { while ( 1 ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } break ; } ",0
"staticvoid G1 ( ) { while ( 1 ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; } ",0
"staticvoid G1 ( ) { while ( 1 ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; } ",0
"staticvoid G1 ( ) { while ( 1 ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; } ",0
"staticvoid G1 ( ) { while ( 1 ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } break ; } ",0
"staticvoid G1 ( ) { while ( 1 ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } break ; } ",0
"staticvoid G1 ( ) { while ( 1 ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } break ; } ",0
"staticvoid G1 ( ) { while ( 1 ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } break ; } ",0
"staticvoid G1 ( ) { while ( 1 ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } break ; } } ",0
"staticvoid G1 ( ) { while ( 1 ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; } ",0
staticvoid G1 ( ) { while ( 1 ) { { Two int sClass data ; data. int One = 1 ; data. int Two = 2 ; Two int sClass * po int er = new Two int sClass ; *po int er = data ; { Two int sClass data = *po int er ; print int Line ( data. int One ) ; print int Line ( data. int Two ) ; } delete po int er ; } break ; } } ,0
"staticvoid G1 ( ) { while ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } break ; } } ",0
"staticvoid G1 ( ) { while ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } break ; } ",0
"staticvoid G1 ( ) { while ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { while ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { while ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { while ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } break ; } } ",0
"staticvoid G1 ( ) { while ( 1 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } break ; } ",0
"staticvoid G1 ( ) { while ( 1 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { while ( 1 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
staticvoid G1 ( ) { while ( 1 ) { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } break ; } } ,0
"staticvoid G1 ( ) { while ( 1 ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { while ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } break ; } } ",0
"staticvoid G1 ( ) { while ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { while ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { while ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { while ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { while ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } break ; } } ",0
staticvoid G1 ( ) { { char * GChar = NULL ; GChar = ( char * ) malloc ( sizeof ( *GChar ) ) ; if ( GChar == NULL ) { exit ( -1 ) ; } *GChar = 'G' ; print HexCharLine ( *GChar ) ; free ( GChar ) ; } } ,0
"staticvoid G1 ( ) { { char * data ; char * * po int er = ( char * * ) ALLOCA ( sizeof ( char * ) ) ; data = "" string "" ; *po int er = data ; { char * data = *po int er ; print Line ( data ) ; } } } ",0
"staticvoid G1 ( ) { { char * password = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; size_t passwordLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",0
"staticvoid G1 ( ) { { char * password = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( password == NULL ) { exit ( -1 ) ; } size_t passwordLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",0
staticvoid G1 ( ) { { char data ; char * po int er = ( char * ) ALLOCA ( sizeof ( char ) ) ; data = 5 ; *po int er = data ; { char data = *po int er ; print HexCharLine ( data ) ; } } } ,0
staticvoid G1 ( ) { { char data ; char * po int er = ( char * ) malloc ( sizeof ( char ) ) ; if ( po int er == NULL ) { exit ( -1 ) ; } data = 5 ; *po int er = data ;*/ { char data = *po int er ; print HexCharLine ( data ) ; } free ( po int er ) ; } } ,0
"staticvoid G1 ( ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) < 0 ) { print Line ( "" snprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G1 ( ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G1 ( ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } ",0
"staticvoid G1 ( ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } ",0
"staticvoid G1 ( ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } ",0
"staticvoid G1 ( ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G1 ( ) { { char filename [ MAX_PATH ] = "" "" ; int fileDesc ; if ( GetTempFileNameA ( "" . "" , "" G "" , rand ( ) + 1 , filename ) == 0 ) { exit ( 1 ) ; } print Line ( filename ) ; fileDesc = OPEN ( filename , O_RDWR|O_CREAT|O_EXCL , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",0
"staticvoid G1 ( ) { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",0
"staticvoid G1 ( ) { { char path [ MAX_PATH ] ; req length ; length = GetCurrentDirectoryA ( MAX_PATH , path ) ; if ( length == 0 || length > = MAX_PATH ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print Line ( path ) ; } } ",0
"staticvoid G1 ( ) { { int i ;for ( i = 0 ; i < 10 ; i++ ) { print Line ( "" Inside the for statement "" ) ; } } print Line ( "" Hello from G ( ) "" ) ; } ",0
"staticvoid G1 ( ) { { int i = 0 ;while ( i++ < 10 ) { print Line ( "" Inside the while statement "" ) ; } } print Line ( "" Hello from G ( ) "" ) ; } ",0
"staticvoid G1 ( ) { { int int One = 1 , int Five = 5 ;print int Line ( int One ) ; int One = int Five ;print int Line ( int One ) ; } } ",0
"staticvoid G1 ( ) { { int x ;x = ( rand ( ) % 3 ) ; if ( x == 0 ) { print Line ( "" Inside the if statement "" ) ; } else { print Line ( "" Inside the else statement "" ) ; } } print Line ( "" Hello from G ( ) "" ) ; } ",0
"staticvoid G1 ( ) { { int x = ( rand ( ) % 3 ) ;switch ( x ) { case 0: print Line ( "" Inside the case statement "" ) ; break ; } } print Line ( "" Hello from G ( ) "" ) ; } ",0
"staticvoid G1 ( ) { { two int sStruct *two int sStructPo int er = NULL ; if ( ( two int sStructPo int er != NULL ) && ( two int sStructPo int er -> int One == 5 ) ) { print Line ( "" int One == 5 "" ) ; } } } ",0
"staticvoid G1 ( ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } ",0
"staticvoid G1 ( ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G1 ( ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G1 ( ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G1 ( ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G1 ( ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } ",0
"staticvoid G2 ( ) { if ( 1 ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF ) { print Line ( "" Ftc failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 1 ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
staticvoid G2 ( ) { if ( 1 ) { { char * GChar = NULL ; GChar = ( char * ) malloc ( sizeof ( *GChar ) ) ; if ( GChar == NULL ) { exit ( -1 ) ; } *GChar = 'G' ; print HexCharLine ( *GChar ) ; free ( GChar ) ; } } } ,0
staticvoid G2 ( ) { if ( 1 ) { { char data ; char * po int er = ( char * ) ALLOCA ( sizeof ( char ) ) ; data = 5 ; *po int er = data ; /* FIX: Assign a value to the thing po int ed to by po int er */ { char data = *po int er ; print HexCharLine ( data ) ; } } } } ,0
"staticvoid G2 ( ) { if ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G2 ( ) { if ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( 1 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G2 ( ) { if ( 1 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( 1 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( 1 ) { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",0
"staticvoid G2 ( ) { if ( 1 ) { { char path [ MAX_PATH ] ; req length ; length = GetCurrentDirectoryA ( MAX_PATH , path ) ; if ( length == 0 || length > = MAX_PATH ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print Line ( path ) ; } } } ",0
"staticvoid G2 ( ) { if ( 1 ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G2 ( ) { if ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G2 ( ) { if ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G2 ( ) { if ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF ) { print Line ( "" Ftc failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
staticvoid G2 ( ) { if ( 5 == 5 ) { { char data ; char * po int er = ( char * ) ALLOCA ( sizeof ( char ) ) ; data = 5 ; *po int er = data ; { char data = *po int er ; print HexCharLine ( data ) ; } } } } ,0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { char path [ MAX_PATH ] ; req length ; length = GetCurrentDirectoryA ( MAX_PATH , path ) ; if ( length == 0 || length > = MAX_PATH ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print Line ( path ) ; } } } ",0
staticvoid G2 ( ) { if ( 5 == 5 ) { { int * G int = NULL ; G int = ( int * ) malloc ( sizeof ( *G int ) ) ; if ( G int == NULL ) { exit ( -1 ) ; } *G int = 6 ; print int Line ( *G int ) ; free ( G int ) ; } } ,0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G2 ( ) { if ( 5 == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } ",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_FIVE == 5 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_FIVE == 5 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_FIVE == 5 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_TRUE ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_TRUE ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_TRUE ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_TRUE ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_TRUE ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( GLOBAL_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",0
"staticvoid G2 ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char path [ MAX_PATH ] ; req length ; length = GetCurrentDirectoryA ( MAX_PATH , path ) ; if ( length == 0 || length > = MAX_PATH ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print Line ( path ) ; } } } ",0
"staticvoid G2 ( ) { if ( STATIC_CONST_TRUE ) { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",0
"staticvoid G2 ( ) { if ( STATIC_CONST_TRUE ) { { char path [ MAX_PATH ] ; req length ; length = GetCurrentDirectoryA ( MAX_PATH , path ) ; if ( length == 0 || length > = MAX_PATH ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print Line ( path ) ; } } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { if ( Fts ( "" string "" , stdout ) == EOF ) { print Line ( "" Fts failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { */ char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! _Value "" ) ; } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { print Line ( "" Hello from G ( ) "" ) ; } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G2 ( ) { if ( gloBAL_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } ",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { print Line ( "" Inside the block "" ) ; } print Line ( "" Hello from G ( ) "" ) ; } } ",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G2 ( ) { if ( globalFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G2 ( ) { if ( globalReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G2 ( ) { if ( globalTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( globalTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( globalTrue ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( globalTrue ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( globalTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( globalTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G2 ( ) { if ( globalTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( globalTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G2 ( ) { if ( globalTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G2 ( ) { if ( globalTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( stATIC_CONST_FIVE == 5 ) { { int int One = 1 , int Two = 1 , int Sum = 0 ;print int Line ( int Sum ) ; int Sum = int One + int Two ;print int Line ( int Sum ) ; } } } ",0
"staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { char data ; char * po int er = ( char * ) ALLOCA ( sizeof ( char ) ) ; data = 5 ; *po int er = data ; { char data = *po int er ; print HexCharLine ( data ) ; } } } } ,0
"staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { int int One = 1 , int Two = 1 , int Sum = 0 ; print int Line ( int Sum ) ; int Sum = int One + int Two ; print int Line ( int Sum ) ; } } } ",0
staticvoid G2 ( ) { if ( stATIC_CONST_TRUE ) { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ,0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fread ( ( char * ) data , sizeof ( char ) , ( size_t ) ( 100-1 ) , stdin ) != 100-1 ) { print Line ( "" fread failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G2 ( ) { if ( staticFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! _Value01 "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { char filename [ ] = "" /tmp/fileXXXXXX "" ; int fileDesc = MKSTEMP ( filename ) ; print Line ( filename ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",0
staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ,0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G2 ( ) { if ( staticReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { print Line ( "" Hello from G ( ) "" ) ; } } ",0
staticvoid G2 ( ) { if ( staticTrue ) { { char data ; char * po int er = ( char * ) ALLOCA ( sizeof ( char ) ) ; data = 5 ; *po int er = data ; { char data = *po int er ; print HexCharLine ( data ) ; } } } } ,0
"staticvoid G2 ( ) { if ( staticTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
"staticvoid G2 ( ) { if ( staticTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G2 ( ) { if ( staticTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( staticTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( staticTrue ) { { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { if ( staticTrue ) { { char path [ MAX_PATH ] ; req length ; length = GetCurrentDirectoryA ( MAX_PATH , path ) ; if ( length == 0 || length > = MAX_PATH ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print Line ( path ) ; } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { { int int One = 1 , int Two = 1 , int Sum = 0 ; print int Line ( int Sum ) ; int Sum = int One + int Two ;print int Line ( int Sum ) ; } } } ",0
staticvoid G2 ( ) { if ( staticTrue ) { { short * GShort = NULL ; GShort = ( short * ) malloc ( sizeof ( *GShort ) ) ; if ( GShort == NULL ) { exit ( -1 ) ; } *GShort = 6 ; print ShortLine ( *GShort ) ; free ( GShort ) ; } } } ,0
"staticvoid G2 ( ) { if ( staticTrue ) { { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( staticTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } } } ",0
"staticvoid G2 ( ) { if ( staticTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G2 ( ) { if ( staticTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { if ( staticTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G2 ( ) { if ( staticTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G2 ( ) { if ( staticTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: if ( !ImpersonateSelf ( SecurityImpersonation ) { print Line ( "" fprintf failed! "" ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: if ( Ftc ( ( int ) 'A' , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: if ( Fts ( "" string "" , stdout ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: if ( PUTS ( "" string "" ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: if ( REMOVE ( "" removemebad.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: if ( RENAME ( OLD_BAD_FILE_NAME , "" newbadfilename.txt "" ) != 0 { print Line ( "" fprintf failed! "" ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: if ( fwprintf ( stdout , L "" %s "" , L "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: if ( fwrite ( ( char * ) "" string "" , sizeof ( char ) , strlen ( "" string "" ) , stdout ) != strlen ( "" string "" ) ) { print Line ( "" fwrite failed! "" ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: if ( putchar ( ( int ) 'A' ) == EOF { print Line ( "" fprintf failed! "" ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { Two int sClass * data ; data = new Two int sClass ; data -> int One = 5 ; data -> int Two = 6 ; Two int sClass * * po int er = new Two int sClass * ; *po int er = data ; { Two int sClass * data = *po int er ; print int Line ( data -> int One ) ; print int Line ( data -> int Two ) ; } delete po int er ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( SNprintf ( data , 100-strlen ( SRC ) -1 , "" %s "" , SRC ) == EOF ) { print Line ( "" SNprintf failed! "" ) ; } } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( scanf ( "" %99s",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; if ( fgets ( data , 100 , stdin ) == NULL ) { print Line ( "" fgets failed! "" ) ; exit ( 1 ) ; } print Line ( data ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { char filename [ 100 ] = "" "" ; struct STAT statBuffer ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { wchar_t dataBuffer [ 100 ] = "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( SNprintf ( data , 100-wcslen ( SRC ) -1 , L "" %s "" , SRC ) < 0 ) { print Line ( "" fgetws failed! "" ) ; } } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( fwscanf ( stdin , L "" %99s",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( sscanf ( SRC , "" %99s",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( swscanf ( SRC , L "" %99s",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; if ( wscanf ( L "" %99s",0
"staticvoid G2 ( ) { switch ( 6 ) { case 6: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
staticvoid GB2G ( ) { Two int sClass * data ;Two int sClass dataUninitArray [ 10 ] ;data = dataUninitArray ;goto source ;source:for ( int i = 0 ; i< ( 10/2 ) ; i++ ) { data [ i ] . int One = i ;data [ i ] . int Two = i ; } goto sink ;sink:or ( int i = 0 ; i<10 ; i++ ) { data [ i ] . int One = i ;data [ i ] . int Two = i ; } for ( int i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] . int One ) ;print int Line ( data [ i ] . int Two ) ; } } ,0
"staticvoid GB2G ( ) { char * data ; data = NULL ; data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; goto source ; source: data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; goto sink ; sink: free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; goto source ; source: data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; goto sink ; sink: free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; goto source ; source: data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; goto sink ; sink: free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; goto source ; source: data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; goto sink ; sink: free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; goto source ; source: data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; goto sink ; sink: free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; goto source ; source: data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; goto sink ; sink: free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; goto source ; source: data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; goto sink ; sink: free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; goto source ; source: data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; goto sink ; sink: free ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } else { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrueOrFalse ( ) ) { free ( data ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } else { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrueOrFalse ( ) ) { free ( data ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } else { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrueOrFalse ( ) ) { free ( data ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } else { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrueOrFalse ( ) ) { free ( data ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } else { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrueOrFalse ( ) ) { free ( data ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } else { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrueOrFalse ( ) ) { free ( data ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } else { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrueOrFalse ( ) ) { free ( data ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } else { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrueOrFalse ( ) ) { free ( data ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; while ( 1 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; } while ( 1 ) { free ( data ) ; break ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; while ( 1 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; } while ( 1 ) { free ( data ) ; break ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; while ( 1 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; } while ( 1 ) { free ( data ) ; break ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; while ( 1 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; } while ( 1 ) { free ( data ) ; break ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; while ( 1 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; } while ( 1 ) { free ( data ) ; break ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; while ( 1 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; } while ( 1 ) { free ( data ) ; break ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; while ( 1 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; } while ( 1 ) { free ( data ) ; break ; } } ",0
"staticvoid GB2G ( ) { char * data ; data = NULL ; while ( 1 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; } while ( 1 ) { free ( data ) ; break ; } } ",0
"staticvoid GB2G ( ) { char * data ;data = "" string "" ; print Line ( data ) ; } ",0
"staticvoid GB2G ( ) { char * data ;while ( 1 ) { break ; } while ( 1 ) { data = "" string "" ;print Line ( data ) ;break ; } } ",0
"staticvoid GB2G ( ) { char data ; data = ' ' ; data = CHAR_MAX ; if ( data < CHAR_MAX ) { char result = data + 1 ; print HexCharLine ( result ) ; } else { print Line ( "" data value is too large to perform arithmetic safely. "" ) ; } } ",0
staticvoid GB2G ( ) { double * data ; if ( globalReturnsTrueOrFalse ( ) ) { ; } else { ; } if ( globalReturnsTrueOrFalse ( ) ) { data = ( double * ) malloc ( sizeof ( double ) ) ; if ( data == NULL ) { exit ( -1 ) ; } *data = 5.0 ;print DoubleLine ( *data ) ; } else { data = ( double * ) malloc ( sizeof ( double ) ) ; if ( data == NULL ) { exit ( -1 ) ; } *data = 5.0 ;print DoubleLine ( *data ) ; } } ,0
staticvoid GB2G ( ) { double * data ;data = ( double * ) malloc ( sizeof ( double ) ) ; if ( data == NULL ) { exit ( -1 ) ; } *data = 5.0 ;print DoubleLine ( *data ) ; } ,0
staticvoid GB2G ( ) { double * data ;double dataUninitArray [ 10 ] ; data = dataUninitArray ;goto source ;source: ;goto sink ;sink: { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = ( double ) i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print DoubleLine ( data [ i ] ) ; } } } ,0
staticvoid GB2G ( ) { double data ;data = 5.0 ;print DoubleLine ( data ) ; } ,0
"staticvoid GB2G ( ) { float data ; data = 0.0F ; { #ifdef _WIN32 WSADATA wsaData ; int wsaDataInit = 0 ; #endif int recvResult ; struct sockaddr_in service ; SOCKET connectSocket = INVALID_SOCKET ; char inputBuffer [ CHAR_ARRAY_SIZE ] ; do { #ifdef _WIN32 if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , &wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; #endif connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( &service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr* ) &service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '",0
staticvoid GB2G ( ) { int 64_t data ;GB2GSource ( data ) ;print LongLongLine ( data ) ; } ,0
"staticvoid GB2G ( ) { int data ; data = 0 ; { WSADATA wsaData ; int wsaDataInit = 0 ; int recvResult ; struct sockaddr_in service ; SOCKET connectSocket = INVALID_SOCKET ; char inputBuffer [ CHAR_ARRAY_SIZE ] ; do { if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , &wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( &service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr* ) &service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '",0
staticvoid GB2G ( ) { int data ;data = 5 ;goto sink ;sink:print int Line ( data ) ; } ,0
"staticvoid GB2G ( ) { int i , k ; char * data ; data = NULL ; for ( i = 0 ; i < 1 ; i++ ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } for ( k = 0 ; k < 1 ; k++ ) { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { int i , k ; char * data ; data = NULL ; for ( i = 0 ; i < 1 ; i++ ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } for ( k = 0 ; k < 1 ; k++ ) { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { int i , k ; char * data ; data = NULL ; for ( i = 0 ; i < 1 ; i++ ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } for ( k = 0 ; k < 1 ; k++ ) { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { int i , k ; char * data ; data = NULL ; for ( i = 0 ; i < 1 ; i++ ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } for ( k = 0 ; k < 1 ; k++ ) { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { int i , k ; char * data ; data = NULL ; for ( i = 0 ; i < 1 ; i++ ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } for ( k = 0 ; k < 1 ; k++ ) { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { int i , k ; char * data ; data = NULL ; for ( i = 0 ; i < 1 ; i++ ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } for ( k = 0 ; k < 1 ; k++ ) { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { int i , k ; char * data ; data = NULL ; for ( i = 0 ; i < 1 ; i++ ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } for ( k = 0 ; k < 1 ; k++ ) { free ( data ) ; } } ",0
"staticvoid GB2G ( ) { int i , k ; char * data ; data = NULL ; for ( i = 0 ; i < 1 ; i++ ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } for ( k = 0 ; k < 1 ; k++ ) { free ( data ) ; } } ",0
staticvoid GB2G ( ) { long data ;while ( 1 ) { ;break ; } while ( 1 ) { data = 5L ;print LongLine ( data ) ;break ; } } ,0
"staticvoid GB2G1 ( ) { Two int sClass * data ;Two int sClass dataUninitArray [ 10 ] ;data = dataUninitArray ; if ( gloBAL_CONST_FIVE == 5 ) { ; } if ( gloBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { for ( int i = 0 ; i<10 ; i++ ) { data [ i ] . int One = i ;data [ i ] . int Two = i ; } for ( int i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] . int One ) ;print int Line ( data [ i ] . int Two ) ; } } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { free ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 8 ) { case 7: print Line ( "" 0 , fixed string "" ) ; break ; default: free ( data ) ; break ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 8 ) { case 7: print Line ( "" 0 , fixed string "" ) ; break ; default: free ( data ) ; break ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 8 ) { case 7: print Line ( "" 0 , fixed string "" ) ; break ; default: free ( data ) ; break ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 8 ) { case 7: print Line ( "" 0 , fixed string "" ) ; break ; default: free ( data ) ; break ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 8 ) { case 7: print Line ( "" 0 , fixed string "" ) ; break ; default: free ( data ) ; break ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 8 ) { case 7: print Line ( "" 0 , fixed string "" ) ; break ; default: free ( data ) ; break ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 8 ) { case 7: print Line ( "" 0 , fixed string "" ) ; break ; default: free ( data ) ; break ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 8 ) { case 7: print Line ( "" 0 , fixed string "" ) ; break ; default: free ( data ) ; break ; } } ",0
"staticvoid GB2G1 ( ) { char * data ; if ( 5 == 5 ) { data = NULL ; } if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { if ( data != NULL ) { print HexCharLine ( data [ 0 ] ) ; } else { print Line ( "" data is NULL "" ) ; } } } ",0
"staticvoid GB2G1 ( ) { char data ;data = 'C' ; if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { print HexCharLine ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { double * data ;data = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ; if ( stATIC_CONST_TRUE ) { ; } if ( stATIC_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { { int i ; for ( i = 0 ; i<10 ; i++ ) { data [ i ] = ( double ) i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print DoubleLine ( data [ i ] ) ; } } } } ",0
"staticvoid GB2G1 ( ) { double * data ;data = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ; if ( staticTrue ) { { int i ;for ( i = 0 ; i< ( 10/2 ) ; i++ ) { data [ i ] = ( double ) i ; } } } if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = ( double ) i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print DoubleLine ( data [ i ] ) ; } } } } ",0
"staticvoid GB2G1 ( ) { double * data ;data = new double [ 10 ] ; if ( 5 == 5 ) { ; } if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = ( double ) i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print DoubleLine ( data [ i ] ) ; } } delete [ ] data ; } } ",0
"staticvoid GB2G1 ( ) { double * data ;double dataUninitArray [ 10 ] ;data = dataUninitArray ; if ( 1 ) { ; } if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = ( double ) i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print DoubleLine ( data [ i ] ) ; } } } } ",0
"staticvoid GB2G1 ( ) { int * data ; int dataUninitArray [ 10 ] ;data = dataUninitArray ; if ( staticFive == 5 ) { { int i ;for ( i = 0 ; i< ( 10/2 ) ; i++ ) { data [ i ] = i ; } } } if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] ) ; } } } } ",0
"staticvoid GB2G1 ( ) { int 64_t data ; if ( globalFive == 5 ) { ; } if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { data = 5LL ;print LongLongLine ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { int data ; if ( gloBAL_CONST_TRUE ) { ; } if ( gloBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { data = 5 ;print int Line ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { int data ; if ( stATIC_CONST_FIVE == 5 ) { ; } if ( stATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { data = 5 ;print int Line ( data ) ; } } ",0
"staticvoid GB2G1 ( ) { int data ; if ( staticReturnsTrue ( ) ) { ; } if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { data = 5 ;print int Line ( data ) ; } } ",0
staticvoid GB2G1 ( ) { two int sStruct data ;data. int One = 0 ;data. int Two = 0 ;GB2G1Static = 0 ;GB2G1Sink ( data ) ; } ,0
"staticvoid GB2G1Sink ( two int sStruct data ) { if ( GB2G1Static ) { print Line ( "" 0 , fixed string "" ) ; } else { data. int One = 0 ;data. int Two = 0 ;print StructLine ( &data ) ; } } ",0
"staticvoid GB2G1Sink ( two int sStruct data ) { if ( GB2G1Static ) { print Line ( "" 0 , fixed string "" ) ;else { print StructLine ( &data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 1 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 1 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 1 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 1 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 1 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 1 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 1 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 1 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5 == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5 == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5 == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5 == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5 == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5 == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5 == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5 == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_TRUE ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_TRUE ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_TRUE ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_TRUE ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_TRUE ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_TRUE ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_TRUE ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_TRUE ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive == 5 ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsTrue ( ) ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { free ( data ) ; } } ",0
"staticvoid GB2G2 ( ) { char * data ; if ( 5 == 5 ) { data = NULL ; } if ( 5 == 5 ) { if ( data != NULL ) { print HexCharLine ( data [ 0 ] ) ; } else { print Line ( "" data is NULL "" ) ; } } } ",0
staticvoid GB2G2 ( ) { double * data ;data = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ; if ( stATIC_CONST_TRUE ) { ; } if ( stATIC_CONST_TRUE ) { { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = ( double ) i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print DoubleLine ( data [ i ] ) ; } } } } ,0
staticvoid GB2G2 ( ) { two int sStruct data ;data. int One = 0 ;data. int Two = 0 ;GB2G2Static = 1 ;GB2G2Sink ( data ) ; } ,0
staticvoid GB2G2Sink ( two int sStruct data ) { if ( GB2G2Static ) { print StructLine ( &data ) ; } } ,0
"staticvoid GB2GSource ( char * &data ) { ; } staticvoid GB2G ( ) { char * data ;GB2GSource ( data ) ;data = "" string "" ;print Line ( data ) ; } ",0
staticvoid GB2GSource ( int 64_t &data ) { data = 5LL ; } ,0
staticvoid GG2B ( ) { Two int sClass * data ;data = re int erpret_cast<Two int sClass *> ( malloc ( 10*sizeof ( Two int sClass ) ) ) ; if ( data == NULL ) { exit ( -1 ) ; } for ( int i = 0 ; i<10 ; i++ ) { data [ i ] . int One = i ;data [ i ] . int Two = i ; } for ( int i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] . int One ) ;print int Line ( data [ i ] . int Two ) ; } } ,0
"staticvoid GG2B ( ) { char * dat_Valuea ; data_Value = NULL ; while ( 1 ) { data_Value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_Value , "" A String "" ) ; print Line ( data_Value ) ; break ; } while ( 1 ) { ; break ; } } ",0
"staticvoid GG2B ( ) { char * data ; CWE78_OS_Command_Injection__char_connect_socket_w32_execv_34_unionType myUnion ; char dataBuffer [ 100 ] = COMMAND_ARG2 ; data = dataBuffer ; strcat ( data , "" *.* "" ) ; myUnion.unionFirst = data ; { char * data = myUnion.unionSecond ; { char *args [ ] = { COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL } ; EXECV ( COMMAND_ int _PATH , args ) ; } } } ",0
"staticvoid GG2B ( ) { char * data ; char * *dataPtr1 = &data ; char * *dataPtr2 = &data ; char dataBuffer [ 100 ] = COMMAND_ARG2 ; data = dataBuffer ; { char * data = *dataPtr1 ; strcat ( data , "" *.* "" ) ; *dataPtr1 = data ; } { char * data = *dataPtr2 ; { char *args [ ] = { COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL } ; EXECV ( COMMAND_ int _PATH , args ) ; } } } ",0
"staticvoid GG2B ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",0
staticvoid GG2B ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; data [ 0 ] = ',0
"staticvoid GG2B ( ) { char * data ; char dataBuffer [ 100 ] = COMMAND_ARG2 ; data = dataBuffer ; strcat ( data , "" *.* "" ) ; { char * dataCopy = data ; char * data = dataCopy ; { char *args [ ] = { COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL } ; EXECV ( COMMAND_ int _PATH , args ) ; } } } ",0
"staticvoid GG2B ( ) { char * data ; char dataBuffer [ 100 ] = COMMAND_ARG2 ; data = dataBuffer ; strcat ( data , "" *.* "" ) ; { char *args [ ] = { COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL } ; EXECV ( COMMAND_ int _PATH , args ) ; } } ",0
"staticvoid GG2B ( ) { char * data ; char data_buf [ 100 ] = FULL_COMMAND ; data = data_buf ; strcat ( data , "" *.* "" ) ; if ( SYSTEM ( data ) != 0 ) { print Line ( "" command execution failed! "" ) ; exit ( 1 ) ; } } ",0
"staticvoid GG2B ( ) { char * data ; char data_buf [ 100 ] = FULL_COMMAND ; data = data_buf ; strcat ( data , "" *.* "" ) ; { FILE *pipe ; pipe = POPEN ( data , "" w "" ) ; if ( pipe != NULL ) { PCLOSE ( pipe ) ; } } } ",0
"staticvoid GG2B ( ) { char * data ; data = "" string "" ;print Line ( data ) ; } ",0
"staticvoid GG2B ( ) { char * data ; data = NULL ; data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } ",0
"staticvoid GG2B ( ) { char * data ; data = NULL ; data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( datavalue4 , "" A String "" ) ; print Line ( datavalue4 ) ; } ",0
staticvoid GG2B ( ) { char * data ; data = NULL ; data = new char [ 100 ] ; delete [ ] data ; } ,0
"staticvoid GG2B ( ) { char * data ; data = NULL ; goto source ; source: data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; goto sink ; sink: } ",0
"staticvoid GG2B ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrueOrFalse ( ) ) { ; } else { ; } } ",0
"staticvoid GG2B ( ) { char * data ; data = NULL ; while ( 1 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; } while ( 1 ) { ; break ; } } ",0
"staticvoid GG2B ( ) { char * data ; data_valueq = NULL ; data_valueq = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valueq , "" A String "" ) ; print Line ( data_valueq ) ; } ",0
staticvoid GG2B ( ) { char * data ;char * &dataRef = data ;char dataBuffer [ 100 ] ;data = dataBuffer ;data [ 0 ] = ',0
staticvoid GG2B ( ) { char * data ;char dataBuffer [ 100 ] ;data = dataBuffer ;data [ 0 ] = ',0
"staticvoid GG2B ( ) { char * data ;while ( 1 ) { data = "" string "" ;break ; } while ( 1 ) { print Line ( data ) ;break ; } } ",0
"staticvoid GG2B ( ) { char * data_Value ; data_Value = NULL ; data_Value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_Value , "" A String "" ) ; print Line ( data_Value ) ; } ",0
"staticvoid GG2B ( ) { char * data_Value ; data_Value = NULL ; goto source ; source: data_Value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_Value , "" A String "" ) ; print Line ( data_Value ) ; goto sink ; sink: } ",0
"staticvoid GG2B ( ) { char * data_value ; data_value = NULL ; data_value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value , "" A String "" ) ; print Line ( data_value ) ; } ",0
"staticvoid GG2B ( ) { char * data_value ; data_value = NULL ; goto source ; source: data_value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value , "" A String "" ) ; print Line ( data_value ) ; goto sink ; sink: } ",0
"staticvoid GG2B ( ) { char * data_value ; data_value = NULL ; while ( 1 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value , "" A String "" ) ; print Line ( data_value ) ; break ; } while ( 1 ) { ; break ; } } ",0
"staticvoid GG2B ( ) { char * data_value01 ; data_value01 = NULL ; goto source ; source: data_value01 = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value01 , "" A String "" ) ; print Line ( data_value01 ) ; goto sink ; sink: } ",0
"staticvoid GG2B ( ) { char * data_value02 ; data_value02 = NULL ; while ( 1 ) { data_value02 = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value02 , "" A String "" ) ; print Line ( data_value02 ) ; break ; } while ( 1 ) { ; break ; } } ",0
"staticvoid GG2B ( ) { char * data_valuef ; data_valuef = NULL ; goto source ; source: data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuef , "" A String "" ) ; print Line ( data_valuef ) ; goto sink ; sink: } ",0
"staticvoid GG2B ( ) { char * data_valuef ; data_valuef = NULL ; while ( 1 ) { data_valuef = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuef , "" A String "" ) ; print Line ( data_valuef ) ; break ; } while ( 1 ) { ; break ; } } ",0
"staticvoid GG2B ( ) { char * data_values ; data_values = NULL ; while ( 1 ) { data_values = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_values , "" A String "" ) ; print Line ( data_values ) ; break ; } while ( 1 ) { ; break ; } } ",0
"staticvoid GG2B ( ) { char * data_valuev ; data_valuev = NULL ; data_valuev = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuev , "" A String "" ) ; print Line ( data_valuev ) ; } ",0
"staticvoid GG2B ( ) { char * data_valuex ; data_valuex = NULL ; goto source ; source: data_valuex = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuex , "" A String "" ) ; print Line ( data_valuex ) ; goto sink ; sink: } ",0
"staticvoid GG2B ( ) { char * data_valuez ; data_valuez = NULL ; goto source ; source: data_valuez = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuez , "" A String "" ) ; print Line ( data_valuez ) ; goto sink ; sink: } ",0
"staticvoid GG2B ( ) { char * data_valuez ; data_valuez = NULL ; while ( 1 ) { data_valuez = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuez , "" A String "" ) ; print Line ( data_valuez ) ; break ; } while ( 1 ) { ; break ; } } ",0
"staticvoid GG2B ( ) { char * datag ; datag = NULL ; datag = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( datag , "" A String "" ) ; print Line ( datag ) ; } ",0
staticvoid GG2B ( ) { char data ; data = ' ' ; data = 2 ; { char result = data + 1 ; print HexCharLine ( result ) ; } } ,0
staticvoid GG2B ( ) { double * data ;data = ( double * ) malloc ( 10*sizeof ( double ) ) ; if ( data == NULL ) { exit ( -1 ) ; } { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = ( double ) i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print DoubleLine ( data [ i ] ) ; } } } ,0
staticvoid GG2B ( ) { double * data ;data = ( double * ) malloc ( sizeof ( double ) ) ; if ( data == NULL ) { exit ( -1 ) ; } *data = 5.0 ;print DoubleLine ( *data ) ; } ,0
staticvoid GG2B ( ) { double * data ;double dataUninitArray [ 10 ] ;data = dataUninitArray ; { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = ( double ) i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print DoubleLine ( data [ i ] ) ; } } } ,0
staticvoid GG2B ( ) { double data ;data = 5.0 ;print DoubleLine ( data ) ; } ,0
staticvoid GG2B ( ) { float data ; data = 0.0F ; data = 2.0F ; { int result = ( int ) ( 100.0 / data ) ; print int Line ( result ) ; } } ,0
staticvoid GG2B ( ) { int * data ; data = NULL ; data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } free ( data ) ; } ,0
staticvoid GG2B ( ) { int * data ; int dataUninitArray [ 10 ] ;data = dataUninitArray ; { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = i ; } } { int i ; for ( i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] ) ; } } } ,0
staticvoid GG2B ( ) { int * data ; int dataUninitArray [ 10 ] ;data = dataUninitArray ; { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] ) ; } } } ,0
staticvoid GG2B ( ) { int * data ;data = ( int * ) ALLOCA ( 10*sizeof ( int ) ) ; { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] ) ; } } } ,0
staticvoid GG2B ( ) { int * data ;data = ( int * ) malloc ( 10*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] ) ; } } } ,0
staticvoid GG2B ( ) { int * data ;data = ( int * ) malloc ( sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } *data = 5 ;print int Line ( *data ) ; } ,0
staticvoid GG2B ( ) { int * data ;data = new int [ 10 ] ; { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = i ; } } { int i ;for ( i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] ) ; } } delete [ ] data ; } ,0
staticvoid GG2B ( ) { int 64_t data ;data = 5LL ;print LongLongLine ( data ) ; } ,0
staticvoid GG2B ( ) { int data ; data = 0 ; data = 2 ; { int result = data + 1 ; print int Line ( result ) ; } } ,0
"staticvoid GG2B ( ) { int h , j ; char * data ; data = NULL ; for ( h = 0 ; h < 1 ; h++ ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } for ( j = 0 ; j < 1 ; j++ ) { } } ",0
staticvoid GG2B ( ) { two int sStruct data ;data. int One = 1 ;data. int Two = 2 ;print int Line ( data. int One ) ;print int Line ( data. int Two ) ; } ,0
staticvoid GG2B ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; ; data [ 0 ] = L',0
"staticvoid GG2B1 ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",0
"staticvoid GG2B1 ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { data [ 0 ] = '",0
"staticvoid GG2B1 ( ) { char * data ; char data_buf [ 100 ] = FULL_COMMAND ; data = data_buf ; if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { strcat ( data , "" *.* "" ) ; } if ( SYSTEM ( data ) != 0 ) { print Line ( "" command execution failed! "" ) ; exit ( 1 ) ; } } ",0
"staticvoid GG2B1 ( ) { char * data ; char data_buf [ 100 ] = FULL_COMMAND ; data = data_buf ; if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { strcat ( data , "" *.* "" ) ; } { FILE *pipe ; pipe = POPEN ( data , "" w "" ) ; if ( pipe != NULL ) { PCLOSE ( pipe ) ; } } } staticvoid GG2B2 ( ) { char * data ; char data_buf [ 100 ] = FULL_COMMAND ; data = data_buf ; if ( 5 == 5 ) { strcat ( data , "" *.* "" ) ; } { FILE *pipe ; pipe = POPEN ( data , "" w "" ) ; if ( pipe != NULL ) { PCLOSE ( pipe ) ; } } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 1 ) { } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5 == 5 ) { } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FALSE ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_TRUE ) { } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE == 5 ) { ; } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE == 5 ) { } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( globalFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { ; } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( globalFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive == 5 ) { } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( globalReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrue ( ) ) { ; } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( staticFive!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive == 5 ) { } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; if ( staticReturnsFalse ( ) ) { print Line ( "" 0 , fixed string "" ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsTrue ( ) ) { } } ",0
"staticvoid GG2B1 ( ) { char * data ; data = NULL ; switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; } switch ( 7 ) { case 7: break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid GG2B1 ( ) { char * data ;char dataBuffer [ 100 ] ;data = dataBuffer ; if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { data [ 0 ] = '",0
"staticvoid GG2B1 ( ) { char * data ;char dataBuffer [ 100 ] ;data = dataBuffer ; if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { data [ 0 ] = '",0
"staticvoid GG2B2 ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",0
"staticvoid GG2B2 ( ) { char * data ; char data_buf [ 100 ] = FULL_COMMAND ; data = data_buf ; if ( 1 ) { strcat ( data , "" *.* "" ) ; } { FILE *pipe ; pipe = POPEN ( data , "" w "" ) ; if ( pipe != NULL ) { PCLOSE ( pipe ) ; } } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 1 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_Value , "" A String "" ) ; print Line ( data_Value09 ) ; } if ( 1 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( 1 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( datavalueA , "" A String "" ) ; print Line ( datavalueA ) ; } if ( 1 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5 == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 6 == 6 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuec , "" A String "" ) ; print Line ( data_valuec ) ; } if ( 5 == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE == 5 ) { } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_TRUE ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrue ( ) ) { ; } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsTrue ( ) ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; if ( staticTrue ) { datavalue = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( datavalue , "" A String "" ) ; print Line ( datavalue ) ; } if ( staticTrue ) { } } ",0
"staticvoid GG2B2 ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 7 ) { case 7: break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",0
"staticvoid GG2B2 ( ) { char * data ; data_value = NULL ; if ( globalFive == 5 ) { data_value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value , "" A String "" ) ; print Line ( data_value ) ; } if ( globalFive == 5 ) { } } ",0
staticvoid GG2B2 ( ) { char * data ;char dataBuffer [ 100 ] ;data = dataBuffer ; if ( 5 == 5 ) { data [ 0 ] = ',0
"staticvoid GG2B2 ( ) { char * data_Value ; data_Value = NULL ; if ( 1 ) { data_Value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_Value , "" A String "" ) ; print Line ( data_Value ) ; } if ( 1 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_Value ; data_Value = NULL ; if ( globalFive == 5 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_Value , "" A String "" ) ; print Line ( data_Value ) ; } if ( globalFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_Value ; data_Value = NULL ; if ( staticFive == 5 ) { data_Value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_Value , "" A String "" ) ; print Line ( data_Value ) ; } if ( staticFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_Value ; data_Value = NULL ; if ( staticTrue ) { data_Value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_Value , "" A String "" ) ; print Line ( data_Value ) ; } if ( staticTrue ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_value ; data_value = NULL ; if ( 1 ) { data_value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value , "" A String "" ) ; print Line ( data_value ) ; } if ( 1 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_value ; data_value = NULL ; if ( 5 == 5 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value , "" A String "" ) ; print Line ( data_value ) ; } if ( 5 == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_value ; data_value = NULL ; if ( GLOBAL_CONST_TRUE ) { data_value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data_value ) ; } if ( GLOBAL_CONST_TRUE ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_value ; data_value = NULL ; if ( GLOBAL_CONST_TRUE ) { data_value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value , "" A String "" ) ; print Line ( data_value ) ; } if ( GLOBAL_CONST_TRUE ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_value ; data_value = NULL ; if ( globalFive == 5 ) { data_value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value , "" A String "" ) ; print Line ( data_value ) ; } if ( globalFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_value ; data_value = NULL ; if ( staticFive == 5 ) { data_value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value , "" A String "" ) ; print Line ( data_value ) ; } if ( staticFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_value ; data_value = NULL ; if ( staticTrue ) { data_value = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_value , "" A String "" ) ; print Line ( data_value ) ; } if ( staticTrue ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_valueb ; data_valueb = NULL ; if ( GLOBAL_CONST_TRUE ) { data_valueb = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valueb , "" A String "" ) ; print Line ( data_valueb ) ; } if ( GLOBAL_CONST_TRUE ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_valuec ; data_value = NULL ; if ( staticFive == 5 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuec , "" A String "" ) ; print Line ( data_valuec) ; } if ( staticFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_valuef ; data_valuef = NULL ; if ( GLOBAL_CONST_TRUE ) { data_valuef = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuef , "" A String "" ) ; print Line ( data_valuef ) ; } if ( GLOBAL_CONST_TRUE ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_valuef ; data_valuef = NULL ; if ( globalFive == 5 ) { data_valuef = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuef , "" A String "" ) ; print Line ( data_valuef ) ; } if ( globalFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_valueq ; data_valueq = NULL ; if ( 1 ) { data_valueq = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valueq , "" A String "" ) ; print Line ( data_valueq ) ; } if ( 1 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_valueq ; data_valueq = NULL ; if ( staticTrue ) { data_valueq = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valueq , "" A String "" ) ; print Line ( data_valueq ) ; } if ( staticTrue ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_valueq ; data_valueq_valueq = NULL ; if ( 5 == 5 ) { data_valueq = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuew , "" A String "" ) ; print Line ( data_valuew ) ; } if ( 5 == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_values ; data_values = NULL ; if ( GLOBAL_CONST_TRUE ) { data_values = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_values , "" A String "" ) ; print Line ( data_values ) ; } if ( GLOBAL_CONST_TRUE ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_values ; data_values = NULL ; if ( globalFive == 5 ) { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_values , "" A String "" ) ; print Line ( data_values ) ; } if ( globalFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_valuev ; data = NULL ; if ( 1 ) { data_valuev = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuev , "" A String "" ) ; print Line ( data_valuev ) ; } if ( 1 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_valuew ; data_valuew = NULL ; if ( staticFive == 5 ) { data_valuew = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuew , "" A String "" ) ; print Line ( data_valuew ) ; } if ( staticFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * data_valuez ; data_valuez = NULL ; if ( globalFive == 5 ) { data_valuez = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data_valuez , "" A String "" ) ; print Line ( data_valuez ) ; } if ( globalFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * dataf ; dataf = NULL ; if ( staticTrue ) { dataf = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( dataf , "" A String "" ) ; print Line ( dataf ) ; } if ( staticTrue ) { } } ",0
"staticvoid GG2B2 ( ) { char * datah ; datah = NULL ; if ( 5 == 5 ) { datah = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( datah , "" A String "" ) ; print Line ( datah ) ; } if ( 5 == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * dataj ; dataj = NULL ; if ( staticFive == 5 ) { dataj = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( dataj , "" A String "" ) ; print Line ( dataj ) ; } if ( staticFive == 5 ) { } } ",0
"staticvoid GG2B2 ( ) { char * datav ; datav = NULL ; if ( staticTrue ) { datav = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( datav , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { } } ",0
"staticvoid GG2B2 ( ) { char * datavalue ; datavalue = NULL ; if ( staticFive == 5 ) { datavalue = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( datavalue , "" A String "" ) ; print Line ( datavalue ) ; } if ( staticFive == 5 ) { } } ",0
"staticvoid GG2BSink ( ) { char * data = CWE78_OS ; { char *args [ ] = { COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL } ; EXECV ( COMMAND_ int _PATH , args ) ; } } staticvoid GG2B ( ) { char * data ; char dataBuffer [ 100 ] = COMMAND_ARG2 ; data = dataBuffer ; strcat ( data , "" *.* "" ) ; CWE78_OS = data ; ",0
"staticvoid GG2BSink ( char * data ) { if ( GG2BStatic ) { } } staticvoid GG2B ( ) { char * data ; data = NULL ; data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; GG2BStatic = 1 ; /* true */ GG2BSink ( data ) ; } ",0
"staticvoid GG2BSink ( char * data ) { { char *args [ ] = { COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL } ; EXECV ( COMMAND_ int _PATH , args ) ; } } staticvoid GG2B ( ) { char * data ;void ( *funcPtr ) ( char * ) = GG2BSink ; char dataBuffer [ 100 ] = COMMAND_ARG2 ; data = dataBuffer ; strcat ( data , "" *.* "" ) ; funcPtr ( data ) ; } ",0
staticvoid GG2BSink ( two int sStruct data ) { if ( GG2BStatic ) { data. int One = 1 ;data. int Two = 1 ;print StructLine ( &data ) ; } } ,0
"staticvoid GG2BSource ( char * &data ) { data = "" string "" ; } staticvoid GG2B ( ) { char * data ;GG2BSource ( data ) ;print Line ( data ) ; } ",0
staticvoid GG2BSource ( two int sStruct * &data ) { { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] . int One = i ;data [ i ] . int Two = i ; } } } ,0
staticvoid GSource ( int &data ) { data = 5 ;print int Line ( data ) ; } ,0
staticvoid badSource ( char * &datafgh ) { ; } void bad ( ) { char * datahf ;badSource ( datahf ) ;print Line ( data ) ; } ,1
"staticvoid badVaSink ( char * data , ... ) { { char dest [ 100 ] = "" "" ; va_list args ; va_start ( args , data ) ; vsnprintf ( dest , 100-1 , data , args ) ; va_end ( args ) ; print Line ( dest ) ; } } ",1
"staticvoid badVaSink ( char * data , ... ) { { va_list args ; va_start ( args , data ) ; vprintf ( data , args ) ; va_end ( args ) ; } } ",1
"staticvoid badVaSink ( char * data , ... ) { { vfprintf ( stdout , data , args ) ; va_end ( args ) ; } } ",1
"staticvoid helperBad ( int int Bad ) { print Line ( "" igg "" ) ; } ",1
"staticvoid helperBad ( int int Bads ) { print Line ( "" iggs "" ) ; } ",1
staticvoid helperG1 ( int int G1 ) { print int Line ( int G1 ) ; } ,0
staticvoid period_certification ( mt32_t *random ) ,1
"strcat ( ggt , drrev ) ;",1
"strcat ( t , dev ) ;",1
"strcat ( tdasd , dggv ) ;",1
"strcat ( tgfdg , dte3ev ) ;",1
"strcat ( ttrtergd , derrgv ) ;",1
"strcmp ( name , variables [ l ] .name ) == 0",1
"strcmp ( name1 , variables [ i ].name1 ) == 0",1
"strcmp ( named , variable [ k ] .name ) == 0",1
"strcmp ( namer , variable [ j ] .name ) == 0",1
"strcpy ( abouturl_ascii , abouturl_petscii ) ;",1
"strcpy ( attr -> name , name ) ;",1
"strcpy ( attr -> name , name_Value ) ;",1
"strcpy ( dev , ifr.ifr_name ) ;",1
"strcpy ( ep->channel , channel ) ;",1
"strcpy ( hostname , hp -> h_name ) ;",1
"strcpy ( hostname1 , hp -> h_name1 ) ;",1
"strcpy ( hostname4 , hp -> h_name4 ) ;",1
"strlen ( "" tframe "" ) == 0",1
"strlen ( ""tframe"" ) = = 0",1
strlen ( INDEX ) ,1
strlen ( arg ) ,1
"strlen ( cp_response_phrase ( response -> hdr -> code ) ) , ",1
"strlen ( cp_response_phrase ( response->hdr->code ) ) , ",1
strlen ( form ) ,1
strlen ( ptr ) ,1
strlen ( q ) ! = 0,1
strlen ( reply ) ,1
strlen ( resource ) ,1
strlen ( session->value_1 ) ,1
strlen ( session->value_2 ) ,1
strlen ( str_temp ) ,1
strlen ( teststr ) ,1
"strncasecmp ( const char *s1 , const char *s2 , unsigned char n ) { unsigned char len ; return strncmp ( s1 , s2 , n ) ; } ",1
"strncasecmp ( const char *s1 , const char *sr2 , unsigned char nr ) { unsigned char len ; return strncmp ( s1 , s2 , nr ) ; } ",1
"strncasecmp ( const char *s14 , const char *s24 , unsigned char 4n ) { unsigned char len ; return strncmp ( s14 , s24 , n4 ) ; } ",1
"strncasecmp ( const char *sex , const char *sex , unsigned char n ) { unsigned char len ; return strncmp ( sex , sex , n ) ; } ",1
"strncat ( resolv_hostname , "" .local "" , RESOLV_CONF_MAX_DOMAIN_NAME_SIZE ) ;",1
"strncat ( resolv_hostname_Value , "" .local "" , RESOLV_CONF_MAX_DOMAIN_NAME_SIZE ) ;",1
struct dns_answer { u int 8_t type [ 2 ] ; } ,1
struct dns_answer { u int 8_t type [ 244 ] ; } ,1
struct dns_answer { u int 8_t type [ rr2 ] ; } ,1
struct dns_answer01 { u int 8_t type [ 55 ] ; } ,1
"struct h *hp ; struct in_addr myaddr ; char* tHost = ""trustme.ex.com"" ; myaddr.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddr , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct h1 *hp ; struct in_addr myaddr1 ; char* tHost = ""trustme.ex.com"" ; myaddr1.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddr1 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct h2 *hp ; struct in_addr myaddr2 ; char* tHost = ""trustme.ex.com"" ; myaddr2.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddr2 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct h3 *hp ; struct in_addr myaddr3 ; char* tHost = ""trustme.ex.com"" ; myaddr3.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddr3 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hA *hp ; struct in_addr myaddrA ; char* tHost = ""trustme.ex.com"" ; myaddr.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrA , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hA1 *hp ; struct in_addr myaddrA1 ; char* tHost = ""trustme.ex.com"" ; myaddrA1.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrA1 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hA3 *hp ; struct in_addr myaddrA3 ; char* tHost = ""trustme.ex.com"" ; myaddrA3.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrA3 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hAA2 *hp ; struct in_addr myaddrA2 ; char* tHost = ""trustme.ex.com"" ; myaddrAA2.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrAA2 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hAC2 *hp ; struct in_addr myaddrA2 ; char* tHost = ""trustme.ex.com"" ; myaddrAC2.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrAC2 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hAF2 *hp ; struct in_addr myaddrAF2 ; char* tHost = ""trustme.ex.com"" ; myaddrAF2.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrAF2 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hAK1 *hp ; struct in_addr myaddrAK1 ; char* tHost = ""trustme.ex.com"" ; myaddrAK1.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrAK1 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hAR2 *hp ; struct in_addr myaddrAR2 ; char* tHost = ""trustme.ex.com"" ; myaddrAR2.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrAR2 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hATR2 *hp ; struct in_addr myaddrATR2 ; char* tHost = ""trustme.ex.com"" ; myaddrATR2.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrATR2 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hATR2 *hp ; struct in_addr myaddrATR21 ; char* tHost = ""trustme.ex.com"" ; myaddrATR21.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrATR21 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hATR2 *hp ; struct in_addr myaddrATRM2 ; char* tHost = ""trustme.ex.com"" ; myaddrATRM2.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrATRM2 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hATRG2 *hp ; struct in_addr myaddrATRMG2 ; char* tHost = ""trustme.ex.com"" ; myaddrATRMG2.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrATRMG2 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hAX2 *hp ; struct in_addr myaddrA2 ; char* tHost = ""trustme.ex.com"" ; myaddrAX2.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrAX2 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
"struct hAY1 *hp ; struct in_addr myaddrAY1 ; char* tHost = ""trustme.ex.com"" ; myaddrAY1.s_addr = inet_addr ( ip_addr_string ) ; hp = gethostbyaddr ( ( char * ) &myaddrA1 , sizeof ( struct in_addr ) , AF_INET ) ; if ( hp && !strncmp ( hp-> h_name , tHost , sizeof ( tHost ) ) ) { trusted = true ; } else { trusted = false ; }",1
struct hostent* gethostbyname ( char *name ) ,1
struct hostent* gethostbyname ( char *name1 ) ,1
struct hostent* gethostbyname ( char *name2 ) ,1
struct hostent* gethostbyname ( char *name3 ) ,1
struct hostent* gethostbyname ( char *name4 ) ,1
struct hostent* gethostbyname ( char *name5 ) ,1
struct hostent* gethostbyname ( char *name6 ) ,1
struct hostent* gethostbyname ( const char *name ) ,1
struct ip_iovec *iov = ( struct ip_iovec * ) ( buf + alen - sizeof ( struct ip_iovec ) ) ; if ( buf = = NULL ) return NULL ; ,1
struct ip_iovec *iov = ( struct ip_iovec * ) ( buf + alen - sizeof ( struct ip_iovec ) ) ; if ( buf == NULL ) return NULL ;,1
struct ip_iovec *iov = ( struct ip_iovec1 * ) ( buf + alen - sizeof ( struct ip_iovec1 ) ) ; if ( buf == NULL ) return NULL ;,1
struct ip_iovec *iov = ( struct ip_iovec3 * ) ( buf + alen - sizeof ( struct ip_iovec3 ) ) ; if ( buf == NULL ) return NULL ;,1
"struct ip_iovec *v , *tail ; ",1
"system ( "" tset -c "" ) ;",1
"system ( "" tset -c1 "" ) ;",1
"system ( "" tset -c2 "" ) ;",1
"system ( "" tset -c3 "" ) ;",1
"system ( "" tset -c4 "" ) ;",1
system ( cmd ) ;,1
system ( cmd_buf ) ! = 0,1
system ( cmdsda_buf ) != 0 ) ,1
system(cmd_buf) != 0),1
system(cmdsda_buf) != 0),1
system(cmfdsfsd_buf) != 0),1
system(csdasmd_buf) != 0),1
"taticvoid G1 ( ) { switch ( 5 ) { case 6: print Line ( "" 0 , fixed string "" ) ; break ; default: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; if ( fscanf ( stdin , "" %99s",0
traceHandle prvTraceGetObjectNumber (void* handle ) { return (traceHandle ) uxQueueGetQueueNumber (handle ) ; },1
traceHandle prvTraceGetObjectNumberS4X (void* handleXC ) { return (traceHandleCC ) uxQueueGetQueueNumber (handleX3C ) ; },1
traceHandle prvTraceGetObjectNumberSX 22 (void* handleXC22 ) { return (traceHandleCC22 ) uxQueueGetQueueNumber (handleXC22) ; },1
traceHandle prvTraceGetObjectNumberScX (void* handleXcC ) { return (traceHandleCcC ) uxQueueGetQueueNumber (handleXcC ) ; },1
type struct params { t_t receive_handle ; t_t snoop_handle ; t_t send_handle ; mutex_t mutex ; condvar_t condvar ; message_t shared_msgs [MSG_QUEUE_SIZE] ; uint8_t shared_msg_queue_size ; uint8_t shared_msg_queue_index ; } bs_params_t ; ,0
"u int 16_t t01getCounterValue ( u int 32_t timer ) { u int _fast16_t voteOne , voteTwo , res ; voteTwo = t01CMSIS ( timer ) -> R ; do { voteOne = voteTwo ; voteTwo = t01CMSIS ( timer ) -> R ; if ( voteTwo > voteOne ) res = voteTwo - voteOne ; else if ( voteOne > voteTwo ) res = voteOne - voteTwo ; else res = 0 ; } while ( res > t01THRESHOLD ) ; return voteTwo ; } ",1
u int 32_t PCM_getEnabled int erruptStatus ( void ) { return PCM_get int erruptStatus ( ) & PCM -> IE ; } ,1
u int 32_t new_pda = pda & ~ ( 1 << j ) ;,1
u int 32_t new_pdaa = pdaa & ~ ( 1 << y ) ;,1
u int 32_t new_pdaass = pdaass & ~ ( 1 << y ) ;,1
u int 32_t new_pdad = pdad & ~ ( 1 << r ) ;,1
u int 32_t new_pdadss = pdadss & ~ ( 1 << r ) ;,1
u int 32_t new_pdas = pdas & ~ ( 1 << t ) ;,1
u int 32_t new_pdass = pdass & ~ ( 1 << j ) ;,1
u int 32_t new_pdasss = pdasss & ~ ( 1 << t ) ;,1
u int 32_t random ;,1
u int 8_t *buf = packed -> data ; if ( packed == NULL ) return 1 ;,1
u int 8_t *buf = packed -> data1 ; if ( packed1 == NULL ) return 1 ;,1
u int 8_t *random_pos = ( u int 8_t* ) &random ;,1
u int 8_t int errupt_getPriority ( u int 32_t int erruptNumber ) { ASSERT ( ( int erruptNumber > = 4 ) && ( int erruptNumber < ( NUM_ int ERRUPTS+1 ) ) ) ; return ( ( HWREG32 ( g_pulRegs [ int erruptNumber >> 2 ] ) >> ( 8 * ( int erruptNumber & 3 ) ) ) & 0xFF ) ; } ,1
u int _fast32_t ADC14_getResolution ( void ) { return ADC14 -> CTL1 & ADC14_CTL1_RES_MASK ; } ,1
uint16_t len = packed -> len ; if ( packed = = NULL ) return 1 ; ,1
"uint16_t t01getCounterValue ( uint32_t timer ) { uint_fast16_t voteOne , voteTwo , res ; voteTwo = t01CMSIS ( timer ) -> R ; do { voteOne = voteTwo ; voteTwo = t01CMSIS ( timer ) -> R ; if ( voteTwo > voteOne ) res = voteTwo - voteOne ; else if ( voteOne > voteTwo ) res = voteOne - voteTwo ; else res = 0 ; } while ( res > t01THRESHOLD ) ; return voteTwo ; } ",1
"uint32_t I_P_G ( void ) { uint32_t ulLoop , ulValue ; ulValue = SCB -> AIRCR & NVIC_APINT_PRIGROUP_M ; for ( ulLoop = 0 ; ulLoop < NUM_PRIORITY ; ulLoop++ ) { if ( ulValue = = g_pulPriority[ulLoop] ) { break ; } } ",1
uint32_t PCM_getEnabledInterruptStatus ( void ) { return PCM_getInterruptStatus ( ) & PCM -> IE ; } ,1
uint32_t PCM_getInterruptStatus ( void ) { return PCM -> IFG ; } ,1
uint32_t SYS_IsRegLocked ( void ) { return SYS -> REGLCTL & 1UL ? 0UL : 1UL ; } ,1
uint32_t SYS_IsRegLocked1 ( void ) { return SYS1 -> REGLCTL1 & 1UL ? 0UL : 1UL ; } ,1
uint32_t SYS_IsRegLocked2 ( void ) { return SYS2 -> REGLCTL2 & 1UL ? 0UL : 1UL ; } ,1
uint32_t SYS_IsRegLocked3 ( void ) { return SYS3 -> REGLCTL3 & 1UL ? 0UL : 1UL ; } ,1
uint32_t SYS_IsRegLocked4 ( void ) { return SYS4 -> REGLCTL4 & 1UL ? 0UL : 1UL ; } ,1
uint32_t SYS_IsRegLocked5 ( void ) { return SYS5 -> REGLCTL5 & 1UL ? 0UL : 1UL ; } ,1
uint32_t SYS_IsRegLocked6 ( void ) { return SYS6 -> REGLCTL6 & 1UL ? 0UL : 1UL ; } ,1
uint32_t SYS_IsRegLocked7 ( void ) { return SYS7 -> REGLCTL7 & 1UL ? 0UL : 1UL ; } ,1
uint32_t SYS_IsRegLocked8 ( void ) { return SYS8 -> REGLCTL8 & 1UL ? 0UL : 1UL ; } ,1
uint32_t SYS_IsRegLocked9 ( void ) { return SYS9 -> REGLCTL9 & 1UL ? 0UL : 1UL ; } ,1
uint32_t new_pda = pda & ~ ( 1 << j ) ; if ( new_pda ! = pda ) { PLAT->bank_x_pda.bits.pda = new_pda ; pda = PLAT->bank_x_pda.bits.pda ; OSL_DELAY ( 1 ) ; },1
uint32_t new_pda1 = pda & ~ ( 1 << k ) ; if ( new_pda ! = pda ) { PLAT->bank_x_pda.bits.pda = new_pda ; pda = PLAT->bank_x_pda.bits.pda ; OSL_DELAY ( 1 ) ; },1
uint32_t new_pda2 = pda & ~ ( 1 << l ) ; if ( new_pda ! = pda ) { PLAT->bank_x_pda.bits.pda = new_pda ; pda = PLAT->bank_x_pda.bits.pda ; OSL_DELAY ( 1 ) ; },1
uint32_t new_pda3 = pda & ~ ( 1 << g ) ; if ( new_pda ! = pda ) { PLAT->bank_x_pda.bits.pda = new_pda ; pda = PLAT->bank_x_pda.bits.pda ; OSL_DELAY ( 1 ) ; },1
uint32_t new_pda4 = pda & ~ ( 1 << f ) ; if ( new_pda ! = pda ) { PLAT->bank_x_pda.bits.pda = new_pda ; pda = PLAT->bank_x_pda.bits.pda ; OSL_DELAY ( 1 ) ; },1
"uint32_t prvDNS ) uint8_t * PayloadBuffer , size_t xBufferLength , BaseType_t xExpected ) { uint32_t size ; CP ) loadBuffer ) ; return size ; }",1
"uint32_t prvDNS1 ) uint8_t * PayloadBuffer , size_t xBufferLength , BaseType_t xExpected ) { uint32_t size1 ; CP ) loadBuffer ) ; return size1 ; }",1
"uint32_t prvDNS2 ) uint8_t * PayloadBuffer , size_t xBufferLength , BaseType_t xExpected ) { uint32_t size2 ; CP ) loadBuffer ) ; return size2 ; }",1
"uint32_t prvDNS3 ) uint8_t * PayloadBuffer , size_t xBufferLength , BaseType_t xExpected ) { uint32_t size3 ; CP ) loadBuffer ) ; return size3 ; }",1
"uint32_t prvDNS4 ) uint8_t * PayloadBuffer , size_t xBufferLength , BaseType_t xExpected ) { uint32_t size4 ; CP ) loadBuffer ) ; return size4 ; }",1
uint32_t prvIsNewTCB (void* pNewTCB ) { if (pCurrentTCB != pNewTCB ) { pCurrentTCB = pNewTCB ; return 1 ; } return 0 ; } ,1
uint32_t prvIsNewTCBCV (void* pNewTCBCV ) { if (pCurrentTCBCV != pNewTCBCV ) { pCurrentTCB = pNewTCB ; return 1 ; } return 0 ; } ,1
uint32_t prvIsNewTCBCV (void* pNewTCBCaV ) { if (pCurrentTCBCV != pNewTCBCaV ) { pCurrentTCaB = pNewTCaB ; return 1 ; } return 0 ; } ,1
uint8_t *buf = packed -> data ; if ( packed = = NULL ) return 1 ; ,1
uint8_t I_gP ( uint32_t iN ) { ASSERT ( ( iN > = 4 ) && ( iN < ( NUM_INTERRUPTS+1 ) ) ) ; return ( ( HWREG32 ( g_pulRegs[iN >> 2] ) >> ( 8 * ( iN & 3 ) ) ) & 0xFF ) ; } ,1
"uint8_t buf [128] , *rp , unpack [512] , more_data [1500] ; ",1
"uint8_t uStringCompare = 1 ; if ( TEST_PROTECT ( ) ) { uStringCompare = memcmp ( cpBuffer, cpBufferRead, testIotUART_BUFFER_LENGTH ) ; }",1
"uint8_t uStringCompare1 = 2 ; if ( TEST_PROTECT ( ) ) { uStringCompare1 = memcmp ( cpBuffer, cpBufferRead, testIotUART_BUFFER_LENGTH ) ; }",1
uint_fast32_t ADC14_getResolution ( void ) { return ADC14 -> CTL1 & ADC14_CTL1_RES_MASK ; } ,1
"umask ( 0 ) ; FILE *out ; out = fopen ( OA , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OA1 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OA10 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OA2 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OA3 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OA4 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OA5 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OA6 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OA7 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OA8 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OA9 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OAA , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OAA1 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OAA19 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OAA2 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OAA3 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OAA4 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OAA5 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OAA6 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OAA7 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OAA8 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"umask ( 0 ) ; FILE *out ; out = fopen ( OAA9 , ""w"" ) ; if ( out ) { fprintf ( out , ""hw"" ) ; fclose ( out ) ; }",1
"unsigned SEGGER_RTT_WriteSkipNoLock ( unsigned BufferIndex , const void* pBuffer , unsigned NumBytes) { unsigned Rem ; if ( Rem > NumBytes) { memcpy ( pRing->pBuffer + WrOff , pData , NumBytes) ; pRing->WrOff = WrOff + NumBytes ; } else { // // memcpy ( pRing->pBuffer + WrOff , pData , Rem) ; memcpy ( pRing->pBuffer , pData + Rem , NumBytes - Rem) ; pRing->WrOff = NumBytes - Rem ; } return 1 ; }",1
"unsigned SEGGER_RTT_WriteSkipNoLockx ( unsigned BufferIndex , const void* pBufferx , unsigned NumBytes) { unsigned Remx ; if ( Remx > NumBytes) { memcpy ( pRing->pBuffer + WrOff ,x pData , NumBytes) ; pRing->WrOffx = WrOff + NumBytes ; } else { // // memcpy ( pRing->pBuffer + WrOff , pData , Rem) ; memcpy ( pRing->pBuffer , pData + Rem , NumBytes - Rem) ; pRing->WrOff = NumBytes - Rem ; } return 1 ; }",1
unsigned char _buf [ BUFSIZE ] ; unsigned char *buf = _buf ; size_t buflen ; int res ;,1
unsigned char _buf [ BUFSIZE ] ; unsigned char *buf = _buf ; size_t buflen ; int rest ;,1
unsigned char _bufTest [ BUFSIZE ] ; unsigned char *bufTest = _buf ; size_t buflen ; int rest ;,1
unsigned char _bufTest [ BUFSIZE ] ; unsigned char *bufTest1 = _buf ; size_t buflenTest1 ; int resTest1 ;,1
unsigned char _buf[BUFSIZE] ; unsigned char *buf = _buf ; size_t buflen ; int res ; ,1
unsigned char prvTraceIsSchedulerSuspended ( ) { return xTaskGetSchedulerState ( ) == taskSCHEDULER_SUSPENDED ; },1
unsigned char prvTraceIsSchedulerSuspendedD3F ( ) { return xTaskGetSchedulerStateDF ( ) == taskSCHEDULER_SUSPENDEDD3F ; },1
unsigned char prvTraceIsSchedulerSuspendedDF22 ( ) { return xTaskGetSchedulerStateDF22 ( ) == taskSCHEDULER_SUSPENDEDDF2 ; },1
unsigned coreclock = atoi ( argv [ 2 ] ) ;,1
unsigned is_lse = atoi ( argv [ 4 ] ) ? 1 : 0 ; ,1
unsigned m = h; const unsigned step = ((mac>>9)&0x3) + 1; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[m].expire) m = h; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[m].expire) m = h; return &n[m]; } },1
unsigned m1 = h; const unsigned step = ((mac>>9)&0x3) + 1; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[m].expire) m1 = h; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[m1].expire) m = h; return &n[m]; } },1
unsigned ma1 = h; const unsigned step = ((mac>>9)&0x3) + 1; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[m].expire) ma1 = h; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[ma1].expire) ma1 = h; return &n[ma1]; } },1
unsigned maw1 = h; const unsigned step = ((mac>>9)&0x3) + 1; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[m].expire) maw1 = h; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[ma1].expire) maw1 = h; return &n[maw1]; } },1
unsigned mawe1 = h; const unsigned step = ((mac>>9)&0x3) + 1; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[mawe1].expire) mawe1 = h; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[maawe1].expire) maw1 = h; return &n[maw1]; } },1
unsigned mr = h; const unsigned step = ((mac>>9)&0x3) + 1; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[mr].expire) mr = h; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[mr].expire) mr = h; return &n[mr]; } } ,1
unsigned mraw = h; const unsigned step = ((mac>>9)&0x3) + 1; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[mraw].expire) mraw = h; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[mrwa].expire) mraw = h; return &n[mraw]; } } ,1
unsigned mrw = h; const unsigned step = ((mac>>9)&0x3) + 1; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[mrw].expire) mrw = h; h = next(h); if (n[h].mac == mac) return &n[h]; else { if (n[h].expire < n[mrw].expire) mrw = h; return &n[mrw]; } } ,1
unsigned pll_in = atoi ( argv [ 3 ] ) ;,1
unsigned short opt ; ,1
unsigned short optData ; ,1
unsigned short optName ; ,1
unsigned short optValues ; ,1
unsigned short optdate ; ,1
"uri_tests ( void ) { Suite suite ; suite = suite ( ""uri parser"" , NULL , NULL ) ; if ( !suite ) { fprintf ( stderr , ""test suite ( %s ) "" , CU_get_error_msg ( ) ) ; return NULL ; } return suite ; }",0
"using namespace std ; class_01 { class Bad Class { public: BadClass ( ) { initializeg ( ) ; } void initialize ( ) { initialized = true ; if ( !initialized ) { print Line ( "" Initializing... "" ) ; initializedg = true ; } } bool isInitializedg ( ) { return initializedg ; } private: bool initialized ; } ;void bad ( ) { BadClass badClassObject = BadClass ( ) ; cout << "" Initialized? "" ; if ( badClassObject.isInitialized ( ) ) { cout << "" true "" ; } else { cout << "" false "" ; } cout << endl ; } } ",1
"using namespace std ; class_01 { class BadClass { public: BadClass ( ) { initialize ( ) ; } void initialize ( ) { initialized = true ; if ( !initializedj ) { print Line ( "" Initializing... "" ) ; initializedj = true ; } } bool isInitialized ( ) { return initialized ; } private: bool initialized ; } ;void bad ( ) { BadClass badClassObject = BadClass ( ) ; cout << "" Initialized? "" ; if ( badClassObject.isInitialized ( ) ) { cout << "" true "" ; } else { cout << "" false "" ; } cout << endl ; } } ",1
"using namespace std ; class_01 { class BadClass { public: BadClass ( ) { initialize ( ) ; } void initialize ( ) { initialized = true ; if ( !initializedr ) { print Line ( "" Initializing... "" ) ; initializedr = true ; } } bool isInitialized ( ) { return initialized ; } private: bool initialized ; } ;void bad ( ) { BadClass badClassObject = BadClass ( ) ; cout << "" Initializedr? "" ; if ( badClassObject.isInitialized ( ) ) { cout << "" true "" ; } else { cout << "" false "" ; } cout << endl ; } } ",1
using namespace std ; namespace C { void bad ( ) { goto sink ; sink: { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
using namespace std ; namespace C { void bad ( ) { if ( 1 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
using namespace std ; namespace C { void bad ( ) { if ( 5 == 5 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
using namespace std ; namespace C { void bad ( ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
using namespace std ; namespace CW { void bad ( ) { if ( staticTrue ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',1
"using namespace std ; namespace CWE672 { staticvoid GB2G ( ) { list< int > data ; data.push_back ( 100 ) ; data.push_back ( 0 ) ; { list< int > ::iterator i ; cout << "" The list contains: "" ; for ( i = data.begin ( ) ; i != data.end ( ) ; i++ ) { cout << "" "" << *i ; } cout << endl ; } } ",0
"using namespace std ; namespace CWE672 { staticvoid GB2G1 ( ) { list< int > data ; if ( 1 ) { data.push_back ( 100 ) ; data.push_back ( 0 ) ; } if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { list< int > ::iterator i ; cout << "" The list contains: "" ; for ( i = data.begin ( ) ; i != data.end ( ) ; i++ ) { cout << "" "" << *i ; } cout << endl ; } } } ",0
"using namespace std ; namespace CWE672 { staticvoid GB2G2 ( ) { list< int > data ; if ( 1 ) { data.push_back ( 100 ) ; data.push_back ( 0 ) ; } if ( 1 ) { { list< int > ::iterator i ; cout << "" The list contains: "" ; for ( i = data.begin ( ) ; i != data.end ( ) ; i++ ) { cout << "" "" << *i ; } cout << endl ; } } } ",0
"using namespace std ; namespace CWE672 { staticvoid GG2B ( ) { list< int > data ; data.push_back ( 100 ) ; data.push_back ( 200 ) ; { list< int > ::iterator i ; cout << "" The list contains: "" ; for ( i = data.begin ( ) ; i != data.end ( ) ; i++ ) { if ( !*i ) { data.clear ( ) ; } cout << "" "" << *i ; } cout << endl ; } } ",0
"using namespace std ; namespace CWE672 { staticvoid GG2B1 ( ) { list< int > data ; if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { data.push_back ( 100 ) ; data.push_back ( 200 ) ; } if ( 1 ) { { list< int > ::iterator i ; cout << "" The list contains: "" ; for ( i = data.begin ( ) ; i != data.end ( ) ; i++ ) { if ( !*i ) { data.clear ( ) ; } cout << "" "" << *i ; } cout << endl ; } } } ",0
"using namespace std ; namespace CWE672 { staticvoid GG2B2 ( ) { list< int > data ; if ( 1 ) { data.push_back ( 100 ) ; data.push_back ( 200 ) ; } if ( 1 ) { { list< int > ::iterator i ; cout << "" The list contains: "" ; for ( i = data.begin ( ) ; i != data.end ( ) ; i++ ) { if ( !*i ) { data.clear ( ) ; } cout << "" "" << *i ; } cout << endl ; } } } ",0
using namespace std ; namespace CWE672 { void GB2GSink_c ( list< int > data ) ;void GB2GSink_b ( list< int > data ) { GB2GSink_c ( data ) ; } } ,0
using namespace std ; namespace CWE672 { void GG2BSink_c ( list< int > data ) ;void GG2BSink_b ( list< int > data ) { GG2BSink_c ( data ) ; } ,0
using namespace std ; namespace CWE676 { staticvoid G1 ( ) { goto sink ; sink: { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',0
"using namespace std ; namespace CWE676 { staticvoid G1 ( ) { if ( 0 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = '",0
"using namespace std ; namespace CWE676 { staticvoid G1 ( ) { if ( 5!= 5 ) { print Line ( "" 0 , fixed string "" ) ; } else { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = '",0
using namespace std ; namespace CWE676 { staticvoid G1 ( ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',0
using namespace std ; namespace CWE676 { staticvoid G2 ( ) { if ( 1 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',0
using namespace std ; namespace CWE676 { staticvoid G2 ( ) { if ( 5 == 5 ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',0
"using namespace std ; namespace class_01 { #ifndef OMITG class GClass { public: GClass ( ) { initialize ( ) ; } void initialize ( ) { initialized = false ; if ( !initialized ) { print Line ( "" Initializing... "" ) ; initialized = true ; } } bool isInitialized ( ) { return initialized ; } private: bool initialized ; } ; staticvoid G1 ( ) { GClass GClassObject = GClass ( ) ; cout << "" Initialized? "" ; if ( GClassObject.isInitialized ( ) ) { cout << "" true "" ; } else { cout << "" false "" ; } cout << endl ; } ",0
"using namespace std ; staticvoid G1 ( ) { if ( staticFalse ) { print Line ( "" 0 , fixed string "" ) ; } else { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = '",0
using namespace std ; staticvoid G2 ( ) { if ( staticTrue ) { { char charBuffer [ CHAR_BUFFER_SIZE ] ; cin.width ( CHAR_BUFFER_SIZE ) ; cin >> charBuffer ; charBuffer [ CHAR_BUFFER_SIZE-1 ] = ',0
usleep ( 10 ) ;,1
usleep ( 10000 ) ;,1
usleep ( 40000 ) ;,1
usleep ( 75000 ) ;,1
usleep ( 980000 ) ;,1
usleep ( asfr ) ;,1
usleep ( dad0 ) ;,1
"va_start ( ap , format ) ; rv = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap ) ; va_end ( ap ) ; ",1
"va_start ( ap1 , format ) ; rv1 = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap1 ) ; va_end ( ap1 ) ; ",1
"va_start ( ap10 , format ) ; rv10 = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap10 ) ; va_end ( ap10 ) ; ",1
"va_start ( ap2 , format ) ; rv2 = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap2 ) ; va_end ( ap2 ) ; ",1
"va_start ( ap3 , format ) ; rv3 = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap3 ) ; va_end ( ap3 ) ; ",1
"va_start ( ap4 , format ) ; rv4 = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap4 ) ; va_end ( ap4 ) ; ",1
"va_start ( ap5 , format ) ; rv5 = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap5 ) ; va_end ( ap5 ) ; ",1
"va_start ( ap6 , format ) ; rv6 = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap6 ) ; va_end ( ap6 ) ; ",1
"va_start ( ap7 , format ) ; rv7 = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap7 ) ; va_end ( ap7 ) ; ",1
"va_start ( ap8 , format ) ; rv8 = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap8 ) ; va_end ( ap8 ) ; ",1
"va_start ( ap9 , format ) ; rv9 = vsnprintf ( buffer , ~ ( size_t ) 0 , format , ap9 ) ; va_end ( ap9 ) ; ",1
val = getchar ( ) ;,1
"value.size ( ) + ct ( 0 , std::forward <Args> ( args ) ) ; p = cy ( p , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + ct1 ( 0 , std::forward <Args> ( args ) ) ; p1 = cy ( p1 , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + ct1w ( 0 , std::forward <Args> ( args ) ) ; p1w = cyw ( p1w , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + cta1 ( 0 , std::forward <Args> ( args ) ) ; pa1 = cy ( pa1 , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + cta1w ( 0 , std::forward <Args> ( args ) ) ; pa1w = cyw ( pa1w , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + ctd ( 0 , std::forward <Args> ( args ) ) ; pd = cy ( pd , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + ctd1 ( 0 , std::forward <Args> ( args ) ) ; pd1 = cy ( pd1 , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + ctde1 ( 0 , std::forward <Args> ( args ) ) ; pde1 = cy ( pde1 , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + ctdk ( 0 , std::forward <Args> ( args ) ) ; pdk = cyk ( pdk , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + ctf ( 0 , std::forward <Args> ( args ) ) ; pf = cy ( pf , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + ctfk ( 0 , std::forward <Args> ( args ) ) ; pfk = cy ( pfk , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + ctfu ( 0 , std::forward <Args> ( args ) ) ; pf = cyu ( pfu , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + ctfum ( 0 , std::forward <Args> ( args ) ) ; pfm = cyum ( pfum , std::forward <Args> ( args ) ) ;",1
"value.size ( ) + ctw ( 0 , std::forward <Args> ( args ) ) ; pw = cyw ( p , std::forward <Args> ( args ) ) ;",1
"vfprintf ( FILE * ONE __stream , const char * NTS __fmt , va_list __ap ) ",1
"vfprintf ( FILE *pStream , const char *pFormat , va_list ap ) ",1
"vfprintf ( ep->fp , fmt , ap ) ;",1
"vfprintf ( log_fd , format , ap ) ;",1
"vfprintf ( stderr , fmt , ap ) ;",1
"vfprintf ( stdout , data , args ) ;",1
"vfprintf ( stdout , pFormat , ap ) ;",1
"vfscanf ( FILE * ONE __stream , const char * NTS __fmt , va_list __ap ) ;",1
"vfscanf ( FILE *__stream , const char *__fmt , va_list __ap_Value ) ;",1
virtual ~BaseSerial ( ) { int r ; int err ; if ( ( serialReadFD ! = -1 ) || ( serialWriteFD ! = -1 ) ) { r = disconnect ( &err ) ; } } ,1
virtual ~BaseSerial ( ) { int r ; int err ; if ( ( serialReadFD != -1 ) || ( serialWriteFD != -1 ) ) { r = disconnect ( &err ) ; } } ,1
virtual ~BaseSerial ( ) { int r ; int err ; if ( ( serialReadFDValues ! = -1 ) || ( serialWriteFD ! = -1 ) ) { r = disconnect ( &err ) ; } } ,1
virtual ~BaseSerial ( ) { int rData ; int err ; if ( ( serialReadFD ! = -1 ) || ( serialWriteFD ! = -1 ) ) { r = disconnect ( &err ) ; } } ,1
virtual ~BaseSerial ( ) { int rInt ; int err ; if ( ( serialReadFD ! = -1 ) || ( serialWriteFD ! = -1 ) ) { r = disconnect ( &err ) ; } } ,1
virtual ~BaseSerial ( ) { int rName ; int err ; if ( ( serialReadFD ! = -1 ) || ( serialWriteFD ! = -1 ) ) { r = disconnect ( &err ) ; } } ,1
virtual ~BaseSerial ( ) { int rString ; int err ; if ( ( serialReadFD ! = -1 ) || ( serialWriteFD ! = -1 ) ) { r = disconnect ( &err ) ; } } ,1
"void *SDK_Malloc ( size_t size , size_t al ) { m *p_cb = NULL; uint32_t ali = SD ( size , al ) + al + sizeof ( m ) ; void *a , *p_addr = malloc ( ali ) ; if ( !p_addr ) { return NULL; } a = ( void * ) SD ( ( uint32_t ) p_addr + sizeof ( m ) , al ) ; p_cb = ( m * ) ( ( uint32_t ) a - 4 ) ; p_cb->id = SDK_MEM_MA; p_cb->offset = ( uint32_t ) a - ( uint32_t ) p_addr; return ( void * ) a; }",1
"void *SDK_Malloc ( size_t size , size_t alz ) { m *p_cb = NULL; uint32_t ali = SD ( size , alz ) + alz + sizeof ( m ) ; void *a , *p_addr = malloc ( aliz ) ; if ( !p_addr ) { return NULL; } a = ( void * ) SD ( ( uint32_t ) p_addr + sizeof ( m ) , alz ) ; p_cb = ( m * ) ( ( uint32_t ) a - 4 ) ; p_cb->id = SDK_MEM_MA; p_cb->offset = ( uint32_t ) a - ( uint32_t ) p_addr; return ( void * ) a; }",1
"void *SDK_Malloc ( size_t size1 , size_t al1 ) { m *p_cb = NULL; uint32_t ali1 = SD ( size , al1 ) + al1 + sizeof ( m ) ; void *a , *p_addr = malloc ( ali ) ; if ( !p_addr ) { return NULL; } a1 = ( void * ) SD ( ( uint32_t ) p_addr + sizeof ( m ) , al1 ) ; p_cb = ( m * ) ( ( uint32_t ) a - 4 ) ; p_cb->id = SDK_MEM_MA; p_cb->offset = ( uint32_t ) a - ( uint32_t ) p_addr; return ( void * ) a1; }",1
"void *SDK_Malloc ( size_t size2 , size_t al2 ) { m *p_cb = NULL; uint32_t ali2 = SD ( size , al1 ) + al2 + sizeof ( m ) ; void *a , *p_addr = malloc ( ali ) ; if ( !p_addr ) { return NULL; } a2 = ( void * ) SD ( ( uint32_t ) p_addr + sizeof ( m ) , a2 ) ; p_cb = ( m * ) ( ( uint32_t ) a - 4 ) ; p_cb->id = SDK_MEM_MA; p_cb->offset = ( uint32_t ) a - ( uint32_t ) p_addr; return ( void * ) a2; ",1
"void *SDK_Malloc ( size_t sizea , size_t ala ) { m *p_cb = NULL; uint32_t alia = SD ( size , ala ) + ala + sizeof ( m ) ; void *a , *p_addr = malloc ( alia ) ; if ( !p_addr ) { return NULL; } a = ( void * ) SD ( ( uint32_t ) p_addr + sizeof ( m ) , ala ) ; p_cb = ( m * ) ( ( uint32_t ) a - 4 ) ; p_cb->id = SDK_MEM_MA; p_cb->offset = ( uint32_t ) a - ( uint32_t ) p_addr; return ( void * ) a; }",1
"void *SDK_Malloc ( size_t sizes , size_t als ) { m *p_cb = NULL; uint32_t alis = SD ( size , als ) + als + sizeof ( m ) ; void *a , *p_addr = malloc ( alis ) ; if ( !p_addr ) { return NULL; } a = ( void * ) SD ( ( uint32_t ) p_addr + sizeof ( m ) , als ) ; p_cb = ( m * ) ( ( uint32_t ) a - 4 ) ; p_cb->id = SDK_MEM_MA; p_cb->offset = ( uint32_t ) a - ( uint32_t ) p_addr; return ( void * ) a; }",1
"void *SDK_Malloc ( size_t sizex , size_t alx ) { m *p_cb = NULL; uint32_t alix = SD ( size , alx ) + alx + sizeof ( m ) ; void *a , *p_addr = malloc ( alix ) ; if ( !p_addr ) { return NULL; } a = ( void * ) SD ( ( uint32_t ) p_addr + sizeof ( m ) , alx ) ; p_cb = ( m * ) ( ( uint32_t ) a - 4 ) ; p_cb->id = SDK_MEM_MA; p_cb->offset = ( uint32_t ) a - ( uint32_t ) p_addr; return ( void * ) a; }",1
"void A_decryptData ( uint32_t m_i , const uint8_t * data , uint8_t * decryptedData ) { uint_fast8_t i ; uint16_t tempData = 0 ; uint16_t tempVariable = 0 ; A_CMSIS ( m_i ) -> CTL0 | = ( A_CTL0_OP_3 ) ; ",1
"void A_disable int errupt ( u int 32_t m_i ) { BP ( A_CMSIS ( m_i ) -> CTL0 , A_CTL0_RDYIE_OFS ) = 0 ; } ",1
"void A_disableInterrupt ( uint32_t m_i ) { BP ( A_CMSIS ( m_i ) -> CTL0 , A_CTL0_RDYIE_OFS ) = 0 ; } ",1
"void A_enableInterrupt ( uint32_t m_i ) { BP ( A_CMSIS ( m_i ) -> CTL0 , A_CTL0_RDYIE_OFS ) = 1 ; } ",1
"void A_encryptData ( u int 32_t m_i , const u int 8_t * data , u int 8_t * encryptedData ) { u int _fast8_t i ; u int 16_t tempData = 0 ; u int 16_t tempVariable = 0 ;",1
"void A_encryptData ( uint32_t m_i , const uint8_t * data , uint8_t * encryptedData ) { uint_fast8_t i ; uint16_t tempData = 0 ; uint16_t tempVariable = 0 ; ",1
"void A_registerInterrupt ( uint32_t m_i , void ( *intHandler ) ( void ) ) { Interrupt_registerInterrupt ( INT_AES256 , intHandler ) ; Interrupt_enableInterrupt ( INT_AES256 ) ; } ",1
"void CWE401_Memory_Leak__char_calloc_04_bad ( ) { char * data ; data = NULL ; if ( STATIC_CONST_TRUE ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_TRUE ) { } } ",1
"void C_disableModule ( u int 32_t m_i ) { BP ( EUSCI_B_CMSIS ( m_i ) -> CTLW0 , EUSCI_B_CTLW0_SWRST_OFS ) = 1 ; ; } ",1
"void C_disableModule ( uint32_t m_i ) { BP ( EUSCI_B_CMSIS ( m_i ) -> CTLW0 , EUSCI_B_CTLW0_SWRST_OFS ) = 1 ; ; } ",1
"void C_disableMultiMasterMode ( uint32_t m_i ) { BP ( EUSCI_B_CMSIS ( m_i ) -> CTLW0 , EUSCI_B_CTLW0_SWRST_OFS ) = 1 ; BP ( EUSCI_B_CMSIS ( m_i ) -> CTLW0 , EUSCI_B_CTLW0_MM_OFS ) = 0 ; } ",1
"void C_set16BitData ( u int 16_t dataIn , u int _fast8_t crcType ) { ASSERT ( ( CRC16_MODE == crcType ) || ( C_MODE == crcType ) ) ; if ( CRC16_MODE == crcType ) CRC32 -> DI16 = dataIn ; else CRC32 -> DI32 = dataIn ; } ",1
"void C_set16BitData ( uint16_t dataIn , uint_fast8_t crcType ) { ASSERT ( ( CRC16_MODE = = crcType ) || ( C_MODE = = crcType ) ) ; if ( CRC16_MODE = = crcType ) CRC32 -> DI16 = dataIn ; else CRC32 -> DI32 = dataIn ; } ",1
"void C_set16BitDataReversed ( uint16_t dataIn , uint_fast8_t crcType ) { ASSERT ( ( CRC16_MODE = = crcType ) || ( C_MODE = = crcType ) ) ; if ( CRC16_MODE = = crcType ) CRC32 -> DIRB16 = dataIn ; else CRC32 -> DIRB32 = dataIn ; } ",1
void C_set32BitData ( uint32_t dataIn ) { //CRC32 -> DI32 = dataIn & 0xFFFF ; //CRC32 -> DI32 = ( uint16_t ) ( ( dataIn & 0xFFFF0000 ) >> 16 ) ; HWREG16 ( & ( CRC32 -> DI32 ) ) = dataIn & 0xFFFF ; HWREG16 ( & ( CRC32 -> DI32 ) ) = ( uint16_t ) ( ( dataIn & 0xFFFF0000 ) >> 16 ) ; ,1
"void C_set8BitDataReversed ( uint8_t dataIn , uint_fast8_t crcType ) { ASSERT ( ( CRC16_MODE = = crcType ) || ( C_MODE = = crcType ) ) ; if ( CRC16_MODE = = crcType ) HWREG8 ( & ( CRC32 -> DIRB16 ) ) = dataIn ; else HWREG8 ( & ( CRC32 -> DIRB32 ) ) = dataIn ; } ",1
"void Callbacks_InterfaceSettingChanged ( char iface , char setting ) { TRACE_INFO_WP ( ""InterfaceSettingChanged "" ) ; }",0
void D_requestChannel ( u int 32_t channelNum ) { ASSERT ( ( channelNum & 0xffff ) < 8 ) ; D_Control -> SWREQ = 1 << ( channelNum & 0x0F ) ; } ,1
void D_requestChannel ( uint32_t channelNum ) { ASSERT ( ( channelNum & 0xffff ) < 8 ) ; D_Control -> SWREQ = 1 << ( channelNum & 0x0F ) ; } ,1
void D_setControlBase ( void *CT ) { ASSERT ( ( ( u int 32_t ) CT & ~0x3FF ) == ( u int 32_t ) CT ) ; ASSERT ( ( u int 32_t ) CT > = 0x20000000 ) ; D_Control -> CTLBASE = ( u int 32_t ) CT ; } ,1
void D_setControlBase ( void *CT ) { ASSERT ( ( ( uint32_t ) CT & ~0x3FF ) = = ( uint32_t ) CT ) ; ASSERT ( ( uint32_t ) CT > = 0x20000000 ) ; D_Control -> CTLBASE = ( uint32_t ) CT ; } ,1
void DefaultBFH ( ) { while ( 10 ) { } } ,1
void DefaultHFH ( ) { while ( 10 ) { } } ,1
void DefaultHandler ( ) { } ,1
void DefaultHardFaultHandler ( ) { while ( 1 ) { } } ,1
void DefaultMFH ( ) { while ( 10 ) { } } ,1
void DefaultUFH ( ) { while ( 10 ) { } } ,1
void F_disableModule ( void ) { SCB -> CPACR = ( ( SCB -> CPACR & ~ ( S_C_CP10_MASK | S_C_CP11_MASK ) ) ) ; } ,1
void F_disableStacking ( void ) { F -> F & = ~ ( F_F_ASPEN_Msk | F_F_LSPEN_Msk ) ; } ,1
void F_enableLazyStacking ( void ) { F -> F | = F_F_ASPEN_Msk | F_F_LSPEN_Msk ; } ,1
void F_enableModule ( void ) { SCB -> CPACR = ( ( SCB -> CPACR & ~ ( S_C_CP11_MASK | S_C_CP10_MASK ) ) | S_C_CP11_MASK | S_C_CP10_MASK ) ; } ,1
void F_enableStacking ( void ) { F -> F = ( F -> F & ~F_F_LSPEN_Msk ) | F_F_ASPEN_Msk ; } ,1
void F_setFlushToZeroMode ( uint32_t mode ) { F -> FPDSCR = ( F -> FPDSCR & ~ ( F_FPDSCR_FZ_Msk ) ) | mode ; } ,1
void F_setHalfPrecisionMode ( u int 32_t mode ) { F -> FPDSCR = ( F -> FPDSCR & ~ ( F_FPDSCR_AHP_Msk ) ) | mode ; } ,1
void F_setHalfPrecisionMode ( uint32_t mode ) { F -> FPDSCR = ( F -> FPDSCR & ~ ( F_FPDSCR_AHP_Msk ) ) | mode ; } ,1
void F_setNaNMode ( u int 32_t mode ) { F -> FPDSCR = ( F -> FPDSCR & ~ ( F_FPDSCR_DN_Msk ) ) | mode ; } ,1
void F_setNaNMode ( uint32_t mode ) { F -> FPDSCR = ( F -> FPDSCR & ~ ( F_FPDSCR_DN_Msk ) ) | mode ; } ,1
void F_setRoundingMode ( uint32_t mode ) { F -> FPDSCR = ( F -> FPDSCR & ~ ( F_FPDSCR_RMode_Msk ) ) | mode ; } ,1
"void Free ( void * pv ) { CP ( pv != NULL , CP ( CPR ( pv ) == sizeof ( UD ) , free ( pv- sizeof ( UD ) ) ; }",1
"void Free ( void * pv1 ) { CP ( pv1 != NULL , CP ( CPR ( pv1 ) == sizeof ( UD1 ) , free ( pv- sizeof ( UD1 ) ) ; }",1
"void Free ( void * pv2 ) { CP ( pv2 != NULL , CP ( CPR ( pv2 ) == sizeof ( UD2 ) , free ( pv- sizeof ( UD2 ) ) ; }",1
"void Free ( void * pv3 ) { CP ( pv3 != NULL , CP ( CPR ( pv3 ) == sizeof ( UD3 ) , free ( pv- sizeof ( UD3 ) ) ; }",1
"void Free ( void * pv4 ) { CP ( pv4 != NULL , CP ( CPR ( pv4 ) == sizeof ( UD4 ) , free ( pv- sizeof ( UD4 ) ) ; }",1
"void Free ( void * pv5 ) { CP ( pv5 != NULL , CP ( CPR ( pv5 ) == sizeof ( UD5 ) , free ( pv- sizeof ( UD5 ) ) ; }",1
void G ( ) { G1 ( ) ; } ,0
void G ( ) { G2 ( ) ; } ,0
void G ( ) { G3 ( ) ; } ,0
void G ( ) { G4 ( ) ; } ,0
void G ( ) { G5 ( ) ; } ,0
void G ( ) { G6 ( ) ; } ,0
void G ( ) { G7 ( ) ; } ,0
"void G ( ) { char data ; data = 2 ; fscanf ( stdin , "" %c "" , &data ) ; { char result = data + 1 ; } } ",0
void G ( ) { data = 0 ; data = 2 ; { int result = data + 1 ; print int Line ( result ) ; } } ,0
void GB2GSink ( double * * data ) ;staticvoid GB2G ( ) { double * data ;data = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ; ; GB2GSink ( &data ) ; } ,0
void GB2GSink ( list<long> dataList ) { long data = dataList.back ( ) ; print LongLine ( data ) ; } ,0
void GB2GSink ( void * dataVoidPtr ) ;staticvoid GB2G ( ) { double data ; ;GB2GSink ( &data ) ; } ,0
"void GB2GSink ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ;char * data = ( *dataPtr ) ;data = "" string "" ;print Line ( data ) ; } ",0
"void GB2GSink ( void * dataVoidPtr ) { char * dataPtr = ( char * ) dataVoidPtr ; char data = ( *dataPtr ) ; if ( data < CHAR_MAX ) { char result = data + 1 ; print HexCharLine ( result ) ; } else { print Line ( "" data value is too large to perform arithmetic safely. "" ) ; } } ",0
void GG2BSink ( ) ; staticvoid GG2B ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ;data [ 0 ] = ',0
"void GG2BSink ( char * data ) ; staticvoid GG2B ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",0
void GG2BSink ( char * data ) ;void GG2BSink ( char * data ) { GG2BSink ( data ) ; } ,0
"void GG2BSink ( char * data ) { { char *args [ ] = { COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL } ; EXECV ( COMMAND_ int _PATH , args ) ; } } staticvoid GG2B ( ) { char * data ; char dataBuffer [ 100 ] = COMMAND_ARG2 ; data = dataBuffer ; strcat ( data , "" *.* "" ) ; CWE78_OS_Command_Injection__char_connect_socket_w32_execv_41_GG2BSink ( data ) ; } ",0
"void GG2BSink ( char * data ) { { char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",0
"void GG2BSink ( char * data ) { { memset ( dest , 'C' , 100-1 ) ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",0
"void GG2BSink ( char * data ) { { size_t i , destLen ; char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",0
"void GG2BSink ( char * dataArray [ ] ) { char * data = dataArray [ 2 ] ; { char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",0
void GG2BSink ( char data ) ; staticvoid GG2B ( ) { char data ;void ( *funcPtr ) ( char ) = GG2BSink ; data = ' ' ; data = 2 ; funcPtr ( data ) ; } ,0
"void GG2BSink ( char_cat_67_structType myStruct ) { char * data = myStruct.structFirst ; { char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",0
void GG2BSink ( double * * data ) ;staticvoid GG2B ( ) { double * data ;data = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ; { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = ( double ) i ; } } GG2BSink ( &data ) ; } ,0
void GG2BSink ( list<long> dataList ) { long data = dataList.back ( ) ;data = 10L ;print LongLine ( data ) ; } ,0
"void GG2BSink ( list<wchar_t> dataList ) ;staticvoid GG2B ( ) { wchar_t data ;list<wchar_t> dataList ;data = L'W' ;printf ( "" %02lx "" , data ) ;dataList.push_back ( data ) ;dataList.push_back ( data ) ;dataList.push_back ( data ) ;GG2BSink ( dataList ) ; } ",0
"void GG2BSink ( map< int , char> dataMap ) ; staticvoid GG2B ( ) { char data ; map< int , char> dataMap ; data = ' ' ; data = 2 ; dataMap [ 0 ] = data ; dataMap [ 1 ] = data ; dataMap [ 2 ] = data ; GG2BSink ( dataMap ) ; } ",0
"void GG2BSink ( vector<char *> dataVector ) ; staticvoid GG2B ( ) { char * data ; vector<char *> dataVector ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",0
void GG2BSink ( void * dataVoidPtr ) ;staticvoid GG2B ( ) { double data ;data = 5.0 ;GG2BSink ( &data ) ; } ,0
void GG2BSink ( void * dataVoidPtr ) ;staticvoid GG2B ( ) { int * data ;data = ( int * ) ALLOCA ( 10*sizeof ( int ) ) ; { int i ;for ( i = 0 ; i<10 ; i++ ) { data [ i ] = i ; } } ,0
void GG2BSink ( void * dataVoidPtr ) { Two int sClass * * dataPtr = ( Two int sClass * * ) dataVoidPtr ;Two int sClass * data = ( *dataPtr ) ;for ( int i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] . int One ) ;print int Line ( data [ i ] . int Two ) ; } } ,0
void GG2BSink ( void * dataVoidPtr ) { char * * dataPtr = ( char * * ) dataVoidPtr ;char * data = ( *dataPtr ) ;print Line ( data ) ; } ,0
void GG2BSink ( void * dataVoidPtr ) { char * dataPtr = ( char * ) dataVoidPtr ; char data = ( *dataPtr ) ; { char result = data + 1 ; print HexCharLine ( result ) ; } } ,0
void GG2BSink ( void * dataVoidPtr ) { int * * dataPtr = ( int * * ) dataVoidPtr ; int * data = ( *dataPtr ) ; { int i ;for ( i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] ) ; } } delete [ ] data ; } ,0
void GG2BSource ( double * &data ) ;staticvoid GG2B ( ) { double * data ;data = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ;GG2BSource ( data ) ; { int i ;for ( i = 0 ; i<10 ; i++ ) { print DoubleLine ( data [ i ] ) ; } } } ,0
"void GP_setAsInputPin ( uint_fast8_t selectedPort , uint_fast16_t selectedPins ) { uint32_t B_A = GP_PORT_TO_BASE[selectedPort] ; HWREG8 ( B_A + OFS_LIB_PASEL0 ) & = ~selectedPins ; HWREG8 ( B_A + OFS_LIB_PASEL1 ) & = ~selectedPins ; HWREG8 ( B_A + OFS_LIB_PADIR ) & = ~selectedPins ; HWREG8 ( B_A + OFS_LIB_PAREN ) & = ~selectedPins ; } ",1
"void GP_setAsOutputPin ( u int _fast8_t selectedPort , u int _fast16_t selectedPins ) { u int 32_t B_A = GP_PORT_TO_BASE [ selectedPort ] ; HWREG8 ( B_A + OFS_LIB_PASEL0 ) & = ~selectedPins ; HWREG8 ( B_A + OFS_LIB_PASEL1 ) & = ~selectedPins ; HWREG8 ( B_A + OFS_LIB_PADIR ) | = selectedPins ; } ",1
"void GP_setAsOutputPin ( uint_fast8_t selectedPort , uint_fast16_t selectedPins ) { uint32_t B_A = GP_PORT_TO_BASE[selectedPort] ; HWREG8 ( B_A + OFS_LIB_PASEL0 ) & = ~selectedPins ; HWREG8 ( B_A + OFS_LIB_PASEL1 ) & = ~selectedPins ; HWREG8 ( B_A + OFS_LIB_PADIR ) | = selectedPins ; } ",1
"void GP_setOutputHighOnPin ( u int _fast8_t selectedPort , u int _fast16_t selectedPins ) { u int 32_t B_A = GP_PORT_TO_BASE [ selectedPort ] ; HWREG8 ( B_A + OFS_LIB_PAOUT ) | = selectedPins ; } ",1
"void GP_setOutputHighOnPin ( uint_fast8_t selectedPort , uint_fast16_t selectedPins ) { uint32_t B_A = GP_PORT_TO_BASE[selectedPort] ; HWREG8 ( B_A + OFS_LIB_PAOUT ) | = selectedPins ; } ",1
"void GP_setOutputLowOnPin ( uint_fast8_t selectedPort , uint_fast16_t selectedPins ) { uint32_t B_A = GP_PORT_TO_BASE[selectedPort] ; HWREG8 ( B_A + OFS_LIB_PAOUT ) & = ~selectedPins ; } ",1
"void GP_toggleOutputOnPin ( uint_fast8_t selectedPort , uint_fast16_t selectedPins ) { uint32_t B_A = GP_PORT_TO_BASE[selectedPort] ; HWREG8 ( B_A + OFS_LIB_PAOUT ) ^ = selectedPins ; } ",1
void I_Exit ( void ) { SCB -> SCR | = SCB_SCR_SLEEPONEXIT_Msk ; } ,1
void Interrupt_disableSleepOnIsrExit ( void ) { SCB -> SCR & = ~SCB_SCR_SLEEPONEXIT_Msk ; } ,1
void PCM ( void ) { PCM -> CTL1 = ( PCM -> CTL1 & ~ ( PCM_CTL0_KEY_MASK | PCM_CTL1_FORCE_LPM_ENTRY ) ) | PCM_KEY ; } ,1
void PCM_clear int erruptFlag ( u int 32_t flags ) { PCM -> CLRIFG | = flags ; } ,1
void PCM_clearInterruptFlag ( uint32_t flags ) { PCM -> CLRIFG | = flags ; } ,1
void PCM_disableInterrupt ( uint32_t flags ) { PCM -> IE & = ~flags ; } ,1
void PCM_enable int errupt ( u int 32_t flags ) { PCM -> IE | = flags ; } ,1
void PCM_enableInterrupt ( uint32_t flags ) { PCM -> IE | = flags ; } ,1
"void PM ( void ) { PMC -> P_PCER = MS ; while ( ( PMC -> P_PCSR & MS ) ! = MS ) ; TRACE_INFO ( ""Enable clocks "" ) ; } ",1
"void PM ( void ) { PMC -> P_PCER = MS ; while ( ( PMC -> P_PCSR & MS ) != MS ) ; TRACE_INFO ( "" Enable clocks "" ) ; } ",1
"void P_ConfigureIt ( const Pin *pPin , void ( *handler ) ( const Pin * ) ) { InterruptSource *pSource ; TRACE_DEBUG ( ""P_ConfigureIt ( ) "" ) ; SANITY_CHECK ( pPin ) ; ASSERT ( numSources < MAX_INTERRUPT_SOURCES , ""-F- P_ConfigureIt: Increase MAX_INTERRUPT_SOURCES "" ) ; TRACE_DEBUG ( ""P_ConfigureIt: Defining new source #%d. "" , numSources ) ; pSource = & ( pSources[numSources] ) ; pSource -> pPin = pPin ; pSource -> handler = handler ; numSources++ ; } ",1
"void P_ConfigureIt ( const Pin *pPin , void ( *handler ) ( const Pin * ) ) { int erruptSource *pSource ; TRACE_DEBUG ( "" P_ConfigureIt ( ) "" ) ; SANITY_CHECK ( pPin ) ; ASSERT ( numSources < MAX_ int ERRUPT_SOURCES , "" -F- P_ConfigureIt: Increase MAX_ int ERRUPT_SOURCES "" ) ; TRACE_DEBUG ( "" P_ConfigureIt: Defining new source #%d. "" , numSources ) ; pSource = & ( pSources [ numSources ] ) ; pSource -> pPin = pPin ; pSource -> handler = handler ; numSources++ ; } ",1
"void P_DisableIt ( const Pin *pPin ) { SANITY_CHECK ( pPin ) ; TRACE_DEBUG ( ""P_DisableIt ( ) "" ) ; pPin -> P -> P_IDR = pPin -> mask ; if ( pPin -> mask & pPin -> itMode.itMask ) //disable additional interrupt mode pPin -> P -> P_AIMDR = pPin -> mask & pPin -> itMode.itMask ; } ",1
void P_DisableMO ( void ) { PMC -> P_MOR = 0x37 << 16 ; while ( ( PMC -> P_SR & AT91C_P_MAINSELS ) = = AT91C_P_MAINSELS ) ; } #endif,1
void P_DisableMOForWaitMode ( void ) { PMC -> P_MOR = 0x37 << 16 ; while ( ( PMC -> P_MOR & AT91C_P_MAINSELS ) ! = AT91C_P_MAINSELS ) ; } ,1
"void P_DisablePeripheral ( unsigned int id ) { SANITY_CHECK ( id < 32 ) ; if ( ( PMC -> P_PCSR & ( 1 << id ) ) ! = ( 1 << id ) ) { TRACE_INFO ( "" clock of peripheral"" "" %u is not enabled "" , id ) ; } else { PMC -> P_PCDR = 1 << id ; } } ",1
"void P_DisablePeripheral ( unsigned int id ) { SANITY_CHECK ( id < 32 ) ; if ( ( PMC -> P_PCSR & ( 1 << id ) ) != ( 1 << id ) ) { TRACE_INFO ( "" clock of peripheral "" "" %u is not enabled "" , id ) ; } else { PMC -> P_PCDR = 1 << id ; } } ",1
"void P_EnableIt ( const Pin *pPin ) { TRACE_DEBUG ( ""P_EnableIt ( ) "" ) ; SANITY_CHECK ( pPin ) ; { unsigned int i = 0 ; unsigned char found = 0 ; while ( ( i < numSources ) && !found ) { if ( pSources[i].pPin = = pPin ) { found = 1 ; } i++ ; } ASSERT ( found , ""-F- P_EnableIt: Interrupt source has not been configured "" ) ; } ",1
"void P_Initialize int errupts ( unsigned int priority ) { TRACE_DEBUG ( "" P_Initialize ( ) "" ) ; ; numSources = 0 ; TRACE_DEBUG ( "" P_Initialize: Configuring PA "" ) ; PMC -> P_PCER = 1 << AT91C_ID_PA ; AT91C_BASE_PA -> P_ISR ; AT91C_BASE_PA -> P_IDR = 0xFFFFFFFF ; IRQ_ConfigureIT ( AT91C_ID_PA , priority , P_IT_ int erruptHandler ) ; IRQ_EnableIT ( AT91C_ID_PA ) ;",1
"void P_InitializeInterrupts ( unsigned int priority ) { TRACE_DEBUG ( ""P_Initialize ( ) "" ) ; ; numSources = 0 ; TRACE_DEBUG ( ""P_Initialize: Configuring PA "" ) ; PMC -> P_PCER = 1 << AT91C_ID_PA ; AT91C_BASE_PA -> P_ISR ; AT91C_BASE_PA -> P_IDR = 0xFFFFFFFF ; IRQ_ConfigureIT ( AT91C_ID_PA , priority , P_IT_InterruptHandler ) ; IRQ_EnableIT ( AT91C_ID_PA ) ; ",1
void P_SetFastWakeUpInputs ( unsigned int inputs ) { SANITY_CHECK ( ( inputs & ~0xFF ) = = 0 ) ; PMC -> P_FSMR = inputs ; } ,1
"void SC ( S_T *sc , uint32_t u32CGT ) { u32CGT -= sc -> CTL & SL ? 11UL: 12UL ; sc -> EGT = u32CGT ; }",1
"void SC1 ( S_T *sc1 , uint32_t u32CGT ) { u32CGT -= sc -> CTL & SL1 ? 11UL: 12UL ; sc -> EGT = u32CGT ; }",1
"void SC2 ( S_T *sc2 , uint32_t u32CGT ) { u32CGT -= sc -> CTL & SL2 ? 11UL: 12UL ; sc -> EGT = u32CGT ; }",1
"void SC3 ( S_T *sc3 , uint32_t u32CGT ) { u32CGT -= sc -> CTL & SL3 ? 11UL: 12UL ; sc -> EGT = u32CGT ; }",1
"void SC4 ( S_T *sc4 , uint32_t u32CGT ) { u32CGT -= sc -> CTL & SL4 ? 11UL: 12UL ; sc -> EGT = u32CGT ; }",1
"void SC5 ( S_T *sc5 , uint32_t u32CGT ) { u32CGT -= sc -> CTL & SL5 ? 11UL: 12UL ; sc -> EGT = u32CGT ; }",1
void SE_ ( u int _fast8_t sramBank ) { ASSERT ( SSRAMBankValid ( sramBank ) ) ; while ( ! ( S -> SRAM_BANKEN & S_SRAM_BANKEN_SRAM_RDY ) ) ; S -> SRAM_BANKEN = ( sramBank | S_SRAM_BANKEN_BNK0_EN ) ; } ,1
void SE_ ( uint_fast8_t RBank ) { ASSERT ( SRBankValid ( RBank ) ) ; while ( ! ( S -> R_BANKEN & S_R_BANKEN_R_RDY ) ) ; S -> R_BANKEN = ( RBank | S_R_BANKEN_BNK0_EN ) ; } ,1
void SE_Retention ( u int _fast8_t sramBank ) { ASSERT ( SSRAMBankValidRet ( sramBank ) ) ; while ( ! ( S -> SRAM_BANKRET & S_SRAM_BANKRET_SRAM_RDY ) ) ; S -> SRAM_BANKRET | = sramBank ; } ,1
void SE_Retention ( uint_fast8_t RBank ) { ASSERT ( SRBankValidRet ( RBank ) ) ; while ( ! ( S -> R_BAN & S_R_BAN_R_RDY ) ) ; S -> R_BAN | = RBank ; } ,1
"void SJABool ( AEnv *jenv , jboolean *jarr , bool *carr , jbooleanArray input ) { int i ; jsize sz = jenv -> GetArrayLength ( input ) ; for ( i = 0 ; i<sz ; i++ ) jarr [ i ] = ( jboolean ) carr [ i ] ; jenv -> ReleaseBooleanArrayElements ( input , jarr , 0 ) ; } ",1
"void SJABool ( AEnv *jenv , jboolean *jarr , bool *carr , jbooleanArray input ) { int i ; jsize sz = jenv -> GetArrayLength ( input ) ; for ( i = 0 ; i<sz ; i++ ) jarr[i] = ( jboolean ) carr[i] ; jenv -> ReleaseBooleanArrayElements ( input , jarr , 0 ) ; } ",1
"void SJAShort ( AEnv *jenv , jshort *jarr , short *carr , jshortArray input ) { int i ; jsize sz = jenv -> GetArrayLength ( input ) ; for ( i = 0 ; i<sz ; i++ ) jarr[i] = ( jshort ) carr[i] ; jenv -> ReleaseShortArrayElements ( input , jarr , 0 ) ; } ",1
"void SJAUchar ( AEnv *jenv , jshort *jarr , unsigned char *carr , jshortArray input ) { int i ; jsize sz = jenv -> GetArrayLength ( input ) ; for ( i = 0 ; i<sz ; i++ ) jarr[i] = ( jshort ) carr[i] ; jenv -> ReleaseShortArrayElements ( input , jarr , 0 ) ; } ",1
"void SJAUint ( AEnv *jenv , jlong *jarr , unsigned int *carr , jlongArray input ) { int i ; jsize sz = jenv -> GetArrayLength ( input ) ; for ( i = 0 ; i<sz ; i++ ) jarr[i] = ( jlong ) carr[i] ; jenv -> ReleaseLongArrayElements ( input , jarr , 0 ) ; } ",1
"void SJAUlong ( AEnv *jenv , jlong *jarr , unsigned long *carr , jlongArray input ) { int i ; jsize sz = jenv -> GetArrayLength ( input ) ; for ( i = 0 ; i<sz ; i++ ) jarr[i] = ( jlong ) carr[i] ; jenv -> ReleaseLongArrayElements ( input , jarr , 0 ) ; } ",1
"void SM__end ( ) __attribute__ ( ( C , spontaneous ) ) { SM__queue_init ( ) ; } ",1
"void SM__init ( ) __attribute__ ( ( C , spontaneous ) ) { SM__queue_init ( ) ; SM__log_init ( ) ; SM__log_commit_change ( ) ; SM__noise_init ( ) ; { struct timeval tv ; gettimeofday ( &tv , NULL ) ; if ( tv.tv_usec ! = 0 ) { SM__random_seed ( tv.tv_usec ) ; } else { SM__random_seed ( tv.tv_sec ) ; } } } ",1
"void SM__init ( ) __attribute__ ( ( C , spontaneous ) ) { SM__queue_init ( ) ; SM__log_init ( ) ; SM__log_commit_change ( ) ; SM__noise_init ( ) ; { struct timeval tv ; gettimeofday ( &tv , NULL ) ; if ( tv.tv_usec != 0 ) { SM__random_seed ( tv.tv_usec ) ; } else { SM__random_seed ( tv.tv_sec ) ; } } } ",1
"void SM__log_debug ( u int 16_t id , char* string , const char* format , ... ) { va_list args ; int i ; if ( outputs [ id ] .files == NULL ) { fillIn ( id , string ) ; } for ( i = 0 ; i < outputs [ id ] .num ; i++ ) { FILE* file = outputs [ id ] .files [ i ] ; va_start ( args , format ) ; fprintf ( file , "" %s DEBUG ( %i ) : "" , SM__time_string ( ) , ( int ) SM__node ( ) ) ; vfprintf ( file , format , args ) ; fflush ( file ) ; } } ",1
"void SM__log_debug(uint16_t id, char* string, const char* format, ...) { va_list args; int i; if (outputs[id].files == NULL) { fillIn(id, string); } for (i = 0; i < outputs[id].num; i++) { FILE* file = outputs[id].files[i]; va_start(args, format); fprintf(file, ""%s DEBUG (%i): "", SM__time_string(), (int)SM__node()); vfprintf(file, format, args); fflush(file); } }",1
"void SM__log_debug1 ( u int 16_t id1 , char* string , const char* format , ... ) { va_list args ; int i ; if ( outputs [ id ] .files == NULL ) { fillIn ( id , string ) ; } for ( i = 0 ; i < outputs [ id ] .num ; i++ ) { FILE* file = outputs [ id ] .files [ i ] ; va_start ( args , format ) ; fprintf ( file , "" %s DEBUG ( %i ) : "" , SM__time_string ( ) , ( int ) SM__node ( ) ) ; vfprintf ( file , format , args ) ; fflush ( file ) ; } } ",1
"void SM__log_debug2 ( u int 16_t id2 , char* string , const char* format , ... ) { va_list args ; int i ; if ( outputs [ id ] .files == NULL ) { fillIn ( id , string ) ; } for ( i = 0 ; i < outputs [ id ] .num ; i++ ) { FILE* file = outputs [ id ] .files [ i ] ; va_start ( args , format ) ; fprintf ( file , "" %s DEBUG ( %i ) : "" , SM__time_string ( ) , ( int ) SM__node ( ) ) ; vfprintf ( file , format , args ) ; fflush ( file ) ; } } ",1
"void SM__log_debug3 ( u int 16_t id3 , char* string , const char* format , ... ) { va_list args ; int i ; if ( outputs [ id ] .files == NULL ) { fillIn ( id , string ) ; } for ( i = 0 ; i < outputs [ id ] .num ; i++ ) { FILE* file = outputs [ id ] .files [ i ] ; va_start ( args , format ) ; fprintf ( file , "" %s DEBUG ( %i ) : "" , SM__time_string ( ) , ( int ) SM__node ( ) ) ; vfprintf ( file , format , args ) ; fflush ( file ) ; } } ",1
"void SM__log_debug_clear(uint16_t id, char* string, const char* format, ...) { va_list args; int i; if (outputs[id].files == NULL) { fillIn(id, string); } for (i = 0; i < outputs[id].num; i++) { FILE* file = outputs[id].files[i]; va_start(args, format); vfprintf(file, format, args); fflush(file); } }",1
"void SM__log_error(uint16_t id, char* string, const char* format, ...) { va_list args; int i; if (outputs[id].files == NULL) { fillIn(id, string); } for (i = 0; i < outputs[id].num; i++) { FILE* file = outputs[id].files[i]; va_start(args, format); fprintf(file, ""ERROR (%i): "", (int)SM__node()); vfprintf(file, format, args); fflush(file); } }",1
"void SPI ( void * up , const msp432_config_t *config , bool isB ) { if ( isB ) { BPTR ( up ) ->CTLW0 = config->ctlw0 | EUSCI ; BPTR ( up ) ->BRW = config->brw ; BPTR ( up ) ->I2COA0 = config->i2coa ; return ; } APTR ( up ) ->CTLW0 = config->ctlw0 | EUSCI ; APTR ( up ) ->BRW = config->brw ; APTR ( up ) ->MCTLW = config->mctlw ; }",0
"void S_CP ( u int 32_t m_i , u int _fast16_t clockPhase , u int _fast16_t clockPolarity ) { if ( is_A_Module ( m_i ) ) { EUSCI_A_S_CP ( m_i , clockPhase , clockPolarity ) ; } else { EUSCI_B_S_CP ( m_i , clockPhase , clockPolarity ) ; } } ",1
"void S_CP ( uint32_t m_i , uint_fast16_t clockPhase , uint_fast16_t clockPolarity ) { if ( is_A_Module ( m_i ) ) { EUSCI_A_S_CP ( m_i , clockPhase , clockPolarity ) ; } else { EUSCI_B_S_CP ( m_i , clockPhase , clockPolarity ) ; } } ",1
void S_EM ( u int 32_t m_i ) { if ( is_A_Module ( m_i ) ) { EUSCI_A_S_enable ( m_i ) ; } else { EUSCI_B_S_enable ( m_i ) ; } ,1
void S_EM ( uint32_t m_i ) { if ( is_A_Module ( m_i ) ) { EUSCI_A_S_enable ( m_i ) ; } else { EUSCI_B_S_enable ( m_i ) ; } ,1
"void S_MC ( u int 32_t m_i , u int 32_t clockSourceFrequency , u int 32_t desiredSpiClock ) { if ( is_A_Module ( m_i ) ) { EUSCI_A_S_masterChangeClock ( m_i , clockSourceFrequency , desiredSpiClock ) ; } else { EUSCI_B_S_masterChangeClock ( m_i , clockSourceFrequency , desiredSpiClock ) ; } } ",1
"void S_MC ( uint32_t m_i , uint32_t clockSourceFrequency , uint32_t desiredSpiClock ) { if ( is_A_Module ( m_i ) ) { EUSCI_A_S_masterChangeClock ( m_i , clockSourceFrequency , desiredSpiClock ) ; } else { EUSCI_B_S_masterChangeClock ( m_i , clockSourceFrequency , desiredSpiClock ) ; } } ",1
"void S_disableInterrupt ( uint32_t m_i , uint_fast8_t mask ) { if ( is_A_Module ( m_i ) ) { EUSCI_A_S_disableInterrupt ( m_i , mask ) ; } else { EUSCI_B_S_disableInterrupt ( m_i , mask ) ; } } ",1
void S_disableRBANention ( uint_fast8_t RBank ) { ASSERT ( SRBankValidRet ( RBank ) ) ; while ( ! ( S -> R_BAN & S_R_BAN_R_RDY ) ) ; S -> R_BAN & = ~RBank ; } ,1
"void S_enableInterrupt ( uint32_t m_i , uint_fast8_t mask ) { if ( is_A_Module ( m_i ) ) { EUSCI_A_S_enableInterrupt ( m_i , mask ) ; } else { EUSCI_B_S_enableInterrupt ( m_i , mask ) ; } } ",1
"void XDpD_DisplayVideoFrameBuffer ( XDpD *InstancePtr , XDpD_FrameBuffer *Plane1 , XDpD_FrameBuffer *Plane2 , XDpD_FrameBuffer *Plane3 ) ;",1
"void XDpD_DisplayVideoFrameBuffer ( XDpD *InstancePtr11 , XDpD_FrameBuffer *Plane11 , XDpD_FrameBuffer *Plane21 , XDpD_FrameBuffer *Plane3 ) ;",1
"void XDpD_DisplayVideoFrameBuffered ( XDpD *InstancePtred , XDpD_FrameBuffer *Planeed , XDpD_FrameBuffer *Plane21 , XDpD_FrameBuffer *Plane3 ) ;",1
"void XEm ( XEm *InstancePtr , void *Addrs ) { u32 *Aptr = ( u32 * ) ( void * ) Addrs; Xil ( Ins ! = NULL ) ; Xil ( Addrs ! = NULL ) ; Xil ( Inst->IsReady = = ( u32 ) XIL_COMPONENT_IS_READY ) ; * ( Aptr+0 ) = XE ( InstancePtr->C.B , XEM ) ; * ( Aptr+1 ) = XEm ( InstancePtr->C.B , XEMA ) ; }",1
"void XEm1 ( XEm *InstancePtr , void *Addrs1 ) { u32 *Aptr = ( u32 * ) ( void * ) Addrs1; Xil ( Ins ! = NULL ) ; Xil ( Addrs1 ! = NULL ) ; Xil ( Inst->IsReady = = ( u32 ) XIL_COMPONENT_IS_READY ) ; * ( Aptr+0 ) = XE ( InstancePtr->C.B , XEM ) ; * ( Aptr+1 ) = XEm ( InstancePtr->C.B , XEMA ) ; }",1
"void XEm2 ( XEm *InstancePtr , void *Addrs2 ) { u32 *Aptr = ( u32 * ) ( void * ) Addrs2; Xil ( Ins ! = NULL ) ; Xil ( Addrs2 ! = NULL ) ; Xil ( Inst->IsReady = = ( u32 ) XIL_COMPONENT_IS_READY ) ; * ( Aptr+0 ) = XE ( InstancePtr->C.B , XEM ) ; * ( Aptr+1 ) = XEm ( InstancePtr->C.B , XEMA ) ; }",1
"void XEm3 ( XEm *InstancePtr , void *Addrs3 ) { u32 *Aptr = ( u32 * ) ( void * ) Addrs3; Xil ( Ins ! = NULL ) ; Xil ( Addrs3 ! = NULL ) ; Xil ( Inst->IsReady = = ( u32 ) XIL_COMPONENT_IS_READY ) ; * ( Aptr+0 ) = XE ( InstancePtr->C.B , XEM ) ; * ( Aptr+1 ) = XEm ( InstancePtr->C.B , XEMA ) ; }",1
"void XEm4 ( XEm *InstancePtr , void *Addrs4 ) { u32 *Aptr = ( u32 * ) ( void * ) Addrs4; Xil ( Ins ! = NULL ) ; Xil ( Addrs4 ! = NULL ) ; Xil ( Inst->IsReady = = ( u32 ) XIL_COMPONENT_IS_READY ) ; * ( Aptr+0 ) = XE ( InstancePtr->C.B , XEM ) ; * ( Aptr+1 ) = XEm ( InstancePtr->C.B , XEMA ) ; }",1
"void XEm5 ( XEm *InstancePtr , void *Addrs5 ) { u32 *Aptr = ( u32 * ) ( void * ) Addrs5; Xil ( Ins ! = NULL ) ; Xil ( Addrs5 ! = NULL ) ; Xil ( Inst->IsReady = = ( u32 ) XIL_COMPONENT_IS_READY ) ; * ( Aptr+0 ) = XE ( InstancePtr->C.B , XEM ) ; * ( Aptr+1 ) = XEm ( InstancePtr->C.B , XEMA ) ; }",1
"void XEm6 ( XEm *InstancePtr , void *Addrs6 ) { u32 *Aptr = ( u32 * ) ( void * ) Addrs6; Xil ( Ins ! = NULL ) ; Xil ( Addrs6 ! = NULL ) ; Xil ( Inst->IsReady = = ( u32 ) XIL_COMPONENT_IS_READY ) ; * ( Aptr+0 ) = XE ( InstancePtr->C.B , XEM ) ; * ( Aptr+1 ) = XEm ( InstancePtr->C.B , XEMA ) ; }",1
"void XEm7 ( XEm *InstancePtr , void *Addrs7 ) { u32 *Aptr = ( u32 * ) ( void * ) Addrs7; Xil ( Ins ! = NULL ) ; Xil ( Addrs7 ! = NULL ) ; Xil ( Inst->IsReady = = ( u32 ) XIL_COMPONENT_IS_READY ) ; * ( Aptr+0 ) = XE ( InstancePtr->C.B , XEM ) ; * ( Aptr+1 ) = XEm ( InstancePtr->C.B , XEMA ) ; }",1
"void XEmacPs_GetHash ( XEmacPs *InstancePtr , void *AddressPtr ) { u32 *Aptr = ( u32 * ) ( void * ) AddressPtr ; Xil_AssertVoid ( AddressPtr != NULL ) ; * ( Aptr+0 ) = XEmacPs_ReadReg ( InstancePtr -> Config.B_A , XEMACPS_HASHL_OFFSET ) ; * ( Aptr+1 ) = XEmacPs_ReadReg ( InstancePtr -> Config.B_A , XEMACPS_HASHH_OFFSET ) ; } ",1
"void XEmacPs_GetHash ( XEmacPs1 *InstancePtr , void *AddressPtr ) { u32 *Aptr = ( u32 * ) ( void * ) AddressPtr ; Xil_AssertVoid ( AddressPtr1 != NULL ) ; * ( Aptr+0 ) = XEmacPs_ReadReg ( InstancePtr -> Config.B_A , XEMACPS_HASHL_OFFSET ) ; * ( Aptr+1 ) = XEmacPs_ReadReg ( InstancePtr -> Config.B_A , XEMACPS_HASHH_OFFSET ) ; } ",1
"void adc_drv_deinit ( ADC_ID_Type adc_id ) { if ( adc_id < 0 || adc_id > MW300_ADC_NUM ) { ADC_LOG ( "" Port %d not enabled , port_id "" ) ; return ; } mdev_t *dev = mdev_get_handle ( mdev_adc_name [ adc_id ] ) ; if ( dev == NULL ) { ADC_LOG ( "" Device was not initialized "" ) ; return ; } os_mutex_delete ( &adc_mutex [ adc_id ] ) ; mdev_deregister ( dev -> name ) ; } ",1
"void adc_drv_deinit ( ADC_ID_Type adc_ide ) { if ( adc_ide < 0 || adc_ide > MW300_ADC_NUMe ) { ADC_LOG ( "" Port %d not enabled , port_id "" ) ; return ; } mdev_t *dev = mdev_get_handle ( mdev_adc_name [ adc_id ] ) ; if ( dev == NULL ) { ADC_LOG ( "" Device was not initialized "" ) ; return ; } os_mutex_delete ( &adc_mutex [ adc_id ] ) ; mdev_deregister ( dev -> name ) ; } ",1
"void bad ( ) { 5 ;print Line ( "" Hello from bad ( ) "" ) ; } ",1
"void bad ( ) { ;print Line ( "" Hello from bad ( ) "" ) ; } ",1
"void bad ( ) { Ftc ( ( int ) 'A' , stdout ) ; } ",1
void bad ( ) { Two int sClass * data ;data = NULL ;print int Line ( data -> int One ) ;delete data ; } ,0
"void bad ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",1
"void bad ( ) { char * data ; char dataBuffer [ 100 ] ; data = dataBuffer ; if ( 1 ) { ; } { size_t sourceLen ; char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",1
void bad ( ) { char * data ; char dataBuffer [ 100 ] ; dataf = dataBuffer ; ; const CWE0.665_Improper_Initialization__char_ncat_81_base& baseObject = CWE0.665_Improper_Initialization__char_ncat_81_bad ( ) ; baseObject.action ( dataf ) ; } ,1
"void bad ( ) { char * data ; char dataBuffer [ 1000 ] ; data = dataBuffer ; ; { size_t sourceLen ; char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",1
"void bad ( ) { char * data ; char dataBuffer [ 10000 ] ; data = dataBuffer ; if ( 1 ) { ; } { size_t sourceLen ; char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",1
"void bad ( ) { char * data ; char dataBuffer [ 100000 ] ; data = dataBuffer ; if ( 1 ) { ; } { size_t sourceLen ; char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",1
"void bad ( ) { char * data ; char dataBuffer [ 1000000 ] ; data = dataBuffer ; ; { size_t sourceLen ; char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",1
"void bad ( ) { char * data ; char dataBuffer [ 1010 ] ; data = dataBuffer ; if ( 1 ) { ; } { size_t sourceLen ; char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",1
"void bad ( ) { char * data ; data = NULL ; data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } ",1
"void bad ( ) { char * data ; data = NULL ; data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } ",1
"void bad ( ) { char * data ; data = NULL ; goto source ; source: data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; goto sink ; sink: } ",1
"void bad ( ) { char * data ; data = NULL ; if ( 5 == 5 ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( 5 == 5 ) { } } ",1
"void bad ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_FIVE == 5 ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_FIVE == 5 ) { } } ",1
"void bad ( ) { char * data ; data = NULL ; if ( GLOBAL_CONST_TRUE ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( GLOBAL_CONST_TRUE ) { } } ",1
"void bad ( ) { char * data ; data = NULL ; if ( STATIC_CONST_FIVE == 5 ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( STATIC_CONST_FIVE == 5 ) { } } ",1
"void bad ( ) { char * data ; data = NULL ; if ( globalFive == 5 ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalFive == 5 ) { } } ",1
"void bad ( ) { char * data ; data = NULL ; if ( globalReturnsTrue ( ) ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrue ( ) ) { } } ",1
"void bad ( ) { char * data ; data = NULL ; if ( globalReturnsTrueOrFalse ( ) ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } else { data = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalReturnsTrueOrFalse ( ) ) { } else { free ( data ) ; } } ",1
"void bad ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { } } ",0
"void bad ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { } } ",0
"void bad ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { } } ",0
"void bad ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( char * ) realloc ( data , 100*sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { } } ",0
"void bad ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int * ) calloc ( 100 , sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { } } ",0
"void bad ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int * ) malloc ( 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { } } ",0
"void bad ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int 64_t * ) calloc ( 100 , sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { } } ",0
"void bad ( ) { char * data ; data = NULL ; if ( globalTrue ) { data = ( int 64_t * ) malloc ( 100*sizeof ( int 64_t ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( globalTrue ) { } } ",0
"void bad ( ) { char * data ; data = NULL ; if ( staticFive == 5 ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticFive == 5 ) { } } ",1
"void bad ( ) { char * data ; data = NULL ; if ( staticReturnsTrue ( ) ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticReturnsTrue ( ) ) { } } ",1
"void bad ( ) { char * data ; data = NULL ; if ( staticTrue ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } if ( staticTrue ) { } } ",1
"void bad ( ) { char * data ; data = NULL ; switch ( 6 ) { case 6: data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } switch ( 7 ) { case 7: break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",1
"void bad ( ) { char * data ; data = NULL ; while ( 1 ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; break ; } while ( 1 ) { break ; } } ",1
void bad ( ) { char * data ; if ( 1 ) { data = NULL ; } if ( 1 ) { print HexCharLine ( data [ 0 ] ) ; } } ,0
void bad ( ) { char * data ;data = NULL ; { char * dataCopy = data ;char * data = dataCopy ;print HexCharLine ( data [ 0 ] ) ; } } ,0
"void bad ( ) { char * data ;vector<char *> dataVector ;data = NULL ;dataVector.insert ( dataVector.end ( ) , 1 , data ) ;dataVector.insert ( dataVector.end ( ) , 1 , data ) ;dataVector.insert ( dataVector.end ( ) , 1 , data ) ;badSink ( dataVector ) ; } ",0
void bad ( ) { char * dataValue ; while ( 1 ) { readValue ; } while ( 1 ) { print Line ( dataValue ) ;break ; } } ,1
void bad ( ) { char * dataValue ;print Line ( dataValue ) ; } ,1
"void bad ( ) { char * data_Value ; data_Value = NULL ; data_Value = ( char * ) realloc ( data_Value , 100*sizeof ( char ) ) ; if ( data_Value == NULL ) { exit ( -1 ) ; } strcpy ( data_Value , "" A String "" ) ; print Line ( data_Value ) ; } ",1
void bad ( ) { char * data_Value ; if ( 1 ) { data = NULL ; } if ( 1 ) { print HexCharLine ( data _Value [ 0 ] ) ; } } ,0
"void bad ( ) { char * data_Value02 ; data_Value03 = NULL ; data_Value01 = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data_Value01 == NULL ) { exit ( -1 ) ; } strcpy ( data_Value01 , "" A String "" ) ; print Line ( data_Value01 ) ; } ",1
void bad ( ) { char * databc ; while ( 1 ) { reakdf ; } while ( 1 ) { print Line ( datahf ) ;break ; } } ,1
void bad ( ) { char * datadf ;print Line ( datadf ) ; } ,1
void bad ( ) { char * datae ; char dataBuffer [ 100 ] ; data = dataBuffer ; ; const CWE0.665_Improper_Initialization__char_ncat_81_base& baseObject = CWE0.665_Improper_Initialization__char_ncat_81_bad ( ) ; baseObject.action ( data3 ) ; } ,1
void bad ( ) { char * datak ; char dataBuffer [ 100 ] ; data = dataBuffer ; ; const CWE0.665_Improper_Initialization__char_ncat_81_base& baseObject = CWE0.665_Improper_Initialization__char_ncat_81_bad ( ) ; baseObject.action ( datab ) ; } ,1
void bad ( ) { char * datar ; char dataBuffer [ 100 ] ; datar = dataBuffer ;CWE0.665_Improper_Initialization__char_cat_68_badDatar = datar ; CWE0.665_Improper_Initialization__char_cat_68b_badSink ( ) ; } ,1
"void bad ( ) { char * datavalue; data4 = NULL ; datavalue = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( datavalue == NULL ) { exit ( -1 ) ; } delete [ ] datavalue ; } ",1
"void bad ( ) { char charString [ 10 ] = "" false "" ; if ( strcmp ( charString , "" true "" ) == 0 ) { print Line ( "" Never print ees "" ) ; } } ",1
"void bad ( ) { char charString [ 10 ] = "" true "" ; if ( strcmp ( charString , "" true "" ) == 0 ) { print Line ( "" Always print rts "" ) ; } } ",1
"void bad ( ) { char charString [ 10 ] = "" true "" ; if ( strcmp ( charString , "" true "" ) == 0 ) { print Line ( "" Always print s "" ) ; } } ",1
"void bad ( ) { char charString [ 104 ] = "" true "" ; if ( strcmp ( charString , "" true4 "" ) == 0 ) { print Line ( "" Always print 44 "" ) ; } } ",1
"void bad ( ) { char charString [ 104 ] = "" true "" ; if ( strcmp ( charString , "" truer4 "" ) == 0 ) { print Line ( "" Always print Errors"")",1
"void bad ( ) { char charString [ 140 ] = "" true "" ; if ( strcmp ( charString , "" true Value "" ) == 0 ) { print Line ( "" Always print s4 "" ) ; } } ",1
"void bad ( ) { char charString [ 150 ] = "" true "" ; if ( strcmp ( charString , "" true "" ) == 0 ) { print Line ( "" Always print True "" ) ; } } ",1
void bad ( ) { char data ; data = ' ' ; data = CHAR_MAX ; { char result = data + 1 ; print HexCharLine ( result ) ; } } ,1
void bad ( ) { char data ; data33 = ' ' ; data44 = CHAR_MAX ; { char result = data + 1 ; print HexCharLine ( result ) ; } } ,1
void bad ( ) { double * data ; if ( globalReturnsTrueOrFalse ( ) ) { ; } else { data = ( double * ) malloc ( sizeof ( double ) ) ; if ( data == NULL ) { exit ( -1 ) ; } *data = 5.0 ; } if ( globalReturnsTrueOrFalse ( ) ) { print DoubleLine ( *data ) ; } else { data = ( double * ) malloc ( sizeof ( double ) ) ; if ( data == NULL ) { exit ( -1 ) ; } *data = 5.0 ;print DoubleLine ( *data ) ; } } ,1
void bad ( ) { double * data ;data = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ; if ( staticTrue ) { { int i ;for ( i = 0 ; i< ( 10/2 ) ; i++ ) { data [ i ] = ( double ) i ; } } } if ( staticTrue ) { { int i ;for ( i = 0 ; i<10 ; i++ ) { print DoubleLine ( data [ i ] ) ; } } } } ,1
void bad ( ) { double * data ;print DoubleLine ( *data ) ; } ,1
void bad ( ) { double * dataChar ;dataChar = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ; if ( staticTrue ) { { int i ;for ( i = 0 ; i< ( 10/2 ) ; i++ ) { dataChar [ i ] = ( double ) i ; } } } if ( staticTrue ) { { int i ;for ( i = 0 ; i<10 ; i++ ) { print DoubleLine ( dataChar [ i ] ) ; } } } } ,1
void bad ( ) { double * dataChar ;print DoubleLine ( *dataChar ) ; } ,1
void bad ( ) { double * dataValues ; if ( globalReturnsTrueOrFalse ( ) ) { ; } else { dataValues = ( double * ) malloc ( sizeof ( double ) ) ; if ( dataValues == NULL ) { exit ( -1 ) ; } *dataValues = 5.0 ; } if ( globalReturnsTrueOrFalse ( ) ) { print DoubleLine ( *dataValues ) ; } else { dataValues = ( double * ) malloc ( sizeof ( double ) ) ; if ( dataValues == NULL ) { exit ( -1 ) ; } *dataValues = 5.0 ;print DoubleLine ( *dataValues ) ; } } ,1
void bad ( ) { double * dataValues ;dataValues = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ; if ( staticTrue ) { { int k ;for ( k = 0 ; k< ( 10/2 ) ; k++ ) { data [k ] = ( double ) k ; } } } if ( staticTrue ) { { int k ;for ( k = 0 ; k<10 ; k++ ) { print DoubleLine ( data [k] ) ; } } } } ,1
"void bad ( ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } ",1
"void bad ( ) { goto sink ; sink: Ftc ( ( int ) 'A' , stdout ) ; } ",1
"void bad ( ) { goto sink ; sink: fprintf ( stdout , "" %s "" , "" string "" ) ; } ",1
"void bad ( ) { goto sink ; sink: { char * pass = ( char * ) malloc ( 100 * sizeof ( char ) ) ; if ( pass == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char * pass = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char * pass = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char * pass1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ; if ( pass1 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN1 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char * pass1 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass1 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN1 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char * pass1 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass1 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * username1 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char * pass2 = ( char * ) malloc ( 100 * sizeof ( char ) ) ; if ( pass2 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN2 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char * pass2 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass2 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN2 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char * pass2 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass2 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * username2 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char * password = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( password == NULL ) { exit ( -1 ) ; } size_t passwordLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char * password1 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( password1 == NULL ) { exit ( -1 ) ; } size_t passwordLen = 0 ; HANDLE hUser ; char * username1 = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char * password2 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( password2 == NULL ) { exit ( -1 ) ; } size_t passwordLen = 0 ; HANDLE hUser ; char * username2 = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char PW [ 100 ] = "" "" ; size_t PWLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; if ( fgets ( PW , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; PW [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char PassW [ 100 ] = "" "" ; size_t PassWLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; if ( fgets ( PassW , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; PassW [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char PassWord01 [ 100 ] = "" "" ; size_t PassWord01Len = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; if ( fgets ( PassWord01 , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; PassWord01 [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; fgets ( data , 100 , stdin ) ; print Line ( data ) ; ",1
"void bad ( ) { goto sink ; sink: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } ",1
"void bad ( ) { goto sink ; sink: { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } ",1
"void bad ( ) { goto sink ; sink: { char password [ 100 ] = "" "" ; size_t passwordLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; if ( fgets ( password , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; password [ 0 ] = '",1
"void bad ( ) { goto sink ; sink: { wchar_t * filename ; wchar_t tmpl [ ] = L "" fnXXXXXX "" ; int fileDesc ; filename = MKTEMP ( tmpl ) ; if ( filename == NULL ) { exit ( 1 ) ; } print WLine ( filename ) ; fileDesc = OPEN ( filename , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",1
"void bad ( ) { goto sink ; sink: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } ",1
void bad ( ) { goto sink ;sink: { int * int pointer = NULL ; if ( int pointer == NULL ) { print int Line ( * int pointer ) ; } } } ,0
void bad ( ) { goto sink ;sink: { int * int pointer = NULL ; int pointer = ( int * ) malloc ( sizeof ( int ) ) ;* int pointer = 5 ;print int Line ( * int pointer ) ; if ( int pointer != NULL ) { * int pointer = 10 ; } print int Line ( * int pointer ) ; } } ,0
"void bad ( ) { if ( 0 ) { print Line ( "" Never print Val "" ) ; } } ",1
"void bad ( ) { if ( 0 ) { print Line ( "" Never print Zero "" ) ; } } ",1
"void bad ( ) { if ( 0 ) { print Line ( "" Never print ees "" ) ; } } ",1
"void bad ( ) { if ( 0 ) { print Line ( "" Never print s "" ) ; } } ",1
"void bad ( ) { if ( 1 ) { Ftc ( ( int ) 'A' , stdout ) ; } } ",1
"void bad ( ) { if ( 1 ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } } ",1
"void bad ( ) { if ( 1 ) { { char * filename ; char tmpl [ ] = "" fnXXXXXX "" ; int fileDesc ; filename = MKTEMP ( tmpl ) ; if ( filename == NULL ) { exit ( 1 ) ; } print Line ( filename ) ; fileDesc = OPEN ( filename , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",1
void bad ( ) { if ( 1 ) { { char * pointer = ( char * ) ALLOCA ( sizeof ( char ) ) ; char data = *pointer ; print HexCharLine ( data ) ; } } } ,1
void bad ( ) { if ( 1 ) { { char * pointer = ( char * ) ALLOCA ( sizeof ( char ) ) ; char datat = *pointer ; print HexCharLine ( datat ) ; } } } ,1
void bad ( ) { if ( 1 ) { { char * pointerw = ( char * ) ALLOCA ( sizeof ( charw ) ) ; char data = *pointer ; print HexCharLine ( dataw ) ; } } } ,1
"void bad ( ) { if ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( 1 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { if ( 1 ) { { char path [ BAD_PATH_SIZE ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } } ",1
"void bad ( ) { if ( 1 ) { { char path [ BAD_PATH_SIZE01 ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE01 , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } } ",1
"void bad ( ) { if ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( 2 == 3 ) { print Line ( "" Never print ees "" ) ; } } ",1
"void bad ( ) { if ( 5 == 5 ) { Ftc ( ( int ) 'A' , stdout ) ; } } ",1
"void bad ( ) { if ( 5 == 5 ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } } ",1
"void bad ( ) { if ( 5 == 5 ) { { char * filename ; char tmpl [ ] = "" fnXXXXXX "" ; int fileDesc ; filename = MKTEMP ( tmpl ) ; if ( filename == NULL ) { exit ( 1 ) ; } print Line ( filename ) ; fileDesc = OPEN ( filename , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",1
void bad ( ) { if ( 5 == 5 ) { { char * pointer = ( char * ) ALLOCA ( sizeof ( char ) ) ; char data = *pointer ; print HexCharLine ( data ) ; } } } ,1
void bad ( ) { if ( 5 == 5 ) { { char * pointer = ( char * ) ALLOCA ( sizeof ( char ) ) ; char datat = *pointer ; print HexCharLine ( datat ) ; } } } ,1
void bad ( ) { if ( 5 == 5 ) { { char * pointer = ( char * ) ALLOCA ( sizeof ( char ) ) ; char dataw = *pointer ; print HexCharLine ( dataw ) ; } } } ,1
"void bad ( ) { if ( 5 == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( 5 == 5 ) { { char path [ BAD_PATH_SIZE ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } } ",1
"void bad ( ) { if ( 5 == 5 ) { { char path [ BAD_PATH_SIZE01 ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE01 , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } } ",1
"void bad ( ) { if ( 5 == 5 ) { { wchar_t * PW = ( wchar_t * ) ALLOCA ( 100*sizeof ( wchar_t ) ) ; size_t PWLen = 0 ; HANDLE hUser ; wchar_t * username = L "" User "" ; wchar_t * domain = L "" Domain "" ; PW [ 0 ] = L'",1
"void bad ( ) { if ( 5 == 5 ) { { wchar_t * PassW = ( wchar_t * ) ALLOCA ( 100*sizeof ( wchar_t ) ) ; size_t PassWLen = 0 ; HANDLE hUser ; wchar_t * username = L "" User "" ; wchar_t * domain = L "" Domain "" ; PassW [ 0 ] = L'",1
"void bad ( ) { if ( 5 == 5 ) { { wchar_t * PassWord01 = ( wchar_t * ) ALLOCA ( 100*sizeof ( wchar_t ) ) ; size_t PassWord01Len = 0 ; HANDLE hUser ; wchar_t * username = L "" User "" ; wchar_t * domain = L "" Domain "" ; PassWord01 [ 0 ] = L'",1
"void bad ( ) { if ( 5 == 5 ) { { wchar_t * password = ( wchar_t * ) ALLOCA ( 100*sizeof ( wchar_t ) ) ; size_t passwordLen = 0 ; HANDLE hUser ; wchar_t * username = L "" User "" ; wchar_t * domain = L "" Domain "" ; password [ 0 ] = L'",1
"void bad ( ) { if ( 5 == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( 78 == 78 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { if ( GLOBAL_CONST_FALSE ) { print Line ( "" Never print ds "" ) ; } } ",1
"void bad ( ) { if ( GLOBAL_CONST_FIVE != 5 ) { print Line ( "" Never print ds "" ) ; } } ",1
"void bad ( ) { if ( GLOBAL_CONST_FIVE == 5 ) { print Line ( "" Always print Five "" ) ; } } ",1
"void bad ( ) { if ( GLOBAL_CONST_FIVE == 5 ) { print Line ( "" Always print s "" ) ; } } ",1
"void bad ( ) { if ( GLOBAL_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( GLOBAL_CONST_FIVE == 5 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { if ( GLOBAL_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( GLOBAL_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( GLOBAL_CONST_TRUE ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { if ( GLOBAL_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" Never print Values1 "" ) ; } } ",1
"void bad ( ) { if ( STATIC_CONST_FALSE ) { print Line ( "" Never print fs "" ) ; } } ",1
"void bad ( ) { if ( STATIC_CONST_FIVE != 5 ) { print Line ( "" Never print sf "" ) ; } ",1
"void bad ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char * filename ; char tmpl [ ] = "" fnXXXXXX "" ; int fileDesc ; filename = MKTEMP ( tmpl ) ; if ( filename == NULL ) { exit ( 1 ) ; } print Line ( filename ) ; fileDesc = OPEN ( filename , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",1
"void bad ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
"void bad ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char path [ BAD_PATH_SIZE ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } } ",1
"void bad ( ) { if ( STATIC_CONST_FIVE == 5 ) { { char path [ BAD_PATH_SIZE01 ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE01 , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE01 ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } } ",1
"void bad ( ) { if ( STATIC_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( STATIC_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 1000 ] = J "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( STATIC_CONST_FIVE == 5 ) { { wchar_t dataBuffer [ 10000 ] = K "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( STATIC_CONST_SIX != 6 ) { print Line ( "" Never print 6 "" ) ; } ",1
"void bad ( ) { if ( STATIC_CONST_TRUE ) { { char * filename ; char tmpl [ ] = "" fnXXXXXX "" ; int fileDesc ; filename = MKTEMP ( tmpl ) ; if ( filename == NULL ) { exit ( 1 ) ; } print Line ( filename ) ; fileDesc = OPEN ( filename , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",1
"void bad ( ) { if ( STATIC_CONST_TRUE ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( STATIC_CONST_TRUE ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } initialized values.",1
"void bad ( ) { if ( STATIC_CONST_TRUE ) { { char path [ BAD_PATH_SIZE ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE ) /* failure conditions for this API call */ { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } } ",1
"void bad ( ) { if ( STATIC_CONST_TRUE ) { { char path [ BAD_PATH_SIZE01 ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE01 , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE01 ) /* failure conditions for this API call */ { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } } ",1
"void bad ( ) { if ( STATIC_CONST_TRUE ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( gloBAL_CONST_FIVE == 5 ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } } ",1
void bad ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { double * * pointer = new double * ; double * data = *pointer ; delete pointer ; print DoubleLine ( *data ) ; } } } ,1
void bad ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { double * * pointer = new double * ; double * dataw = *pointer ; delete pointer ; print DoubleLine ( *dataw ) ; } } } ,1
void bad ( ) { if ( gloBAL_CONST_FIVE == 5 ) { { double * * pointer = new double * ; double * datay = *pointer ; delete pointer ; print DoubleLine ( *datay ) ; } } } ,1
"void bad ( ) { if ( gloBAL_CONST_TRUE ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } } ",1
"void bad ( ) { if ( gloBAL_CONST_TRUE ) { print Line ( "" Hello from bad ( ) "" ) ; } } ",1
"void bad ( ) { if ( globalFalse ) { print Line ( "" Never print ds "" ) ; } } ",1
"void bad ( ) { if ( globalFive != 5 ) { print Line ( "" Never print ds "" ) ; } } ",1
"void bad ( ) { if ( globalFive == 5 ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } ",1
"void bad ( ) { if ( globalFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( globalFive == 5 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
void bad ( ) { if ( globalFive == 5 ) { { double * * pointer = ( double * * ) ALLOCA ( sizeof ( double * ) ) ; double * data = *pointer ; print DoubleLine ( *data ) ; } } } ,1
void bad ( ) { if ( globalFive == 5 ) { { double * * pointer = ( double * * ) ALLOCA ( sizeof ( double * ) ) ; double * dataw = *pointer ; print DoubleLine ( *dataw ) ; } } } ,1
void bad ( ) { if ( globalFive == 5 ) { { double * * pointer = ( double * * ) ALLOCA ( sizeof ( double * ) ) ; double * datay = *pointer ; print DoubleLine ( *datay ) ; } } } ,1
"void bad ( ) { if ( globalFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( globalFive == 5 ) { { } print Line ( "" Hello from bad ( ) "" ) ; } } ",1
"void bad ( ) { if ( globalReturnsFalse ( ) ) { print Line ( "" Never print sd "" ) ; } } ",1
"void bad ( ) { if ( globalReturnsTrue ( ) ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } } ",1
"void bad ( ) { if ( globalReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( globalReturnsTrue ( ) ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { if ( globalReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } else { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } else { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
"void bad ( ) { if ( globalReturnsTrueOrFalse ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } else { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memmove ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( globalTrue ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } } ",1
"void bad ( ) { if ( globalTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( globalTrue ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { if ( globalTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( stATIC_CONST_FIVE == 5 ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } } ",1
"void bad ( ) { if ( stATIC_CONST_FIVE == 5 ) { { int int One = 1 , int Two = 1 , int Sum = 0 ; print int Line ( int Sum ) ; int One + int Two ; print int Line ( int Sum ) ; } } } ",1
"void bad ( ) { if ( stATIC_CONST_FIVE == 5 ) { { int int One = 1 , int Two = 1 , int Sumtest2 = 0 ; print int Line ( int Sumtest2 ) ; int One + int Two ; print int Line ( int Sumtest2 ) ; } } } ",1
"void bad ( ) { if ( stATIC_CONST_TRUE ) { Ftc ( ( int ) 'A' , stdout ) ; } } ",1
void bad ( ) { if ( stATIC_CONST_TRUE ) { { char * pointer = ( char * ) ALLOCA ( sizeof ( char ) ) ; char data = *pointer ; print HexCharLine ( data ) ; } } } ,1
void bad ( ) { if ( stATIC_CONST_TRUE ) { { char * pointer = ( char * ) ALLOCA ( sizeof ( char ) ) ; char data = *pointer ; print HexCharLine ( datat ) ; } } } ,1
void bad ( ) { if ( stATIC_CONST_TRUE ) { { char * pointerw = ( char * ) ALLOCA ( sizeof ( char ) ) ; char dataw = *pointer ; print HexCharLine ( data ) ; } } } ,1
"void bad ( ) { if ( stATIC_CONST_TRUE ) { { int int One = 1 , int Two = 1 , int Sum = 0 ;print int Line ( int Sum ) ; int One + int Two ; print int Line ( int Sum ) ; } } } ",1
"void bad ( ) { if ( stATIC_CONST_TRUE ) { { int int One = 1 , int Two = 1 , int Sumtest2 = 0 ;print int Line ( int Sumtest2 ) ; int One + int Two ; print int Line ( int Sumtest2 ) ; } } } ",1
"void bad ( ) { if ( static-False ) { print Line ( "" Never print Value1 "" ) ; } } ",1
"void bad ( ) { if ( staticFalse ) { print Line ( "" Never print fs "" ) ; } } ",1
"void bad ( ) { if ( staticFive != 5 ) { print Line ( "" Never print Five "" ) ; } } ",1
"void bad ( ) { if ( staticFive != 5 ) { print Line ( "" Never print sf "" ) ; } } ",1
"void bad ( ) { if ( staticFive == 5 ) { print Line ( "" Hello from bad ( ) "" ) ; } } ",1
"void bad ( ) { if ( staticFive == 5 ) { { char * filename ; char tmpl [ ] = "" fnXXXXXX "" ; int fileDesc ; filename = MKTEMP ( tmpl ) ; if ( filename == NULL ) { exit ( 1 ) ; } print Line ( filename ) ; fileDesc = OPEN ( filename , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",1
"void bad ( ) { if ( staticFive == 5 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( staticFive == 5 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { if ( staticFive == 5 ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
"void bad ( ) { if ( staticFive == 5 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } } ",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { print Line ( "" Always print Error "" ) ; } } ",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { print Line ( "" Always print Null "" ) ; } } ",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { print Line ( "" Always print s True Values"" ) ; } } ",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { print Line ( "" Always print s eq"" ) ; } } ",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { print Line ( "" Always printed Error "" ) ; } } ",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { print Line ( "" Always printeq s "" ) ; } } ",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { { char * filename ; char tmpl [ ] = "" fnXXXXXX "" ; int fileDesc ; filename = MKTEMP ( tmpl ) ; if ( filename == NULL ) { exit ( 1 ) ; } print Line ( filename ) ; fileDesc = OPEN ( filename , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } } ",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
"void bad ( ) { if ( staticReturnsTrue ( ) ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( staticSix != 6 ) { print Line ( "" Never print SIX "" ) ; } } ",1
"void bad ( ) { if ( staticTrue ) { 5 ; print Line ( "" Hello from bad ( ) "" ) ; } } ",1
"void bad ( ) { if ( staticTrue ) { ;print Line ( "" Hello from bad ( ) "" ) ; } } ",1
void bad ( ) { if ( staticTrue ) { { char * pointer = ( char * ) ALLOCA ( sizeof ( char ) ) ; char data = *pointer ; print HexCharLine ( data ) ; } } } ,1
"void bad ( ) { if ( staticTrue ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { if ( staticTrue ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { if ( staticTrue ) { { char filename [ 100 ] = "" "" ; int fileDesc = -1 ; if ( fgets ( filename , 100 , stdin ) == NULL ) { print Line ( "" fgets ( ) failed "" ) ; filename [ 0 ] = '",1
"void bad ( ) { if ( staticTrue ) { { char path [ BAD_PATH_SIZE ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } } ",1
"void bad ( ) { if ( staticTrue ) { { char path [ BAD_PATH_SIZE01 ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE01 , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE01 ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } } ",1
"void bad ( ) { if ( staticTrue ) { { int int One = 1 , int Two = 1 , int Sum = 0 ;print int Line ( int Sum ) ; int One + int Two ;print int Line ( int Sum ) ; } } } ",1
"void bad ( ) { if ( staticTrue ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
void bad ( ) { int * data ;data = ( int * ) ALLOCA ( 10*sizeof ( int ) ) ; ; { int i ;for ( i = 0 ; i<10 ; i++ ) { print int Line ( data [ i ] ) ; } } } ,1
void bad ( ) { int * data ;data = ( int * ) ALLOCA ( 10*sizeof ( int ) ) ; ; { int i ;for ( k = 0 ; k < 10 ; k++ ) { print int Line ( data [ k ] ) ; } } } ,1
void bad ( ) { int * data ;data = NULL ;print int Line ( *data ) ; } ,0
void bad ( ) { int data ; if ( gloBAL_CONST_TRUE ) { ; } if ( gloBAL_CONST_TRUE ) { print int Line ( data ) ; } } ,1
void bad ( ) { int data ; if ( stATIC_CONST_FIVE == 5 ) { ; } if ( stATIC_CONST_FIVE == 5 ) { print int Line ( data ) ; } } ,1
void bad ( ) { int data ; if ( staticReturnsTrue ( ) ) { ; } if ( staticReturnsTrue ( ) ) { print int Line ( data ) ; } } ,1
"void bad ( ) { int i , j ; char * data ; data = NULL ; for ( i = 0 ; i < 1 ; i++ ) { data = ( int * ) realloc ( data , 100*sizeof ( int ) ) ; if ( data == NULL ) { exit ( -1 ) ; } strcpy ( data , "" A String "" ) ; print Line ( data ) ; } for ( j = 0 ; j < 1 ; j++ ) { ; } } ",1
"void bad ( ) { int int Fourty = 40 ; if ( int Fourty == ( int Fourty-1 ) ) { print Line ( "" Never print ds "" ) ; } } ",1
"void bad ( ) { int int Ran = Ran ( ) ; if ( int Ran < int _MIN ) { print Line ( "" Never print ds "" ) ; } } ",1
"void bad ( ) { int int Rande = rand ( ) ; if ( int Rand < int _MIN ) { print Line ( "" Never print ds "" ) ; } } ",1
"void bad ( ) { int int Thirty = 30 ; if ( int Thirty == ( int Thirty-1 ) ) { print Line ( "" Never print ds "" ) ; } } ",1
"void bad ( ) { int j ; for ( j = 0 ; j < 1 ; j++ ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } } ",1
"void bad ( ) { int j ; for ( j = 0 ; j < 1 ; j++ ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; fgets ( data , 100 , stdin ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { int j ; for ( j = 0 ; j < 1 ; j++ ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { int j ; for ( j = 0 ; j < 1 ; j++ ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } } ",1
"void bad ( ) { int j ; for ( j = 0 ; j < 1 ; j++ ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } } ",1
"void bad ( ) { int j ;for ( j = 0 ; j < 1 ; j++ ) { { int x ;x = ( rand ( ) % 3 ) ; if ( x == 0 ) { } else { print Line ( "" Inside the else statement "" ) ; } } print Line ( "" Hello from bad ( ) "" ) ; } } ",1
"void bad ( ) { list< int > data ; if ( 1 ) { data.push_back ( 100 ) ; data.push_back ( 0 ) ; } if ( 1 ) { { list< int > ::iterator i ; cout << "" The list contains: "" ; for ( i = data.begin ( ) ; i != data.end ( ) ; i++ ) { if ( !*i ) { data.clear ( ) ; } cout << "" "" << *i ; } cout << endl ; } } } ",1
"void bad ( ) { switch ( 6 ) { case 6: fprintf ( stdout , "" %s "" , "" string "" ) ; break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",1
"void bad ( ) { switch ( 6 ) { case 6: { Two int sClass * * pointer = new Two int sClass * ; Two int sClass * data = *pointer ; delete pointer ; print int Line ( data -> int One ) ; print int Line ( data -> int Two ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",1
"void bad ( ) { switch ( 6 ) { case 6: { Two int sClass * * pointer = new Two int sClass * ; Two int sClass * dataw = *pointer ; delete pointer ; print int Line ( data -> int One ) ; print int Line ( dataw -> int Two ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",1
"void bad ( ) { switch ( 6 ) { case 6: { Two int sClass * * pointer = new Two int sClass * ; Two int sClass * datay = *pointer ; delete pointer ; print int Line ( datay -> int One ) ; print int Line ( datay -> int Two ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",1
"void bad ( ) { switch ( 6 ) { case 6: { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",1
"void bad ( ) { switch ( 6 ) { case 6: { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",1
"void bad ( ) { switch ( 6 ) { case 6: { int i = 0 ;while ( i++ < 10 ) { } } print Line ( "" Hello from bad ( ) "" ) ;break ;default:print Line ( "" 0 , fixed string "" ) ;break ; } } ",1
"void bad ( ) { switch ( 6 ) { case 6: { int x ;x = ( rand ( ) % 3 ) ; if ( x == 0 ) { print Line ( "" Inside the else statement "" ) ; } else { } } print Line ( "" Hello from bad ( ) "" ) ;break ; default:print Line ( "" 0 , fixed string "" ) ; break ; } } ",1
"void bad ( ) { switch ( 6 ) { case 6: { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } break ; default: print Line ( "" 0 , fixed string "" ) ; break ; } } ",1
void bad ( ) { two int sStruct * data ;data = NULL ;print int Line ( data -> int One ) ; } ,0
"void bad ( ) { unsigned int u int Bad = ( unsigned int ) ( rand ( ) * 2 ) ; if ( u int Bad < 0 ) { print Line ( "" Never print ees "" ) ; } } ",1
"void bad ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; ; ;eeded for some flow variants */ { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100-1 ) ; /* fill with L'C's */ source [ 100-1 ] = L'",1
void bad ( ) { wchar_t * data ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; ;const CWE0.665_Improper_Initialization__wchar_t_ncat_81_base& baseObject = CWE0.665_Improper_Initialization__wchar_t_ncat_81_bad ( ) ; baseObject.action ( data ) ; } ,1
void bad ( ) { wchar_t * data33 ;data22 = NULL ;print WcharLine ( data33 [ 0 ] ) ; } ,0
"void bad ( ) { wchar_t * dataj ; wchar_t dataBuffer [ 100 ] ; data = dataBuffer ; ; ;eeded for some flow variants */ { wchar_t source [ 100 ] ; wmemset ( source , L'Cj' , 100-1 ) ; /* fill with L'C's */ source [ 100-1 ] = L'",1
"void bad ( ) { wchar_t * datar ; wchar_t dataBuffer [ 100 ] ; datar = dataBuffer ; ; ;eeded for some flow variants */ { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100-1 ) ; /* fill with L'C's */ source [ 100-1 ] = L'",1
void bad ( ) { while ( 1 ) { { Two int sClass * pointer = new Two int sClass ; Two int sClass data = *pointer ; delete pointer ; print int Line ( data. int One ) ; print int Line ( data. int Two ) ; } break ; } } ,1
void bad ( ) { while ( 1 ) { { Two int sClass * pointer = new Two int sClass ; Two int sClass dataw = *pointer ; delete pointer ; print int Line ( dataw. int One ) ; print int Line ( data. int Two ) ; } break ; } } ,1
void bad ( ) { while ( 1 ) { { Two int sClass * pointer = new Two int sClass ; Two int sClass datay = *pointer ; delete pointer ; print int Line ( data. int One ) ; print int Line ( datay. int Two ) ; } break ; } } ,1
"void bad ( ) { while ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; fgets ( data , 100 , stdin ) ; print Line ( data ) ; } break ; } } ",1
"void bad ( ) { while ( 1 ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } break ; } } ",1
"void bad ( ) { while ( 1 ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } break ; } } ",1
"void bad ( ) { while ( 1 ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } break ; } } ",1
"void bad ( ) { { char * filename ; char tmpl [ ] = "" fnXXXXXX "" ; int fileDesc ; filename = MKTEMP ( tmpl ) ; if ( filename == NULL ) { exit ( 1 ) ; } print Line ( filename ) ; fileDesc = OPEN ( filename , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",1
"void bad ( ) { { char * pass = ( char * ) ALLOCA ( 100 * sizeof ( char ) ) ; size_t passLen = 0 ; HANDLE hUser ; char * UN = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; size_t passLen = 0 ; HANDLE hUser ; char * UN = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; size_t passLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass = ( char * ) malloc ( 100 * sizeof ( char ) ) ; if ( pass == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ; if ( pass1 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN1 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass1 = ( char * ) malloc ( 100 * sizeof ( char ) ) ; if ( pass1 == NULL ) { exit ( -1 ) ; } size_t passLen1 = 0 ; HANDLE hUser ; char * UN = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass1 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass1 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN1 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass1 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass1 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * username1 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass1 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass1 == NULL ) { exit ( -1 ) ; } size_t passLen1 = 0 ; HANDLE hUser ; char * UN = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass1 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass1 == NULL ) { exit ( -1 ) ; } size_t passLen1 = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass2 = ( char * ) malloc ( 100 * sizeof ( char ) ) ; if ( pass2 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN2 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass2 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass2 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN2 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass2 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass2 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * username2 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass3 = ( char * ) malloc ( 100 * sizeof ( char ) ) ; if ( pass3 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN3 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass3 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass3 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * UN3 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * pass3 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( pass3 == NULL ) { exit ( -1 ) ; } size_t passLen = 0 ; HANDLE hUser ; char * username3 = "" User "" ; char * domain = "" Domain "" ; pass [ 0 ] = '",1
"void bad ( ) { { char * password = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; size_t passwordLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",1
"void bad ( ) { { char * password = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( password == NULL ) { exit ( -1 ) ; } size_t passwordLen = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",1
"void bad ( ) { { char * password1 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( password1 == NULL ) { exit ( -1 ) ; } size_t passwordLen = 0 ; HANDLE hUser ; char * username1 = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",1
"void bad ( ) { { char * password1 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( password1 == NULL ) { exit ( -1 ) ; } size_t passwordLen1 = 0 ; HANDLE hUser ; char * username = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",1
"void bad ( ) { { char * password2 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( password2 == NULL ) { exit ( -1 ) ; } size_t passwordLen = 0 ; HANDLE hUser ; char * username2 = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",1
"void bad ( ) { { char * password3 = ( char * ) malloc ( 100*sizeof ( char ) ) ; if ( password3 == NULL ) { exit ( -1 ) ; } size_t passwordLen = 0 ; HANDLE hUser ; char * username3 = "" User "" ; char * domain = "" Domain "" ; password [ 0 ] = '",1
void bad ( ) { { char * pointer = ( char * ) ALLOCA ( sizeof ( char ) ) ; char data = *pointer ; print HexCharLine ( data ) ; } } ,1
void bad ( ) { { char * pointer = ( char * ) ALLOCA ( sizeof ( char ) ) ; char datat = *pointer ; print HexCharLine ( datawt ) ; } } ,1
void bad ( ) { { char * pointerw = ( char * ) ALLOCA ( sizeof ( char ) ) ; char dataw = *pointer ; print HexCharLine ( dataw ) ; } } ,1
"void bad ( ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; print Line ( "" Please enter a string: "" ) ; fgets ( data , 100 , stdin ) ; print Line ( data ) ; } } ",1
"void bad ( ) { { char dataBuffer [ 100 ] = "" "" ; char * data = dataBuffer ; strcpy ( data , "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( char ) ) ; print Line ( data ) ; } } ",1
"void bad ( ) { { char dest [ DEST_SIZE ] ; sprintf ( dest , "" %s %s "" , SOURCE_STRING ) ; print Line ( dest ) ; } } ",1
"void bad ( ) { { char filename [ MAX_PATH ] = "" "" ; int fileDesc ; / if ( GetTempFileNameA ( "" . "" , "" bad "" , 0 , filename ) == 0 ) { exit ( 1 ) ; } print Line ( filename ) ; fileDesc = OPEN ( filename , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",1
"void bad ( ) { { char filename01 [ MAX_PATH ] = "" "" ; int fileDesc ; / if ( GetTempFileNameA ( "" . "" , "" bad "" , 0 , filename01 ) == 0 ) { exit ( 1 ) ; } print Line ( filename01 ) ; fileDesc = OPEN ( filename01 , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",1
"void bad ( ) { { char filename02 [ MAX_PATH ] = "" "" ; int fileDesc ; / if ( GetTempFileNameA ( "" . "" , "" bad "" , 0 , filename02 ) == 0 ) { exit ( 1 ) ; } print Line ( filename02 ) ; fileDesc = OPEN ( filename02 , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",1
"void bad ( ) { { char filename03 [ MAX_PATH ] = "" "" ; int fileDesc ; / if ( GetTempFileNameA ( "" . "" , "" bad "" , 0 , filename03 ) == 0 ) { exit ( 1 ) ; } print Line ( filename03 ) ; fileDesc = OPEN ( filename03 , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",1
"void bad ( ) { { char filename04 [ MAX_PATH ] = "" "" ; int fileDesc ; / if ( GetTempFileNameA ( "" . "" , "" bad "" , 0 , filename04 ) == 0 ) { exit ( 1 ) ; } print Line ( filename04 ) ; fileDesc = OPEN ( filename04 , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",1
"void bad ( ) { { char filename05 [ MAX_PATH ] = "" "" ; int fileDesc ; / if ( GetTempFileNameA ( "" . "" , "" bad "" , 0 , filename05 ) == 0 ) { exit ( 1 ) ; } print Line ( filename05 ) ; fileDesc = OPEN ( filename05 , O_RDWR|O_CREAT , S_IREAD|S_IWRITE ) ; if ( fileDesc != -1 ) { print Line ( "" Temporary file was opened...now closing file "" ) ; CLOSE ( fileDesc ) ; } } } ",1
"void bad ( ) { { char path [ BAD_PATH_SIZE ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } ",1
"void bad ( ) { { char path [ BAD_PATH_SIZE01 ] ; req length ; length = GetCurrentDirectoryA ( BAD_PATH_SIZE01 , path ) ; if ( length == 0 || length > = BAD_PATH_SIZE01 ) { exit ( 1 ) ; } if ( !PathAppendA ( path , "" AAAAAAAAAAAA "" ) ) { exit ( 1 ) ; } print SizeTLine ( strlen ( path ) ) ; print int Line ( BAD_PATH_SIZE ) ; print Line ( path ) ; } } ",1
void bad ( ) { { int * int pointer = NULL ; if ( int pointer == NULL ) { print int Line ( * int pointer ) ; } } } ,0
void bad ( ) { { int * int pointer = NULL ; int pointer = ( int * ) malloc ( sizeof ( int ) ) ;* int pointer = 5 ;print int Line ( * int pointer ) ; if ( int pointer != NULL ) { * int pointer = 10 ; } print int Line ( * int pointer ) ; } } ,0
"void bad ( ) { { int F01 = 0 ;while ( F01++ < 10 ) { } } print Line ( "" Hello from bad ( ) "" ) ; } ",1
"void bad ( ) { { int K1 ; K1 = ( rand ( ) % 3 ) ; if ( K1 == 0 ) { } else { print Line ( "" Inside the else statement "" ) ; } } print Line ( "" Hello from bad ( ) "" ) ; } ",1
"void bad ( ) { { int i ; for ( i = 0 ; i < 10 ; i++ ) { } } print Line ( "" Hello from bad ( ) "" ) ; } ",1
"void bad ( ) { { int i = 0 ;while ( i++ < 10 ) { } } print Line ( "" Hello from bad ( ) "" ) ; } ",1
void bad ( ) { { int int One = 1 ;print int Line ( int One ) ; int One = int One ;print int Line ( int One ) ; } } ,1
"void bad ( ) { { int k ; for ( k = 0 ; k < 10 ; k++ ) { } } print Line ( "" Hello from bad ( ) "" ) ; } ",1
"void bad ( ) { { int x ; x = ( rand ( ) % 3 ) ; if ( x == 0 ) { print Line ( "" Inside the else statement "" ) ; } else { } } print Line ( "" Hello from bad ( ) "" ) ; } ",1
"void bad ( ) { { int x ;x = ( rand ( ) % 3 ) ; if ( x == 0 ) { } else { print Line ( "" Inside the else statement "" ) ; } } print Line ( "" Hello from bad ( ) "" ) ; } ",1
"void bad ( ) { { int x = ( rand ( ) % 3 ) ;switch ( x ) { case 0: break ; } } print Line ( "" Hello from bad ( ) "" ) ; } ",1
"void bad ( ) { { int x = ( rand ( ) % 3 ) ;switch ( xtest2 ) { case 0: break ; } } print Line ( "" Hello from badtest2 ( ) "" ) ; } ",1
"void bad ( ) { { int xtest2 ; x test2 = ( rand ( ) % 3 ) ; if ( xtest2 == 0 ) { print Line ( "" Inside the else statement "" ) ; } else { } } print Line ( "" Hello from bad ( ) "" ) ; } ",1
"void bad ( ) { { two int sStruct *two int sStructpointer = NULL ; if ( ( two int sStructpointer != NULL ) & ( two int sStructpointer -> int One == 5 ) ) { print Line ( "" int One == 5 "" ) ; } } } ",0
"void bad ( ) { { wchar_t dataBuffer [ 100 ] = L "" "" ; wchar_t * data = dataBuffer ; wcscpy ( data , L "" abcdefghijklmnopqrstuvwxyz "" ) ; memcpy ( data + 6 , data + 4 , 10*sizeof ( wchar_t ) ) ; print Line ( data ) ; } } ",1
"void bad ( ) { { } print Line ( "" Hello from bad ( ) "" ) ; } ",1
"void bad ( ) { { } print Line ( "" Hello from badtest2 ( ) "" ) ; } ",1
void bad ( ){{ char * data ; if ( 5 == 5 ) { data = NULL ; } if ( 5 == 5 ) { print HexCharLine ( data [ 0 ] ) ; } } ,1
void bad ( ){{ char * dataValue ; if ( 6 == 6 ) { dataValue = NULL ; } if ( 6 == 6 ) { print HexCharLine ( dataValue [ 0 ] ) ; } } ,1
"void bad ( ){{ int j ; for ( j = 0 ; j < 1 ; j++ ) { { two int sStruct *two int sStructPo int er = NULL ; if ( ( two int sStructPo int er != NULL ) & ( two int sStructPo int er -> int One == 5 ) ) { print Line ( "" int One == 5 "" ) ; } } } } ",1
"void bad ( ){{ int k; for ( k = 0 ; k < 1 ; k++ ) { { two int sStruct *two int sStructPo int er = NULL ; if ( ( two int sStructPo int er != NULL ) & ( two int sStructPo int er -> int One == 6 ) ) { print Line ( "" int One == 6 "" ) ; } } } } ",1
"void bad ( ){{ two int sStruct *two int sStructPo int Value = NULL ; if ( ( two int sStructPo int Value != NULL ) & ( two int sStructPo int Value -> int One == 5 ) ) { print Line ( "" int One == 6 "" ) ; } } } ",1
"void bad ( ){{ two int sStruct *two int sStructPo int er = NULL ; if ( ( two int sStructPo int er != NULL ) & ( two int sStructPo int er -> int One == 5 ) ) { print Line ( "" int One == 5 "" ) ; } } } ",1
"void bad ( float dataCopy ) { data = dataCopy ; { #ifdef _WIN32 WSADATA wsaData ; int wsaDataInit = 0 ; #endif int recvResult ; struct sockaddr_in service ; SOCKET connectSocket = INVALID_SOCKET ; char inputBuffer [ CHAR_ARRAY_SIZE ] ; do { #ifdef _WIN32 if ( WSAStartup ( MAKEWORD ( 2 , 2 ) , &wsaData ) != NO_ERROR ) { break ; } wsaDataInit = 1 ; #endif connectSocket = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; if ( connectSocket == INVALID_SOCKET ) { break ; } memset ( &service , 0 , sizeof ( service ) ) ; service.sin_family = AF_INET ; service.sin_addr.s_addr = inet_addr ( IP_ADDRESS ) ; service.sin_port = htons ( TCP_PORT ) ; if ( connect ( connectSocket , ( struct sockaddr* ) &service , sizeof ( service ) ) == SOCKET_ERROR ) { break ; } recvResult = recv ( connectSocket , inputBuffer , CHAR_ARRAY_SIZE - 1 , 0 ) ; if ( recvResult == SOCKET_ERROR || recvResult == 0 ) { break ; } inputBuffer [ recvResult ] = '",1
"void bad ( wchar_t * dataCopy ) { data = dataCopy ; ; } CWE0.665_Improper_Initialization bad ( ) { { wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100-1 ) ; source [ 100-1 ] = L'",1
"void bad action ( char * data ) const { EXECL ( COMMAND_ int _PATH , COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL ) ; } } ",1
"void bad action ( char * data ) const { EXECLP ( COMMAND_ int , COMMAND_ int , COMMAND_ARG1 , COMMAND_ARG3 , NULL ) ; } } ",1
"void bad action ( char * data ) { EXECL ( COMMAND_ int _PATH , COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL ) ; } } ",1
"void bad action ( char * data ) { EXECLP ( COMMAND_ int , COMMAND_ int , COMMAND_ARG1 , COMMAND_ARG3 , NULL ) ; } } ",1
"void bad action ( char * data ) { { char *argValues [ ] = { COMMAND_ int _PATH , COMMAND_ARGValues , COMMAND_ARGValues , NULL } ; EXECV ( COMMAND_ int _PATH , argValues ) ; } } } ",1
"void bad action ( char * data ) { { char *args [ ] = { COMMAND_ int _PATH , COMMAND_ARG1 , COMMAND_ARG3 , NULL } ; EXECV ( COMMAND_ int _PATH , args ) ; } } } ",1
"void bad action ( char * data2 ) { { char *argValues2 [ ] = { COMMAND_ int _PATH , COMMAND_ARGValues2 , COMMAND_ARGValues2 , NULL } ; EXECV ( COMMAND_ int _PATH , argValues2 ) ; } } } ",1
"void bad action ( char * data3 ) { { char *argValues [ ] = { COMMAND_ int _PATH , COMMAND_ARGValues3 , COMMAND_ARGValues3 , NULL } ; EXECV ( COMMAND_ int _PATH , argValues3 ) ; } } } ",1
"void bad action ( char * dataDes ) const { EXECLP ( COMMAND_ intDes , COMMAND_ intDes , COMMAND_ARGDes , COMMAND_ARGDes , NULL ) ; } } ",1
"void bad action ( char * dataDes ) { EXECL ( COMMAND_ int _PATH , COMMAND_ int _PATH , COMMAND_ARGDes , COMMAND_ARGDes , NULL ) ; } } ",1
"void bad action ( char * dataInt ) const { EXECLP ( COMMAND_ intInt , COMMAND_ intInt , COMMAND_ARGInt , COMMAND_ARGInt , NULL ) ; } } ",1
"void bad action ( char * dataInt ) { { char *argInt [ ] = { COMMAND_ int _PATH , COMMAND_ARGInt , COMMAND_ARGInt , NULL } ; EXECV ( COMMAND_ int _PATH , argInt ) ; } } } ",1
"void bad action ( char * dataValue ) const { EXECL ( COMMAND_ int _PATH , COMMAND_ int _PATH , COMMAND_ARGValue , COMMAND_ARGValue , NULL ) ; } } ",1
"void bad action ( char * dataValue ) { EXECL ( COMMAND_ int _PATH , COMMAND_ int _PATH , COMMAND_ARGValue , COMMAND_ARGValue , NULL ) ; } } ",1
"void bad action ( char * dataValue1 ) const { EXECL ( COMMAND_ int _PATH , COMMAND_ int _PATH , COMMAND_ARGValue1 , COMMAND_ARGValue1 , NULL ) ; } } ",1
"void bad action ( char * dataValue3 ) const { EXECL ( COMMAND_ int _PATH , COMMAND_ int _PATH , COMMAND_ARGValue3 , COMMAND_ARGValue3 , NULL ) ; } } ",1
"void bad action ( char * dataValuea) const { EXECL ( COMMAND_ int _PATH , COMMAND_ int _PATH , COMMAND_ARGValuea , COMMAND_ARGValuea , NULL ) ; } } ",1
"void bad action ( char * dataValues ) { EXECL ( COMMAND_ int _PATH , COMMAND_ int _PATH , COMMAND_ARGValues , COMMAND_ARGValues , NULL ) ; } } ",1
"void bad action ( char * dataz ) { { char *argValuesz [ ] = { COMMAND_ int _PATH , COMMAND_ARGValuesz , COMMAND_ARGValues , NULL } ; EXECV ( COMMAND_ int _PATH , argValuesz ) ; } } } ",1
void bad() { char * data; if(5==5) { data = NULL; } if(5==5) { printHexCharLine(data[0]); } },1
"void bad() { goto sink; sink: { char * password = (char *)malloc(100*sizeof(char)); if (password == NULL) {exit(-1);} size_t passwordLen = 0; HANDLE hUser; char * username = ""User""; char * domain = ""Domain""; password[0] = '",1
"void bad() { goto sink; sink: { char password[100] = """"; size_t passwordLen = 0; HANDLE hUser; char * username = ""User""; char * domain = ""Domain""; if (fgets(password, 100, stdin) == NULL) { printLine(""fgets() failed""); password[0] = '",1
"void bad() { if(5==5) { { wchar_t * password = (wchar_t *)ALLOCA(100*sizeof(wchar_t)); size_t passwordLen = 0; HANDLE hUser; wchar_t * username = L""User""; wchar_t * domain = L""Domain""; password[0] = L'",1
"void bad() { int j; for(j = 0; j < 1; j++) { { twoIntsStruct *twoIntsStructPointer = NULL; if ((twoIntsStructPointer != NULL) & (twoIntsStructPointer->intOne == 5)) { printLine(""intOne == 5""); } } } }",1
"void bad() { { char * password = (char *)ALLOCA(100*sizeof(char)); size_t passwordLen = 0; HANDLE hUser; char * username = ""User""; char * domain = ""Domain""; password[0] = '",1
"void bad() { { char * password = (char *)malloc(100*sizeof(char)); if (password == NULL) {exit(-1);} size_t passwordLen = 0; HANDLE hUser; char * username = ""User""; char * domain = ""Domain""; password[0] = '",1
"void bad() { { twoIntsStruct *twoIntsStructPointer = NULL; if ((twoIntsStructPointer != NULL) & (twoIntsStructPointer->intOne == 5)) { printLine(""intOne == 5""); } } }",1
"void bad1 ( ) { char * data ; data = NULL ; data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } delete [ ] data ; } ",1
"void bad12 ( ) { char * data4 ; data4 = NULL ; data = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data == NULL ) { exit ( -1 ) ; } delete [ ] data4 ; } ",1
"void bad12 ( ) { char * data5 ; data5 = NULL ; data5 = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( data5 == NULL ) { exit ( -1 ) ; } delete [ ] data5 ; } ",1
"void bad2 ( ) { char * data ; datar = NULL ; datar = ( char * ) calloc ( 100 , sizeof ( char ) ) ; if ( datar == NULL ) { exit ( -1 ) ; } delete [ ] datar ; } ",1
"void bad::action ( char * data ) const { fprintf ( stdout , data ) ; } } ",1
"void bad::action ( char * data ) const { { SNprintf ( dest , 100-1 , data ) ; } } } ",1
"void bad::action ( char * data ) const { { char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",1
"void bad::action ( char * data ) const { { char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",1
"void bad::action ( char * data ) const { { memset ( dest , 'C' , 100-1 ) ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",1
"void bad::action ( char * data ) const { { size_t i , destLen ; char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",1
void bad::action ( char * data ) { printf ( data ) ; } } ,1
"void bad::action ( char * data ) { { char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",1
"void bad::action ( char * data ) { { char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",1
"void bad::action ( char * data ) { { memset ( dest , 'C' , 100-1 ) ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",1
"void bad::action ( char * datae ) const { { size_t sourceLen ; char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ;source [ 100-1 ] = '",1
"void bad::action ( char * datae ) const { { size_t sourceLen ; char source [ 100 ] ; memset ( source , 'Ce' , 100-1 ) ;source [ 100-1 ] = '",1
"void bad::action ( char * datat ) const { { size_t sourceLen ; char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ;source [ 100-1 ] = '",1
void bad::action ( float data ) const { { int result = ( int ) ( 100.0 / data ) ; print int Line ( result ) ; } } } ,1
"void bad::action ( wchar_t * data ) const { { size_t sourceLen ; wchar_t source [ 100 ] ; wmemset ( source , L'C' , 100-1 ) ; source [ 100-1 ] = L'",1
"void badSink ( char * * dataPtr ) ;void bad ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",1
void badSink ( char * * dataPtr ) ;void bad ( ) { char * data ;data = NULL ;badSink ( &data ) ; } ,0
void badSink ( char * data ) ; void badSink ( char * data ) { badSink ( data ) ; } ,1
"void badSink ( char * data ) ;void CWE126_Buffer_Overread__char_alloca_loop_54_bad ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",1
"void badSink ( char * data ) ;void bad ( ) { char * data ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",1
void badSink ( char * data ) ;void bad ( ) { char * data ;data = NULL ;badSink ( data ) ; } ,0
void badSink ( char * data ) ;void badSink ( char * data ) { badSink ( data ) ; } ,0
void badSink ( char * data ) { print HexCharLine ( data [ 0 ] ) ; } ,0
"void badSink ( char * data ) { { char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",1
"void badSink ( char * data ) { { memset ( dest , 'C' , 100-1 ) ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",1
"void badSink ( char * data ) { { size_t i , destLen ; char dest [ 100 ] ; memset ( dest , 'C' , 100-1 ) ; dest [ 100-1 ] = '",1
void badSink ( char * dataInt ) ; void badSink ( char * dataInt ) { badSink ( dataInt ) ; } ,1
void badSink ( char * dataValue ) ; void badSink ( char * dataValue ) { badSink ( dataValue ) ; } ,1
void badSink ( char * dataValue 1) ; void badSink ( char * dataValue1 ) { badSink ( dataValue1 ) ; } ,1
void badSink ( char * dataValue2 ) ; void badSink ( char * dataValue2 ) { badSink ( dataValue2 ) ; } ,1
void badSink ( char * dataValueq ) ; void badSink ( char * dataValueq ) { badSink ( dataValueq ) ; } ,1
void badSink ( char * data_Value ) ;void bad ( ) { char * data_Value ;data_Value = NULL ;badSink ( data _Value) ; } ,0
void badSink ( char * data_Value ) ;void bad ( ) { char * data_Value ;data_Value = NULL ;badSink ( data_Value ) ; } ,0
void badSink ( char data ) ;void bad ( ) { char data ;void ( *funcPtr ) ( char ) = badSink ; data = ' ' ; data = CHAR_MAX ; funcPtr ( data ) ; } ,1
void badSink ( char data ) ;void bad ( ) { char data ;void ( *funcPtr ) ( char ) = badSink ; data55 = ' ' ; data = CHAR_MAX ; funcPtr ( data55 ) ; } ,1
void badSink ( double * * dataMain ) ;void bad ( ) { double * dataMain ; dataMain = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ; ; badSink ( &dataMain ) ; } ,1
void badSink ( double * * dataPtr ) ;void bad ( ) { double * data ;data = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ; ; badSink ( &data ) ; } ,1
void badSink ( double * * dataPtr ) ;void bad ( ) { double * data ;data = ( double * ) ALLOCA ( 20 *sizeof ( double ) ) ; ; badSink ( &data ) ; } ,1
void badSink ( double * * dataValues ) ;void bad ( ) { double * dataValues ;dataValues = ( double * ) ALLOCA ( 10*sizeof ( double ) ) ; ; badSink ( &dataValues ) ; } ,1
"void badSink ( structType myStruct ) { char * data = myStruct.structFirst ; { char source [ 100 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",1
"void badSink ( structType myStruct ) { char * data = myStruct.structFirst ; { char source [ 100 ] ; memset ( source , 'C2' , 100-1 ) ; source [ 100-1 ] = '",1
"void badSink ( structType myStruct ) { char * data = myStruct.structFirst ; { char source [ 100 ] ; memset ( source , 'Cr' , 100-1 ) ; source [ 100-1 ] = '",1
"void badSink ( structType myStruct ) { char * data = myStruct.structFirst ; { char source [ 1000 ] ; memset ( source , 'C' , 100-1 ) ; source [ 100-1 ] = '",1
"void badSink ( vector<char *> dataVector ) ;void bad ( ) { char * data ; vector<char *> dataVector ; char * dataBadBuffer = ( char * ) ALLOCA ( 50*sizeof ( char ) ) ; char * dataGBuffer = ( char * ) ALLOCA ( 100*sizeof ( char ) ) ; memset ( dataBadBuffer , 'A' , 50-1 ) ; dataBadBuffer [ 50-1 ] = '",1
void badSink ( void * dataVoidPtkhr ) ;void bad ( ) { double datakh ;badSink ( &data ) ; } ,1
void badSink ( void * dataVoidPtr ) ;void bad ( ) { int * data ;data = ( int * ) ALLOCA ( 10*sizeof ( int ) ) ; ; badSink ( &data ) ; } ,1
void badSink ( void * dataVoidPtr ) ;void bad ( ) { int * dataV ;dataV = ( int * ) ALLOCA ( 10*sizeof ( int ) ) ; ; badSink ( &dataV ) ; } ,1
void badSink ( void * dataVoidPtr ) { char * dataPtr = ( char * ) dataVoidPtr ; char data = ( *dataPtr ) ; char result = data + 1 ; print HexCharLine ( result ) ; } } ,1
void badSink ( void * dataVoidPtr ) { char * dataPtr = ( char * ) dataVoidPtr ; char data44 = ( *dataPtr ) ; char result = data44 + 1 ; print HexCharLine ( result ) ; } } ,1
void badSink ( void * datafghVoidPtr ) { char * * dataPtr = ( charkh * * ) dataVoidPtr ;char * datahk = ( *dataPtr ) ;print Line ( data ) ; } ,1
void badSink_c ( list< int > data ) ;void badSink_b ( list< int > data ) { badSink_c ( data ) ; } ,1
"void circ_set_seqno ( void *buf , u int 32_t seqno ) { struct circ_buf *b = ( struct circ_buf * ) buf ; b -> head_seqno = seqno ; } ",1
"void circ_set_seqno ( void *buf , uint32_t seqno ) { struct circ_buf *b = ( struct circ_buf * ) buf ; b -> head_seqno = seqno ; } ",1
void connect_socket_81_bad::action ( float data ) const { { int result = ( int ) ( 100.0 / data ) ; print int Line ( result ) ; } } } ,1
"void cp_delete_observer ( cp_resource_t *resource , cp_address_t *observer , const str *token ) { cp_subscription_t *s ; s = cp_find_observer ( resource , observer , token ) ; ",1
void disable_disk ( ) { atomic D_A = FALSE ; D_Id = FALSE ; call diskIOStdControl.stop ( ) ; } ,1
void disable_dock ( ) { call diskIO.disableDock ( ) ; } ,1
"void dma ( void * table ) { BITBAND_PERI ( DMA->CFG , DMA ) = 1 ; DMA->CTLBASE = ( uint32_t ) table ; }",0
void dock_disk ( ) { atomic D_A = FALSE ; call diskIOStdControl.start ( ) ; } ,1
void enable_dock ( ) { call diskIO.E_Dock ( ) ; } ,1
void f ( pthread_mutex_t *mutex ) { pthread_lock ( mutex ) ; pthread_unlock ( mutex ) ; } ,1
void f ( pthread_mutex_t *mutex1 ) { pthread_lock ( mutex1 ) ; pthread_unlock ( mutex1 ) ; } ,1
void f ( pthread_mutex_t *mutex10 ) { pthread_lock ( mutex10 ) ; pthread_unlock ( mutex10 ) ; } ,1
void f ( pthread_mutex_t *mutex11 ) { pthread_lock ( mutex11 ) ; pthread_unlock ( mutex11 ) ; } ,1
void f ( pthread_mutex_t *mutex2 ) { pthread_lock ( mutex2 ) ; pthread_unlock ( mutex2 ) ; } ,1
void f ( pthread_mutex_t *mutex3 ) { pthread_lock ( mutex3 ) ; pthread_unlock ( mutex3 ) ; } ,1
void f ( pthread_mutex_t *mutex4 ) { pthread_lock ( mutex4 ) ; pthread_unlock ( mutex4 ) ; } ,1
void f ( pthread_mutex_t *mutex5 ) { pthread_lock ( mutex5 ) ; pthread_unlock ( mutex5 ) ; } ,1
void f ( pthread_mutex_t *mutex6 ) { pthread_lock ( mutex6 ) ; pthread_unlock ( mutex6 ) ; } ,1
void f ( pthread_mutex_t *mutex7 ) { pthread_lock ( mutex7 ) ; pthread_unlock ( mutex7 ) ; } ,1
void f ( pthread_mutex_t *mutex8 ) { pthread_lock ( mutex8 ) ; pthread_unlock ( mutex8 ) ; } ,1
void f ( pthread_mutex_t *mutex9 ) { pthread_lock ( mutex9 ) ; pthread_unlock ( mutex9 ) ; } ,1
void f ( pthread_mutex_t *mutexa ) { pthread_lock ( mutexa ) ; pthread_unlock ( mutexa ) ; } ,1
void f ( pthread_mutex_t *mutexa1 ) { pthread_lock ( mutexa1 ) ; pthread_unlock ( mutexa1 ) ; } ,1
void f ( pthread_mutex_t *mutexa10 ) { pthread_lock ( mutexa10 ) ; pthread_unlock ( mutexa10 ) ; } ,1
void f ( pthread_mutex_t *mutexa11 ) { pthread_lock ( mutexa11 ) ; pthread_unlock ( mutexa11 ) ; } ,1
void f ( pthread_mutex_t *mutexa2 ) { pthread_lock ( mutexa2 ) ; pthread_unlock ( mutexa2 ) ; } ,1
void f ( pthread_mutex_t *mutexa3 ) { pthread_lock ( mutexa3 ) ; pthread_unlock ( mutexa3 ) ; } ,1
void f ( pthread_mutex_t *mutexa4 ) { pthread_lock ( mutexa4 ) ; pthread_unlock ( mutexa4 ) ; } ,1
void f ( pthread_mutex_t *mutexa5 ) { pthread_lock ( mutexa5 ) ; pthread_unlock ( mutexa5 ) ; } ,1
void f ( pthread_mutex_t *mutexa6 ) { pthread_lock ( mutexa6 ) ; pthread_unlock ( mutexa6 ) ; } ,1
void f ( pthread_mutex_t *mutexa7 ) { pthread_lock ( mutexa7 ) ; pthread_unlock ( mutexa7 ) ; } ,1
void f ( pthread_mutex_t *mutexa8 ) { pthread_lock ( mutexa8 ) ; pthread_unlock ( mutexa8 ) ; } ,1
void f ( pthread_mutex_t *mutexa9 ) { pthread_lock ( mutexa9 ) ; pthread_unlock ( mutexa9 ) ; } ,1
"void han ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , han ) signal ( SIR2 , han ) } ",1
"void han1 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , han1 ) signal ( SIR2 , han1 ) } ",1
"void han2 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , han2 ) signal ( SIR2 , han2 ) } ",1
"void han3 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , han3 ) signal ( SIR2 , han3 ) } ",1
"void han4 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , han4 ) signal ( SIR2 , han4 ) } ",1
"void han5 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , han5 ) signal ( SIR2 , han5 ) } ",1
"void hanD ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , han ) signal ( SIR2 , han ) } ",1
"void hanD1 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hanD1 ) signal ( SIR2 , hanD1 ) } ",1
"void hanD2 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hanD2 ) signal ( SIR2 , han2 ) } ",1
"void hanD3 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hanD3 ) signal ( SIR2 , hanD3 ) } ",1
"void hanD4 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hanD4 ) signal ( SIR2 , hanD4 ) } ",1
"void hanD5 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hanD5 ) signal ( SIR2 , hanD5 ) } ",1
"void hanDa1 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hanDa1 ) signal ( SIR2 , hanDa1 ) } ",1
"void hanDa2 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hanDa2 ) signal ( SIR2 , hanDa2 ) } ",1
"void hanDa3 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hanDa3 ) signal ( SIR2 , hanDa3 ) } ",1
"void hanDa4 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hanDa4 ) signal ( SIR2 , hanDa4 ) } ",1
"void hanDa5 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hanDa5 ) signal ( SIR2 , hanDa5 ) } ",1
"void hana1 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hana1 ) signal ( SIR2 , hana1 ) } ",1
"void hana2 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hana2 ) signal ( SIR2 , hana2 ) } ",1
"void hana3 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hana3 ) signal ( SIR2 , hana3 ) } ",1
"void hana4 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hana4 ) signal ( SIR2 , hana4 ) } ",1
"void hana5 ( int sigNum ) { int a ; } int main ( int argc , char* argv[] ) { signal ( SR1 , hana5 ) signal ( SIR2 , hana5 ) } ",1
void har ( ) { size_t len ; Ca ( len < = MAX_HOSTNAME_LEN ) ; char * pcHostName = safeMalloc ( len ) ; Ca ( len > 0 ) ; Ca ( pcHostName ! = NULL ) ; pcHostName[ len - 1 ] = NULL ; gethostbyname ( pcHostName ) ; },1
void harc ( ) { size_t lenc ; Ca ( lenc < = MAX_HOSTNAME_LEN ) ; char * pcHostName = safeMalloc ( lenc ) ; Ca ( len > 0 ) ; Ca ( pcHostName ! = NULL ) ; pcHostName[ lenc - 1 ] = NULL ; gethostbyname ( pcHostName ) ; } ,1
void harm ( ) { size_t lenm ; Ca ( lenm < = MAX_HOSTNAME_LEN ) ; char * pcHostName = safeMalloc ( lenm ) ; Ca ( lenm > 0 ) ; Ca ( pcHostName ! = NULL ) ; pcHostName[ lenm - 1 ] = NULL ; gethostbyname ( pcHostName ) ; } ,1
void harness ( ) { uint8_t ucBUFFER_SIZE ; CP ( ucBUFFER_SIZE > = sizeof ( ARPPacket_t ) && ucBUFFER_SIZE < 2 * sizeof ( ARPPacket_t ) ) ; void *xBuffer = malloc ( ucBUFFER_SIZE ) ; xNetworkBuffer2.xDataLength = ucBUFFER_SIZE ; CP ( xNetworkBuffer2.xDataLength > = sizeof ( ARPPacket_t ) ) ; vARPGenerateRequestPacket ( &xNetworkBuffer2 ) ; ,1
"void harness ) ) { size_t buf_size ; buffer_size = buf_size ; FreeRTOS_Socket_t pxSocket ; NetworkBuffer ; px.EthernetBuffer = malloc ) buffer_size ) ; px.xDataLength = buffer_size ; CP ) buffer_size < CBMC_MAX_OBJECT_SIZE ) ; CP ) buffer_size < = BUFFER_SIZE ) ; CP ) buffer_size > 47 ) ; prvCheckOptions ) &pxSocket , &pxNetworkBuffer ) ; }5 ; ",1
"void harness1 ) ) { size_t buf_size ; buffer_size01 = buf_size ; FreeRTOS_Socket_t pxSocket ; NetworkBuffer ; px.EthernetBuffer = malloc ) buffer_size01 ) ; px.xDataLength = buffer_size01 ; CP ) buffer_size01 < CBMC_MAX_OBJECT_SIZE ) ; CP ) buffer_size01 < = BUFFER_SIZE01 ) ; CP ) buffer_size01 > 47 ) ; prvCheckOptions ) &pxSocket , &pxNetworkBuffer ) ; } ; ",1
"void harness2 ) ) { size_t buf_size ; buffer_size02= buf_size ; FreeRTOS_Socket_t pxSocket ; NetworkBuffer ; px.EthernetBuffer = malloc ) buffer_size02 ) ; px.xDataLength = buffer_size01 ; CP ) buffer_size02 < CBMC_MAX_OBJECT_SIZE ) ; CP ) buffer_size02 < = BUFFER_SIZE02 ) ; CP ) buffer_size02> 47 ) ; prvCheckOptions ) &pxSocket , &pxNetworkBuffer ) ; } ; ",1
"void harness3 ) ) { size_t buf_size ; buffer_size03= buf_size ; FreeRTOS_Socket_t pxSocket ; NetworkBuffer ; px.EthernetBuffer = malloc ) buffer_size03 ) ; px.xDataLength = buffer_size01 ; CP ) buffer_size03 < CBMC_MAX_OBJECT_SIZE ) ; CP ) buffer_size03 < = BUFFER_SIZE03 ) ; CP ) buffer_size03> 47 ) ; prvCheckOptions ) &pxSocket , &pxNetworkBuffer ) ; } ; ",1
"void harness4 ) ) { size_t buf_size ; buffer_size04= buf_size ; FreeRTOS_Socket_t pxSocket ; NetworkBuffer ; px.EthernetBuffer = malloc ) buffer_size04 ) ; px.xDataLength = buffer_size01 ; CP ) buffer_size04 < CBMC_MAX_OBJECT_SIZE ) ; CP ) buffer_size04 < = BUFFER_SIZE04 ) ; CP ) buffer_size04> 47 ) ; prvCheckOptions ) &pxSocket , &pxNetworkBuffer ) ; } ; ",1
void harnesses ( ) { uint8_t ucBUFFER_SIZEs ; CP ( ucBUFFER_SIZEs > = sizeof ( ARPPacket_t ) && ucBUFFER_SIZE < 2 * sizeof ( ARPPacket_t ) ) ; void *xBuffer = malloc ( ucBUFFER_SIZEs ) ; xNetworkBuffer2.xDataLength = ucBUFFER_SIZEs ; CP ( xNetworkBuffer2.xDataLength > = sizeof ( ARPPacket_t ) ) ; vARPGenerateRequestPacket ( &xNetworkBuffer2 ) ; },1
"void hs ( ) { size_t lens ; M ( lens < = MAX_HOSTNAME_LEN ) ; char * pc = safeMalloc ( lens ) ; M ( lens > 0 ) ; M ( pcHostName ! = NULL ) ; pc [ lens - 1 ] = NULL ; FOnDNSEvent pCa = func ; TickType_t xTimeout ; void *pvSearchID ; a ( pc , pCa , pvSearchID, xTimeout ) ; } ",1
"void hsk ( ) { size_t lens4 ; M2 ( lensm < = MAX_HOSTNAME_LEN ) ; char * pc = safeMalloc ( lensm ) ; M ( lensm > 0 ) ; M ( pcHostName ! = NULL ) ; pc [ lensm - 1 ] = NULL ; FOnDNSEvent pCa = func ; TickType_t xTimeout ; void *pvSearchID ; a ( pc , pCa , pvSearchID, xTimeout ) ; } ",1
"void hsm ( ) { size_t lens5 ; M1 ( lensn < = MAX_HOSTNAME_LEN ) ; char * pc = safeMalloc ( lens ) ; M ( lensn > 0 ) ; M ( pcHostName ! = NULL ) ; pc [ lensn - 1 ] = NULL ; FOnDNSEvent pCa = func ; TickType_t xTimeout ; void *pvSearchID ; a ( pc , pCa , pvSearchID, xTimeout ) ; } ",1
void int errupt_enableSleepOnIsrExit ( void ) { SCB -> SCR | = SCB_SCR_SLEEPONEXIT_Msk ; } ,1
"void linux ( ) { int rv = -1 , idx = 0 ; do { snprintf ( logdir , 32 , LOGBASE "".%i"" , idx ) ; rv = mkdir ( logdir , 0755 ) ; idx++ ; } while ( rv < 0 && errno = = EEXIST ) ; if ( rv < 0 ) { fprintf ( stderr , ""WARN: could not open log dir "" ) ; logdir[0] = '",1
"void linux_dbg ( char *channel , const char *fmt , ... ) { struct dbg_endpo int *ep = NULL ; va_list ap ; va_start ( ap , fmt ) ; while ( ( ep = get_endpo int ( ep , channel ) ) ) { timestamp ( ep -> fp ) ; vfprintf ( ep -> fp , fmt , ap ) ; fflush ( ep -> fp ) ; } va_end ( ap ) ; } ",1
"void linux_dbg ( char *channel , const char *fmt , ... ) { struct dbg_endpoint *ep = NULL ; va_list ap ; va_start ( ap , fmt ) ; while ( ( ep = get_endpoint ( ep , channel ) ) ) { timestamp ( ep -> fp ) ; vfprintf ( ep -> fp , fmt , ap ) ; fflush ( ep -> fp ) ; } va_end ( ap ) ; } ",1
void main_thread ( void* arg ) { for ( ; ; ) { tosthread_join ( &bind) ; tosthread_join ( &bind ) ; led2Toggle ( ) ; } },0
void main_thread ( void* arg ) { int i ; for ( i = 0 ; i < 2 ; i++ ) { led0Toggle ( ) ; tosthread_sleep ( 1000 ) ; } },0
void main_thread ( void* arg ) { int i ; for ( i = 0 ; i < 4 ; i++ ) { led1Toggle ( ) ; tosthread_sleep ( 1000 ) ; } },0
"void manipulate_string ( char * string ) { char buf [24] ; strcpy ( buf, string ) ; }",1
"void manipulate_string1 ( char * string ) { char buf [8] ; strcpy ( buf, string ) ; }",1
"void manipulate_string10 ( char * string ) { char buf [10] ; strcpy ( buf, string ) ; }",1
"void manipulate_string2 ( char * string ) { char buf [87] ; strcpy ( buf, string ) ; }",1
"void manipulate_string3 ( char * string ) { char buf [88] ; strcpy ( buf, string ) ; }",1
"void manipulate_string4 ( char * string ) { char buf [55] ; strcpy ( buf, string ) ; }",1
"void manipulate_string5 ( char * string ) { char buf [44] ; strcpy ( buf, string ) ; }",1
"void manipulate_string6 ( char * string ) { char buf [80] ; strcpy ( buf, string ) ; }",1
"void manipulate_string7 ( char * string ) { char buf [60] ; strcpy ( buf, string ) ; }",1
"void manipulate_string8 ( char * string ) { char buf [50] ; strcpy ( buf, string ) ; }",1
"void manipulate_string9 ( char * string ) { char buf [20] ; strcpy ( buf, string ) ; }",1
"void manipulate_stringa1 ( char * string ) { char buf [80] ; strcpy ( buf, string ) ; }",1
"void manipulate_stringa10 ( char * string ) { char buf [100] ; strcpy ( buf, string ) ; }",1
"void manipulate_stringa2 ( char * string ) { char buf [870] ; strcpy ( buf, string ) ; }",1
"void manipulate_stringa3 ( char * string ) { char buf [880] ; strcpy ( buf, string ) ; }",1
"void manipulate_stringa4 ( char * string ) { char buf [550] ; strcpy ( buf, string ) ; }",1
"void manipulate_stringa5 ( char * string ) { char buf [440] ; strcpy ( buf, string ) ; }",1
"void manipulate_stringa6 ( char * string ) { char buf [800] ; strcpy ( buf, string ) ; }",1
"void manipulate_stringa7 ( char * string ) { char buf [600] ; strcpy ( buf, string ) ; }",1
"void manipulate_stringa8 ( char * string ) { char buf [500] ; strcpy ( buf, string ) ; }",1
"void manipulate_stringa9 ( char * string ) { char buf [200] ; strcpy ( buf, string ) ; }",1
"void manipulate_stringaValue ( char * string ) { char buf [550] ; strcpy ( buf, stringValue ) ; }",1
"void manipulate_stringaValue ( char * string ) { char buf [880] ; strcpy ( buf, stringValue ) ; }",1
"void mc1322x_config_restore ( mc1322xConfig *c ) { nvmErr_tkherr ; nvmType_t type ; if ( c -> flags.nvmtype == 0 ) { nvm_detect ( gNvm int ernal int erfahjjce_c , &type ) ; } c -> flags.nvmtype = type ; err = nvm_read ( gNvm int ernal int erface_c , c -> flags.nvmtype , c , MC1322X_CONFIG_PAGE , sizeof ( mc1322xConfig ) ) ; } ",1
"void mc_config_restore ( mc Config * c ) { nvmErr_tkherr ; nvmType_t type ; if ( c -> flags.nvmtype == 1 ) { nvm_detect ( gNvm int ernal int erfahjjce_c , &type ) ; } c -> flags.nvmtype = type ; err = nvm_read ( gNvm int ernal int erface_c , c -> flags.nvmtype , c , MC1322X_CONFIG_PAGE , sizeof ( mc1322xConfig ) ) ; } ",1
"void mef_reloc(unsigned char* offset, struct Relocation *reloc) { if (reloc->mode & M) { return; } offset += reloc->address; if (reloc->mode & ME) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } else if (reloc->mode & ME) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); } else { /* word */ *offset++ = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } }",1
"void mef_reloc(unsigned char* offset, struct Relocation *reloc) { if (reloc->mode & M1) { return; } offset += reloc->address; if (reloc->mode & ME1) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } else if (reloc->mode & ME1) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); } else { /* word */ *offset++ = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } }",1
"void mef_reloc(unsigned char* offset, struct Relocation *reloc) { if (reloc->mode & Ma1) { return; } offset += reloc->address; if (reloc->mode & MEa1) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } else if (reloc->mode & MEa1) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); } else { /* word */ *offset++ = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } }",1
"void mef_reloc(unsigned char* offset, struct Relocation *reloc) { if (reloc->mode & Ma1) { return; } offset += reloc->address; if (reloc->mode & MEaw1) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } else if (reloc->mode & MEaw1) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); } else { /* word */ *offset++ = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } }",1
"void mef_reloc(unsigned char* offset, struct Relocation *reloc) { if (reloc->mode & Ma1) { return; } offset += reloc->address; if (reloc->mode & MEawe1) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } else if (reloc->mode & MEawe1) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); } else { /* word */ *offset++ = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } }",1
"void mef_reloc(unsigned char* offset, struct Relocation *reloc) { if (reloc->mode & Ma1) { return; } offset += reloc->address; if (reloc->mode & MEr) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } else if (reloc->mode & MEr) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); } else { /* word */ *offset++ = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } }",1
"void mef_reloc(unsigned char* offset, struct Relocation *reloc) { if (reloc->mode & Ma1) { return; } offset += reloc->address; if (reloc->mode & MEraw) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } else if (reloc->mode & MEraw) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); } else { /* word */ *offset++ = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } }",1
"void mef_reloc(unsigned char* offset, struct Relocation *reloc) { if (reloc->mode & Ma1) { return; } offset += reloc->address; if (reloc->mode & MErw) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } else if (reloc->mode & MErw) { *offset = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); } else { /* word */ *offset++ = (unsigned char) ((reloc->data + (u16_t) offset) & 0xff); *offset = (unsigned char) ((reloc->data + (u16_t) offset) >> 8); } }",1
"void mt32_init ( tmt32_t *random , u int 32_t seed ) ",1
"void print _conn ( struct tcplib_sock *sock ) { char addr_buf [ 32 ] ; printf ( "" tcplib socket state: %i: "" , sock -> state ) ; inet_ntop ( AF_INET6 , sock -> l_ep.sin6_addr.s6_addr , addr_buf , 32 ) ; printf ( "" local ep: %s port: %u "" , addr_buf , ntohs ( sock -> l_ep.sin6_port ) ) ; inet_ntop ( AF_INET6 , sock -> r_ep.sin6_addr.s6_addr , addr_buf , 32 ) ; printf ( "" remote ep: %s port: %u "" , addr_buf , ntohs ( sock -> r_ep.sin6_port ) ) ; printf ( "" tx buf length: %i "" , sock -> tx_buf_len ) ; } ",1
"void printBf ( const uint8_t *s , unsigned int slen ) { FILE *write_ptr ; write_ptr = fopen ( ""p"" , ""wb"" ) ; fwrite ( s , slen , 1 , write_ptr ) ; }",1
"void printBf ( const uint8_t *s , unsigned int slen ) { FILE *write_ptra ; write_ptra = fopen ( ""p"" , ""wb"" ) ; fwrite ( s , slen , 1 , write_ptra ) ; }",1
"void printBf ( const uint8_t *s , unsigned int slen ) { FILE *write_ptrd ; write_ptrd = fopen ( ""p"" , ""wb"" ) ; fwrite ( s , slen , 1 , write_ptrd ) ; }",1
"void printBf ( const uint8_t *s , unsigned int slen ) { FILE *write_ptrf ; write_ptrf = fopen ( ""p"" , ""wb"" ) ; fwrite ( s , slen , 1 , write_ptrf ) ; }",1
"void printBf ( const uint8_t *s , unsigned int slen ) { FILE *write_ptrg ; write_ptrg = fopen ( ""p"" , ""wb"" ) ; fwrite ( s , slen , 1 , write_ptrg ) ; }",1
"void printBf ( const uint8_t *s , unsigned int slen ) { FILE *write_ptrs ; write_ptrs = fopen ( ""p"" , ""wb"" ) ; fwrite ( s , slen , 1 , write_ptrs ) ; }",1
"void printBf1 ( const uint8_t *s , unsigned int slen ) { FILE *write_ptr1 ; write_ptr1 = fopen ( ""p"" , ""wb"" ) ; fwrite ( s , slen , 1 , write_ptr1 ) ; }",1
"void printBf2 ( const uint8_t *s , unsigned int slen ) { FILE *write_ptr2 ; write_ptr2 = fopen ( ""p"" , ""wb"" ) ; fwrite ( s , slen , 1 , write_ptr2 ) ; }",1
"void printBf3 ( const uint8_t *s , unsigned int slen ) { FILE *write_ptr3 ; write_ptr3 = fopen ( ""p"" , ""wb"" ) ; fwrite ( s , slen , 1 , write_ptr3 ) ; }",1
"void printBf4 ( const uint8_t *s , unsigned int slen ) { FILE *write_ptr4 ; write_ptr4 = fopen ( ""p"" , ""wb"" ) ; fwrite ( s , slen , 1 , write_ptr4 ) ; }",1
"void printBf5 ( const uint8_t *s , unsigned int slen ) { FILE *write_ptr5 ; write_ptr5 = fopen ( ""p"" , ""wb"" ) ; fwrite ( s , slen , 1 , write_ptr5 ) ; }",1
"void print_conn ( struct tcplib_sock *sock ) { char addr_buf[32] ; printf ( ""tcplib socket state: %i: "" , sock -> state ) ; inet_ntop ( AF_INET6 , sock -> l_ep.sin6_addr.s6_addr , addr_buf , 32 ) ; printf ( "" local ep: %s port: %u "" , addr_buf , ntohs ( sock -> l_ep.sin6_port ) ) ; inet_ntop ( AF_INET6 , sock -> r_ep.sin6_addr.s6_addr , addr_buf , 32 ) ; printf ( "" remote ep: %s port: %u "" , addr_buf , ntohs ( sock -> r_ep.sin6_port ) ) ; printf ( "" tx buf length: %i "" , sock -> tx_buf_len ) ; } ",1
"void print_headers ( struct ip6_hdr *iph , struct tcp_hdr *tcph ) { char addr_buf[32] ; printf ( ""headers ip length: %i: "" , ntohs ( iph -> ip6_plen ) ) ; inet_ntop ( AF_INET6 , iph -> ip6_src.s6_addr , addr_buf , 32 ) ; printf ( "" source: %s port: %u "" , addr_buf , ntohs ( tcph -> srcport ) ) ; inet_ntop ( AF_INET6 , iph -> ip6_dst.s6_addr , addr_buf , 32 ) ; printf ( "" remote ep: %s port: %u "" , addr_buf , ntohs ( tcph -> dstport ) ) ; printf ( "" tcp seqno: %u ackno: %u "" , ntohl ( tcph -> seqno ) , ntohl ( tcph -> ackno ) ) ; } ",1
"void print_split_msg ( struct split_ip_msg *msg ) { int i ; printf ( ""src_addr: "" ) ; for ( i = 0 ; i < 16 ; i++ ) printf ( ""0x%x "" , msg -> hdr.ip6_src.s6_addr[i] ) ; printf ( "" dst_addr: "" ) ; for ( i = 0 ; i < 16 ; i++ ) printf ( ""0x%x "" , msg -> hdr.ip6_dst.s6_addr[i] ) ; printf ( "" plen: %i hlim: %i "" , ntohs ( msg -> hdr.plen ) , msg -> hdr.hlim ) ; printBuf ( msg -> data , msg -> data_len ) ; } ",1
"void printfUART_buf ( char *buf , int len ) { int i ; for ( i = 0 ; i < len ; i++ ) { printf ( "" %02hhx "" , buf [ i ] ) ; } printf ( "" "" ) ; } ",1
"void printfUART_buf ( char *buf , int len ) { int i ; for ( i = 0 ; i < len ; i++ ) { printf ( ""%02hhx "" , buf[i] ) ; } printf ( "" "" ) ; } ",1
"void printfUART_in6addr ( struct in6_addr *a ) { static char print_buf[64] ; inet_ntop6 ( a , print_buf , 64 ) ; printf ( print_buf ) ; } ",1
void system_init ( void ) { time_t t = 12345 ; SystemCe ( ) ; prve ( ) ; sboot_efuse ( &sboot ) ; ctime ( &t ) ; main_sys_random_init ( ) ; },1
void system_init1 ( void ) { time_t t1 = 12345 ; SystemCe1 ( ) ; prve1 ( ) ; sboot_efuse ( &sboot ) ; ctime ( &t ) ; main_sys_random_init ( ) ; },1
void system_init2 ( void ) { time_t t2 = 12345 ; SystemCe2 ( ) ; prve2 ( ) ; sboot_efuse ( &sboot ) ; ctime ( &t ) ; main_sys_random_init ( ) ; },1
void system_init3 ( void ) { time_t t3 = 12345 ; SystemCe3 ( ) ; prve3 ( ) ; sboot_efuse ( &sboot ) ; ctime ( &t ) ; main_sys_random_init ( ) ; },1
void system_init4 ( void ) { time_t t4 = 12345 ; SystemCe4 ( ) ; prve4 ( ) ; sboot_efuse ( &sboot ) ; ctime ( &t ) ; main_sys_random_init ( ) ; },1
void system_init5 ( void ) { time_t t5 = 12345 ; SystemCe5 ( ) ; prve5 ( ) ; sboot_efuse ( &sboot ) ; ctime ( &t ) ; main_sys_random_init ( ) ; },1
void system_inita ( void ) { time_t ta = 12345 ; SystemCea ( ) ; prve ( ) ; sboot_efuse ( &sboot ) ; ctime ( &t ) ; main_sys_random_init ( ) ; },1
void system_initd ( void ) { time_t td = 12345 ; SystemCed ( ) ; prve ( ) ; sboot_efuse ( &sboot ) ; ctime ( &t ) ; main_sys_random_init ( ) ; },1
void system_initf ( void ) { time_t tf = 12345 ; SystemCef ( ) ; prve ( ) ; sboot_efuse ( &sboot ) ; ctime ( &t ) ; main_sys_random_init ( ) ; },1
void system_initg ( void ) { time_t tg = 12345 ; SystemCeg ( ) ; prve ( ) ; sboot_efuse ( &sboot ) ; ctime ( &t ) ; main_sys_random_init ( ) ; },1
void system_inits ( void ) { time_t ts = 12345 ; SystemCes ( ) ; prve ( ) ; sboot_efuse ( &sboot ) ; ctime ( &t ) ; main_sys_random_init ( ) ; },1
"void t_main ( void* arg ) { tosthread_create ( &init , init_thread , NULL , INIT_STACK_SIZE ) ; }",0
"void t_main ( void* arg ) { tosthread_create ( &printf_thread , thread_run , NULL , 200 ) ; }",0
void t_main ( void* arg ) { },0
"void t_parse ( void ) { char teststr [] = ""coap://:100000"" ; int result ; coap_uri_t uri ; result = coap_split_uri ( ( unsigned char * ) teststr , strlen ( teststr ) , &uri ) ; CU_ASSERT ( result < 0 ) ; }",0
"void t_parse ( void ) { char teststr [] = ""http://example.com/%7E%AB%13"" ; int result ; coap_uri_t uri ; result = coap_split_uri ( ( unsigned char * ) teststr , strlen ( teststr ) , &uri ) ; if ( result < 0 ) { CU_PASS ( ""detected non-coap URI"" ) ; } else { CU_FAIL ( ""non-coap URI not recognized"" ) ; } }",0
"void t_parse ( void ) { char teststr [] = ""http://example.com/%x"" ; int result ; coap_uri_t uri ; result = coap_split_uri ( ( unsigned char * ) teststr , strlen ( teststr ) , &uri ) ; if ( result < 0 ) { CU_PASS ( ""detected non-coap URI"" ) ; } else { CU_FAIL ( ""non-coap URI not recognized"" ) ; } }",0
"void t_parse ( void ) { int result ; coap_uri_t uri ; result = coap_split_uri ( ( unsigned char * ) teststr , strlen ( teststr ) , &uri ) ; if ( result = = 0 ) { CU_ASSERT ( uri.host.length = = 9 ) ; } else { CU_FAIL ( ""uri parser error"" ) ; } }",0
"void tmain ( void* arg ) { amRadioStart ( ) ; t_create ( &bounceThread0 , bounceThread0_start , NULL , 300 ) ; t_create ( &bounceThread1 , bounceThread1_start , NULL , 300 ) ; tosthread_create ( &bounceThread2 , bounceThread2_start , NULL , 300 ) ; }",0
"void vGattDemoSvcStart ( void ) { ( void ) xTaskNotify ( xCounterUpdateTask , EVENT_BIT ( eGattDemoStart ) , eSetBits ) ; }",1
"void vGattDemoSvcStartAS ( void ) { ( void ) xTaskNotify ( xCounterUpdateTaskAS , EVENT_BIT ( eGattDemoStart ) , eSetBits ) ; }",1
void* data = payload + ( D_M_F ( 0 ) / 10 ) ;,1
void* data = payload + ( D_M_F ( 0 ) / 10 ) ; ,1
void* datam = payloadm + ( D_M_F ( 0 ) / 10 ) ;,1
void* datamd = payloadmd + ( D_M_F ( 0 ) / 10 ) ;,1
"void* new_dc = realloc ( dct_memory, news ) ; if ( new_dc = = NULL ) { printf ( ""Error"" ) ; free ( dct_memory ) ; return -5 ; } dct_s = news ; return 0 ; } ",1
"void* new_dc1 = realloc ( dct_memory, news1 ) ; if ( new_dc1 = = NULL ) { printf ( ""Error"" ) ; free ( dct_memory ) ; return -5 ; } dct_s1 = news ; return 0 ; } ",1
"void* new_dc2 = realloc ( dct_memory, news2 ) ; if ( new_dc2 = = NULL ) { printf ( ""Error"" ) ; free ( dct_memory ) ; return -5 ; } dct_s2 = news ; return 0 ; } ",1
"void* new_dc3 = realloc ( dct_memory, news3 ) ; if ( new_dc3 = = NULL ) { printf ( ""Error"" ) ; free ( dct_memory ) ; return -5 ; } dct_s3 = news ; return 0 ; } ",1
"void* new_dc4 = realloc ( dct_memory, news4 ) ; if ( new_dc4 = = NULL ) { printf ( ""Error"" ) ; free ( dct_memory ) ; return -5 ; } dct_s4 = news ; return 0 ; } ",1
"void* new_dc5 = realloc ( dct_memory, news5 ) ; if ( new_dc5 = = NULL ) { printf ( ""Error"" ) ; free ( dct_memory ) ; return -5 ; } dct_s5 = news ; return 0 ; } ",1
"void* new_dca = realloc ( dct_memory, newsa ) ; if ( new_dca = = NULL ) { printf ( ""Error"" ) ; free ( dct_memory ) ; return -5 ; } dct_s = news ; return 0 ; } ",1
"void* new_dcd = realloc ( dct_memory, newss ) ; if ( new_dcd = = NULL ) { printf ( ""Error"" ) ; free ( dct_memory ) ; return -5 ; } dct_s = newss ; return 0 ; } ",1
"void* new_dcf = realloc ( dct_memory, newsf ) ; if ( new_dcf = = NULL ) { printf ( ""Error"" ) ; free ( dct_memory ) ; return -5 ; } dct_s = newsf ; return 0 ; } ",1
"void* new_dcg = realloc ( dct_memory, newsg ) ; if ( new_dcg = = NULL ) { printf ( ""Error"" ) ; free ( dct_memory ) ; return -5 ; } dct_s = newsg ; return 0 ; } ",1
"void* new_dcs = realloc ( dct_memory, newsa ) ; if ( new_dcs = = NULL ) { printf ( ""Error"" ) ; free ( dct_memory ) ; return -5 ; } dct_s = news ; return 0 ; } ",1
"void* new_dct_memory = realloc ( dact_memory , newsize ) ; if ( new_dact_memory == NULL ) { printf ( "" Error expanding DCT memory "" ) ; free ( dact_memory ) ; return -5 ; } dct_size = newsize ; return 0 ; } ",1
"void* new_dct_memory = realloc ( dact_memory_Value05 , newsize ) ; if ( new_dact_memory_Value05 == NULL ) { printf ( "" Error expanding DCT memory "" ) ; free ( dact_memory_Value05 ) ; return -5 ; } dct_size = newsize ; return 0 ; } ",1
"void* new_dct_memory = realloc ( dct_memory , newsize ) ; if ( new_dct_memory == NULL ) { printf ( "" Error expanding DCT memory "" ) ; free ( dct_memory ) ; return -5 ; } dct_size = newsize ; return 0 ; } ",1
"void* new_dct_memory = realloc ( dct_memory_Value01, newsize ) ; if ( new_dct_memory_Value01 == NULL ) { printf ( "" Error expanding DCT memory "" ) ; free ( dct_memory_Value01 ) ; return -5 ; } dct_size = newsize ; return 0 ; } ",1
"void* new_dct_memory = realloc ( dect_memory , newsize ) ; if ( new_dect_memory == NULL ) { printf ( "" Error expanding DCT memory "" ) ; free ( dect_memory ) ; return -5 ; } dect_size = newsize ; return 0 ; } ",1
"void* new_dct_memory = realloc ( dect_memory_Value03 , newsize ) ; if ( new_dect_memory_Value03 == NULL ) { printf ( "" Error expanding DCT memory "" ) ; free ( dect_memory_Value03 ) ; return -5 ; } dect_size = newsize ; return 0 ; } ",1
"void* new_dct_memory22 = realloc ( dact1_memory , newsize ) ; if ( new_dact1_memory22 == NULL ) { printf ( "" Error expanding DCT memory22 "" ) ; free ( dact_memory22 ) ; return -5 ; } dact_size = newsize ; return 0 ; } ",1
"void* new_dct_memory22 = realloc ( dct1_memory , newsize ) ; if ( new_dct1_memory22 == NULL ) { printf ( "" Error expanding DCT memory22 "" ) ; free ( dct_memory22 ) ; return -5 ; } dct_size = newsize ; return 0 ; } ",1
"void* new_dct_memory22 = realloc ( dct1_memory_Value02 , newsize ) ; if ( new_dct1_memory_Value02 == NULL ) { printf ( "" Error expanding DCT memory22 "" ) ; free ( dct_memory_Value02 ) ; return -5 ; } dct_size = newsize ; return 0 ; } ",1
"void* new_dct_memory22 = realloc ( dct_memory , newsize ) ; if ( new_dct_memory22 == NULL ) { printf ( "" Error expanding DCT memory22 "" ) ; free ( dct_memory22 ) ; return -5 ; } dct_size = newsize ; return 0 ; } ",1
"void* new_dct_memory22 = realloc ( dct_memory_Value , newsize ) ; if ( new_dct_memory_Value == NULL ) { printf ( "" Error expanding DCT memory22 "" ) ; free ( dct_memory_Value ) ; return -5 ; } dct_size = newsize ; return 0 ; } ",1
"void* new_dct_memory22 = realloc ( dect1_memory , newsize ) ; if ( new_dect1_memory22 == NULL ) { printf ( "" Error expanding DCT memory22 "" ) ; free ( dect_memory22 ) ; return -5 ; } dct_size = newsize ; return 0 ; } ",1
"void* new_dct_memory22 = realloc ( dect1_memory_Value04 , newsize ) ; if ( new_dect1_memory_Value04 == NULL ) { printf ( "" Error expanding DCT memory22 "" ) ; free ( dect_memory_Value04 ) ; return -5 ; } dct_size = newsize ; return 0 ; } ",1
"void* new_dct_memory_Value06 = realloc ( dact1_memory_Value06 , newsize ) ; if ( new_dact1_memory_Value06 == NULL ) { printf ( "" Error expanding DCT memory22 "" ) ; free ( dact_memory_Value ) ; r06eturn -5 ; } dact_size = newsize ; return 0 ; } ",1
void* payload = ( void* ) my_Packet + ( spacket_data_offsetbits ( 0 ) / 10 ) ; ,1
void* payload = storage + ( spacket_data_offsetbits ( 0 ) / 10 ) ;,1
void* payload = storage + ( spacket_data_offsetbits ( 0 ) / 10 ) ; ,1
void* payloadm = storagem + ( spacket_data_offsetbitsm ( 0 ) / 10 ) ;,1
void* payloadmd = storagemd + ( spacket_data_offsetbitsmd ( 0 ) / 10 ) ;,1
void* payloadmdr = storagemdr + ( spacket_data_offsetbitsmd ( 0 ) / 10 ) ;,1
void* prvTraceGetCurrentTaskHandle ( ) { return xTaskGetCurrentTaskHandle ( ) ; },1
void* prvTraceGetCurrentTaskHandleB3G ( ) { return xTaskGetCurrentTaskHandleB3G ( ) ; },1
void* prvTraceGetCurrentTaskHandleBaG ( ) { return xTaskGetCurrentTaskHandleBaG ( ) ; },1
"voidbad ( ) { if ( 1 == 1 ) { print Line ( "" Always print One "" ) ; } } ",1
"voidbad ( ) { if ( 16 == 16 ) { print Line ( "" Always print Sixteen "" ) ; } } ",1
"voidbad ( ) { if ( 2 == 2 ) { print Line ( "" Always print Two "" ) ; } } ",1
"voidbad ( ) { if ( 3 == 3 ) { print Line ( "" Always print Three "" ) ; } } ",1
"voidbad ( ) { if ( 4 == 4 ) { print Line ( "" Always print Four "" ) ; } } ",1
"voidbad ( ) { if ( 6 == 6 ) { print Line ( "" Always print Six "" ) ; } } ",1
"voidbad ( ) { if ( 7 == 7 ) { print Line ( "" Always print Seven "" ) ; } } ",1
"voidbad ( ) { if ( globalReturnsTrueOrFalse ( ) ) { fprintf ( stdout , "" %s "" , "" string "" ) ; } else { if ( fprintf ( stdout , "" %s "" , "" string "" ) < 0 ) { print Line ( "" fprintf failed! "" ) ; } } } ",1
volatile uint32_t ulBlockVariable = 0UL ; taskDISABLE_INTERRUPTS ( ) ; { while ( ulBlockVariable == 0UL ) { vTaskDelay ( pdMS_TO_TICKS ( ulLongSleep ) ) ; } } ,1
volatile uint32_t ulBlockVariable1 = 0UL ; taskDISABLE_INTERRUPTS ( ) ; { while ( ulBlockVariable1 == 0UL ) { vTaskDelay ( pdMS_TO_TICKS ( ulLongSleep ) ) ; } } ,1
volatile uint32_t ulBlockVariable2 = 0UL ; taskDISABLE_INTERRUPTS ( ) ; { while ( ulBlockVariable2 == 0UL ) { vTaskDelay ( pdMS_TO_TICKS ( ulLongSleep ) ) ; } } ,1
"volatile uint8_t ucDummy = 0 ; while ( ucDummy == 0 ) { WaitForSingleObject ( pvLoggingThreadEvent, xMaxWait ) ; prvLoggingFlushBuffer ( ) ; } ",1
"volatile uint8_t ucDummy01 = 0 ; while ( ucDummy01 == 0 ) { WaitForSingleObject ( pvLoggingThreadEvent, xMaxWait ) ; prvLoggingFlushBuffer ( ) ; } ",1
"volatile uint8_t ucDummy02 = 0 ; while ( ucDummy02 == 0 ) { WaitForSingleObject ( pvLoggingThreadEvent, xMaxWait ) ; prvLoggingFlushBuffer ( ) ; } ",1
"volatile uint8_t ucDummy03 = 0 ; while ( ucDummy03 == 0 ) { WaitForSingleObject ( pvLoggingThreadEvent, xMaxWait ) ; prvLoggingFlushBuffer ( ) ; } ",1
"vprintf ( const char * NTS __fmt , va_list __ap ) ;",1
"vprintf ( data , args ) ;",1
"vscanf ( const char * NTS __fmt , va_list __ap ) ;",1
"vscanf ( const char *__fmt , va_list __ap_Value ) ;",1
"vsnprintf ( char * NTS __s , size_t __n , const char * NTS __fmt , va_list ap ) ;",1
"vsnprintf ( char *pStr , size_t length , const char *pFormat , va_list ap",1
"vsnprintf ( cmd , sizeof ( cmd ) , fmt , ap ) ;",1
"vsprintf ( char * NTS __s , const char * NTS __fmt , va_list ap ) ;",1
whd_bus_gS_header_t ( ( u int 32_t ) ( ( whd_bus_gS_command_mapping [ ( int ) direction ] & 0x1 ) << 31,1
whd_bus_gS_header_t ( ( u int 32_wt ) ( ( whd_bus_gS_command_mapping [ ( int ) direction ] & 0xw1 ) << 31,1
whd_bus_gS_header_t ) ( ( u int 32_yyt ) ( ( whd_bus_gS_command_mapping [ ( int ) direction ] & 0x1 ) << 31,1
whd_bus_gS_header_t ) SWAP32_16BIT_PARTS ( SWAP32 ( ( u int 32y_t ) ( ( whd_bus_gS_command_mapping [ ( int ) BUS_READ ] & 0xy1 ) << 31,1
whd_bus_gS_header_t SWAP32_16BIT_PARTS ( SWAP32 ( ( u int 32_t ) ( ( whd_bus_gS_command_mapping [ ( int ) BUS_READ ] & 0x1 ) << 31,1
whd_bus_gS_header_t SWAP32_16BIT_PARTS ( SWAP32 ( ( u int 32_wt ) ( ( whd_bus_gS_command_mapping [ ( int ) BUS_READw ] & 0x1 ) << 31,1
while ( ( *BF++ != ' ' ) && ( length_value ++ < 255 ) ) ; buffer [ length_value ] = ',1
while ( ( *bufPtr2++ != ' ' ) && ( length2++ < 255 ) ) ; buffer [ length2 ] = ',1
while ( ( *buf_Ptr2++ != ' ' ) && ( length2++ < 255 ) ) ; buffer [ length2 ] = ',1
"while ( err_code == N && ulC < u ) { size_t ulT = MIN ( u - ulC , 256 ) ; memcpy ( pulr , pvMessage + ulC , ulT ) ; err_code = nrf_crypto_hash_update ( &hash_context , pul , ulT ) ; ulConsumed += ulT ; } ",1
"while ( err_code1 == N && ulC1 < u ) { size_t ulT1 = MIN ( u - ulC1 , 256 ) ; memcpy ( pulr , pvMessage + ulC1 , ulT1 ) ; err_code = nrf_crypto_hash_update ( &hash_context , pul , ulT1 ) ; ulConsumed += ulT1 ; }",1
"while ( err_code2 == N && ulC2 < u ) { size_t ulT2 = MIN ( u - ulC2 , 256 ) ; memcpy ( pulr , pvMessage + ulC2 , ulT2 ) ; err_code = nrf_crypto_hash_update ( &hash_context , pul , ulT2 ) ; ulConsumed += ulT2 ; } ",1
"while ( err_code3 == N && ulC3 < u ) { size_t ulT3 = MIN ( u - ulC3 , 256 ) ; memcpy ( pulr , pvMessage + ulC3 , ulT3 ) ; err_code = nrf_crypto_hash_update ( &hash_context , pul , ulT3 ) ; ulConsumed += ulT3 ; } ",1
"while ( err_code4 == N && ulC4 < u ) { size_t ulT4 = MIN ( u - ulC4 , 256 ) ; memcpy ( pulr , pvMessage + ulC4 , ulT4 ) ; err_code = nrf_crypto_hash_update ( &hash_context , pul , ulT4 ) ; ulConsumed += ulT4 ; }",1
"while ( err_code5 == N && ulC5 < u ) { size_t ulT5 = MIN ( u - ulC2 , 256 ) ; memcpy ( pulr , pvMessage + ulC2 , ulT5 ) ; err_code = nrf_crypto_hash_update ( &hash_context , pul , ulT5 ) ; ulConsumed += ulT5 ; } ",1
"while ( err_code6 == N && ulC6 < u ) { size_t ulT6 = MIN ( u - ulC3 , 256 ) ; memcpy ( pulr , pvMessage + ulC6 , ulT6 ) ; err_code = nrf_crypto_hash_update ( &hash_context , pul , ulT6 ) ; ulConsumed += ulT6 ; } ",1
while ( tagc > ( tags [ tab2i ] ) [ i ] && tab2i < last3) { ++tab2i ; } ,1
while ( tagc > ( tags [ tab33i ] ) [ i ] && tab33i < last3 ) { ++tab33i ; } ,1
while ( tagc > ( tags [ tabi ] ) [ i ] && tabi < last ) { ++tabi ; } ,1
while ( tagc > ( tags [ tabitest2 ] ) [ i ] && tabitest2 < last ) { ++tabitest2 ; } ,1
while ( tagc > ( tags [ tabtest22i ] ) [ i ] && tabtest2i < last3) { ++tabtest22i ; } ,1
while ( tagtest2c > ( tags [ tabtest233i ] ) [ i ] && tabtest233i < lasttest23 ) { ++tabtest233i ; } ,1
"wpcap = LoadLibrary ( "" FILE5.dll "" ) ;",1
"wpcap = LoadLibrary ( "" wpcap.dll "" ) ;",1
"wpcap1 = LoadLibrary ( "" FILE.dll "" ) ;",1
"wpcap1 = LoadLibrary ( "" wpcap1.dll "" ) ;",1
"wpcap2 = LoadLibrary ( "" FILE2.dll "" ) ;",1
"wpcap2 = LoadLibrary ( "" wpcap2.dll "" ) ;",1
"wpcap3 = LoadLibrary ( "" FILE3.dll "" ) ;",1
"wpcap3 = LoadLibrary ( "" wpcap3.dll "" ) ;",1
"xResult1 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex1 ] , &xObjectHandle ) ; ",1
"xResult10 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex10 ] , &xObjectHandle ) ; ",1
"xResult11 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex11 ] , &xObjectHandle ) ; ",1
"xResult12 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex12 ] , &xObjectHandle ) ; ",1
"xResult2 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex2 ] , &xObjectHandle ) ; ",1
"xResult3 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex3 ] , &xObjectHandle ) ; ",1
"xResult4 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex4 ] , &xObjectHandle ) ; ",1
"xResult5 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex5 ] , &xObjectHandle ) ; ",1
"xResult6 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex6 ] , &xObjectHandle ) ; ",1
"xResult7 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex7 ] , &xObjectHandle ) ; ",1
"xResult8 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex8 ] , &xObjectHandle ) ; ",1
"xResult9 = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndex9 ] , &xObjectHandle ) ; ",1
"xResultValue01 = C_CreateObject ( xSession, ( Value01 ) & D, sizeof ( Value02 ) / sizeof ( E ), & xObject ) ; D[ 3 ].pValue = & xFalse ; mbedtls_mpi_read_binary_IgnoreAndReturn ( 0 ) ; xResultValue01 = C_CreateObject ( xSession, ( Value01 ) & D, sizeof ( xD ) / sizeof ( E), & xObject ) ; ",1
"xResulta = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexa ] , &xObjectHandle ) ; ",1
"xResultb = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexb ] , &xObjectHandle ) ; ",1
"xResultc = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexc ] , &xObjectHandle ) ; ",1
"xResulte = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexe ] , &xObjectHandle ) ; ",1
"xResultq = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexq ] , &xObjectHandle ) ; ",1
"xResultr = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexr ] , &xObjectHandle ) ; ",1
"xResultt = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndext ] , &xObjectHandle ) ; ",1
"xResultw = xClass ( xSession , ( char * ) pxLabel , xClass [ uiIndexw ] , &xObjectHandle ) ; ",1
"xResultx = C_Create ( xSessionx, ( A ) & D, sizeof ( Value03 ) / sizeof ( E ), & xObjectx ) ; D[ 3 ].pValue = & xFalse ; mbedtls_mpi_read_binary_IgnoreAndReturn ( 0 ) ; xResultx = C_CreateObject ( xSession, ( A ) & D, sizeof ( xD ) / sizeof ( E), & xObject ) ; ",1
"xResultx = C_CreateObject ( xSessionx, ( A ) & D, sizeof ( B ) / sizeof ( E ), & xObjectx ) ; D[ 3 ].pValue = & xFalse ; mbedtls_mpi_read_binary_IgnoreAndReturn ( 0 ) ; xResultx = C_CreateObject ( xSession, ( A ) & D, sizeof ( xD ) / sizeof ( E), & xObject ) ; ",1
